
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.0
 * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
 */
Prisma.prismaVersion = {
  client: "6.11.0",
  engine: "9c30299f5a0ea26a96790e13f796dc6094db3173"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  Serializable: 'Serializable'
});

exports.Prisma.StagingRowScalarFieldEnum = {
  id: 'id',
  fileId: 'fileId',
  index: 'index',
  rawJson: 'rawJson',
  rowHash: 'rowHash'
};

exports.Prisma.CustomerScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  phone: 'phone',
  address: 'address',
  accountType: 'accountType',
  tag1: 'tag1',
  tag2: 'tag2',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  docType: 'docType',
  txnDate: 'txnDate',
  voucherNo: 'voucherNo',
  description: 'description',
  dueDate: 'dueDate',
  amountBaseCents: 'amountBaseCents',
  discountCents: 'discountCents',
  amountNetCents: 'amountNetCents',
  vatCents: 'vatCents',
  debitCents: 'debitCents',
  creditCents: 'creditCents',
  currency: 'currency',
  naturalKey: 'naturalKey',
  rowHash: 'rowHash',
  lastFileId: 'lastFileId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TransactionSourceScalarFieldEnum = {
  id: 'id',
  transactionId: 'transactionId',
  fileId: 'fileId'
};

exports.Prisma.TransactionAuditScalarFieldEnum = {
  id: 'id',
  oldTxnId: 'oldTxnId',
  newTxnId: 'newTxnId',
  fileId: 'fileId',
  reason: 'reason',
  createdAt: 'createdAt'
};

exports.Prisma.CustomerBalanceSnapshotScalarFieldEnum = {
  id: 'id',
  customerId: 'customerId',
  fileId: 'fileId',
  reportedTotalDebitCents: 'reportedTotalDebitCents',
  reportedTotalCreditCents: 'reportedTotalCreditCents',
  reportedDebtBalanceCents: 'reportedDebtBalanceCents',
  reportedCreditBalanceCents: 'reportedCreditBalanceCents',
  calcTotalDebitCents: 'calcTotalDebitCents',
  calcTotalCreditCents: 'calcTotalCreditCents',
  calcDebtBalanceCents: 'calcDebtBalanceCents',
  calcCreditBalanceCents: 'calcCreditBalanceCents',
  diffTotalDebitCents: 'diffTotalDebitCents',
  diffTotalCreditCents: 'diffTotalCreditCents',
  diffDebtBalanceCents: 'diffDebtBalanceCents',
  diffCreditBalanceCents: 'diffCreditBalanceCents',
  createdAt: 'createdAt'
};

exports.Prisma.StagingFileScalarFieldEnum = {
  id: 'id',
  originalFilename: 'originalFilename',
  uploadedAt: 'uploadedAt',
  status: 'status',
  rowCount: 'rowCount',
  insertedCount: 'insertedCount',
  updatedCount: 'updatedCount',
  skippedCount: 'skippedCount',
  error: 'error'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};


exports.Prisma.ModelName = {
  StagingRow: 'StagingRow',
  Customer: 'Customer',
  Transaction: 'Transaction',
  TransactionSource: 'TransactionSource',
  TransactionAudit: 'TransactionAudit',
  CustomerBalanceSnapshot: 'CustomerBalanceSnapshot',
  StagingFile: 'StagingFile'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
