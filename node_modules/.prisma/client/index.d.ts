
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model StagingRow
 * 
 */
export type StagingRow = $Result.DefaultSelection<Prisma.$StagingRowPayload>
/**
 * Model Customer
 * 
 */
export type Customer = $Result.DefaultSelection<Prisma.$CustomerPayload>
/**
 * Model Transaction
 * 
 */
export type Transaction = $Result.DefaultSelection<Prisma.$TransactionPayload>
/**
 * Model TransactionSource
 * 
 */
export type TransactionSource = $Result.DefaultSelection<Prisma.$TransactionSourcePayload>
/**
 * Model TransactionAudit
 * 
 */
export type TransactionAudit = $Result.DefaultSelection<Prisma.$TransactionAuditPayload>
/**
 * Model CustomerBalanceSnapshot
 * 
 */
export type CustomerBalanceSnapshot = $Result.DefaultSelection<Prisma.$CustomerBalanceSnapshotPayload>
/**
 * Model StagingFile
 * 
 */
export type StagingFile = $Result.DefaultSelection<Prisma.$StagingFilePayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more StagingRows
 * const stagingRows = await prisma.stagingRow.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more StagingRows
   * const stagingRows = await prisma.stagingRow.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.stagingRow`: Exposes CRUD operations for the **StagingRow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StagingRows
    * const stagingRows = await prisma.stagingRow.findMany()
    * ```
    */
  get stagingRow(): Prisma.StagingRowDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customer`: Exposes CRUD operations for the **Customer** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Customers
    * const customers = await prisma.customer.findMany()
    * ```
    */
  get customer(): Prisma.CustomerDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transaction`: Exposes CRUD operations for the **Transaction** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Transactions
    * const transactions = await prisma.transaction.findMany()
    * ```
    */
  get transaction(): Prisma.TransactionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transactionSource`: Exposes CRUD operations for the **TransactionSource** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionSources
    * const transactionSources = await prisma.transactionSource.findMany()
    * ```
    */
  get transactionSource(): Prisma.TransactionSourceDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.transactionAudit`: Exposes CRUD operations for the **TransactionAudit** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more TransactionAudits
    * const transactionAudits = await prisma.transactionAudit.findMany()
    * ```
    */
  get transactionAudit(): Prisma.TransactionAuditDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.customerBalanceSnapshot`: Exposes CRUD operations for the **CustomerBalanceSnapshot** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CustomerBalanceSnapshots
    * const customerBalanceSnapshots = await prisma.customerBalanceSnapshot.findMany()
    * ```
    */
  get customerBalanceSnapshot(): Prisma.CustomerBalanceSnapshotDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stagingFile`: Exposes CRUD operations for the **StagingFile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StagingFiles
    * const stagingFiles = await prisma.stagingFile.findMany()
    * ```
    */
  get stagingFile(): Prisma.StagingFileDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.11.0
   * Query Engine version: 9c30299f5a0ea26a96790e13f796dc6094db3173
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    StagingRow: 'StagingRow',
    Customer: 'Customer',
    Transaction: 'Transaction',
    TransactionSource: 'TransactionSource',
    TransactionAudit: 'TransactionAudit',
    CustomerBalanceSnapshot: 'CustomerBalanceSnapshot',
    StagingFile: 'StagingFile'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "stagingRow" | "customer" | "transaction" | "transactionSource" | "transactionAudit" | "customerBalanceSnapshot" | "stagingFile"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      StagingRow: {
        payload: Prisma.$StagingRowPayload<ExtArgs>
        fields: Prisma.StagingRowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StagingRowFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StagingRowFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>
          }
          findFirst: {
            args: Prisma.StagingRowFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StagingRowFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>
          }
          findMany: {
            args: Prisma.StagingRowFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>[]
          }
          create: {
            args: Prisma.StagingRowCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>
          }
          createMany: {
            args: Prisma.StagingRowCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StagingRowCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>[]
          }
          delete: {
            args: Prisma.StagingRowDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>
          }
          update: {
            args: Prisma.StagingRowUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>
          }
          deleteMany: {
            args: Prisma.StagingRowDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StagingRowUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StagingRowUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>[]
          }
          upsert: {
            args: Prisma.StagingRowUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingRowPayload>
          }
          aggregate: {
            args: Prisma.StagingRowAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStagingRow>
          }
          groupBy: {
            args: Prisma.StagingRowGroupByArgs<ExtArgs>
            result: $Utils.Optional<StagingRowGroupByOutputType>[]
          }
          count: {
            args: Prisma.StagingRowCountArgs<ExtArgs>
            result: $Utils.Optional<StagingRowCountAggregateOutputType> | number
          }
        }
      }
      Customer: {
        payload: Prisma.$CustomerPayload<ExtArgs>
        fields: Prisma.CustomerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findFirst: {
            args: Prisma.CustomerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          findMany: {
            args: Prisma.CustomerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          create: {
            args: Prisma.CustomerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          createMany: {
            args: Prisma.CustomerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          delete: {
            args: Prisma.CustomerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          update: {
            args: Prisma.CustomerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          deleteMany: {
            args: Prisma.CustomerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>[]
          }
          upsert: {
            args: Prisma.CustomerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerPayload>
          }
          aggregate: {
            args: Prisma.CustomerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomer>
          }
          groupBy: {
            args: Prisma.CustomerGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerCountAggregateOutputType> | number
          }
        }
      }
      Transaction: {
        payload: Prisma.$TransactionPayload<ExtArgs>
        fields: Prisma.TransactionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findFirst: {
            args: Prisma.TransactionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          findMany: {
            args: Prisma.TransactionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          create: {
            args: Prisma.TransactionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          createMany: {
            args: Prisma.TransactionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          delete: {
            args: Prisma.TransactionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          update: {
            args: Prisma.TransactionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          deleteMany: {
            args: Prisma.TransactionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>[]
          }
          upsert: {
            args: Prisma.TransactionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionPayload>
          }
          aggregate: {
            args: Prisma.TransactionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransaction>
          }
          groupBy: {
            args: Prisma.TransactionGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionCountAggregateOutputType> | number
          }
        }
      }
      TransactionSource: {
        payload: Prisma.$TransactionSourcePayload<ExtArgs>
        fields: Prisma.TransactionSourceFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionSourceFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionSourceFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>
          }
          findFirst: {
            args: Prisma.TransactionSourceFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionSourceFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>
          }
          findMany: {
            args: Prisma.TransactionSourceFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>[]
          }
          create: {
            args: Prisma.TransactionSourceCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>
          }
          createMany: {
            args: Prisma.TransactionSourceCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionSourceCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>[]
          }
          delete: {
            args: Prisma.TransactionSourceDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>
          }
          update: {
            args: Prisma.TransactionSourceUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>
          }
          deleteMany: {
            args: Prisma.TransactionSourceDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionSourceUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionSourceUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>[]
          }
          upsert: {
            args: Prisma.TransactionSourceUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionSourcePayload>
          }
          aggregate: {
            args: Prisma.TransactionSourceAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactionSource>
          }
          groupBy: {
            args: Prisma.TransactionSourceGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionSourceGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionSourceCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionSourceCountAggregateOutputType> | number
          }
        }
      }
      TransactionAudit: {
        payload: Prisma.$TransactionAuditPayload<ExtArgs>
        fields: Prisma.TransactionAuditFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TransactionAuditFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TransactionAuditFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>
          }
          findFirst: {
            args: Prisma.TransactionAuditFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TransactionAuditFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>
          }
          findMany: {
            args: Prisma.TransactionAuditFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>[]
          }
          create: {
            args: Prisma.TransactionAuditCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>
          }
          createMany: {
            args: Prisma.TransactionAuditCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.TransactionAuditCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>[]
          }
          delete: {
            args: Prisma.TransactionAuditDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>
          }
          update: {
            args: Prisma.TransactionAuditUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>
          }
          deleteMany: {
            args: Prisma.TransactionAuditDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.TransactionAuditUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.TransactionAuditUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>[]
          }
          upsert: {
            args: Prisma.TransactionAuditUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$TransactionAuditPayload>
          }
          aggregate: {
            args: Prisma.TransactionAuditAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateTransactionAudit>
          }
          groupBy: {
            args: Prisma.TransactionAuditGroupByArgs<ExtArgs>
            result: $Utils.Optional<TransactionAuditGroupByOutputType>[]
          }
          count: {
            args: Prisma.TransactionAuditCountArgs<ExtArgs>
            result: $Utils.Optional<TransactionAuditCountAggregateOutputType> | number
          }
        }
      }
      CustomerBalanceSnapshot: {
        payload: Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>
        fields: Prisma.CustomerBalanceSnapshotFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CustomerBalanceSnapshotFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CustomerBalanceSnapshotFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>
          }
          findFirst: {
            args: Prisma.CustomerBalanceSnapshotFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CustomerBalanceSnapshotFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>
          }
          findMany: {
            args: Prisma.CustomerBalanceSnapshotFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>[]
          }
          create: {
            args: Prisma.CustomerBalanceSnapshotCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>
          }
          createMany: {
            args: Prisma.CustomerBalanceSnapshotCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CustomerBalanceSnapshotCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>[]
          }
          delete: {
            args: Prisma.CustomerBalanceSnapshotDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>
          }
          update: {
            args: Prisma.CustomerBalanceSnapshotUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>
          }
          deleteMany: {
            args: Prisma.CustomerBalanceSnapshotDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CustomerBalanceSnapshotUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CustomerBalanceSnapshotUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>[]
          }
          upsert: {
            args: Prisma.CustomerBalanceSnapshotUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CustomerBalanceSnapshotPayload>
          }
          aggregate: {
            args: Prisma.CustomerBalanceSnapshotAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCustomerBalanceSnapshot>
          }
          groupBy: {
            args: Prisma.CustomerBalanceSnapshotGroupByArgs<ExtArgs>
            result: $Utils.Optional<CustomerBalanceSnapshotGroupByOutputType>[]
          }
          count: {
            args: Prisma.CustomerBalanceSnapshotCountArgs<ExtArgs>
            result: $Utils.Optional<CustomerBalanceSnapshotCountAggregateOutputType> | number
          }
        }
      }
      StagingFile: {
        payload: Prisma.$StagingFilePayload<ExtArgs>
        fields: Prisma.StagingFileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StagingFileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StagingFileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>
          }
          findFirst: {
            args: Prisma.StagingFileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StagingFileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>
          }
          findMany: {
            args: Prisma.StagingFileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>[]
          }
          create: {
            args: Prisma.StagingFileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>
          }
          createMany: {
            args: Prisma.StagingFileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StagingFileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>[]
          }
          delete: {
            args: Prisma.StagingFileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>
          }
          update: {
            args: Prisma.StagingFileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>
          }
          deleteMany: {
            args: Prisma.StagingFileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StagingFileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StagingFileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>[]
          }
          upsert: {
            args: Prisma.StagingFileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagingFilePayload>
          }
          aggregate: {
            args: Prisma.StagingFileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStagingFile>
          }
          groupBy: {
            args: Prisma.StagingFileGroupByArgs<ExtArgs>
            result: $Utils.Optional<StagingFileGroupByOutputType>[]
          }
          count: {
            args: Prisma.StagingFileCountArgs<ExtArgs>
            result: $Utils.Optional<StagingFileCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    stagingRow?: StagingRowOmit
    customer?: CustomerOmit
    transaction?: TransactionOmit
    transactionSource?: TransactionSourceOmit
    transactionAudit?: TransactionAuditOmit
    customerBalanceSnapshot?: CustomerBalanceSnapshotOmit
    stagingFile?: StagingFileOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CustomerCountOutputType
   */

  export type CustomerCountOutputType = {
    transactions: number
    balances: number
  }

  export type CustomerCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | CustomerCountOutputTypeCountTransactionsArgs
    balances?: boolean | CustomerCountOutputTypeCountBalancesArgs
  }

  // Custom InputTypes
  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerCountOutputType
     */
    select?: CustomerCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountTransactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
  }

  /**
   * CustomerCountOutputType without action
   */
  export type CustomerCountOutputTypeCountBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerBalanceSnapshotWhereInput
  }


  /**
   * Count Type TransactionCountOutputType
   */

  export type TransactionCountOutputType = {
    sources: number
    auditsFrom: number
    auditsTo: number
  }

  export type TransactionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    sources?: boolean | TransactionCountOutputTypeCountSourcesArgs
    auditsFrom?: boolean | TransactionCountOutputTypeCountAuditsFromArgs
    auditsTo?: boolean | TransactionCountOutputTypeCountAuditsToArgs
  }

  // Custom InputTypes
  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionCountOutputType
     */
    select?: TransactionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeCountSourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionSourceWhereInput
  }

  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeCountAuditsFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionAuditWhereInput
  }

  /**
   * TransactionCountOutputType without action
   */
  export type TransactionCountOutputTypeCountAuditsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionAuditWhereInput
  }


  /**
   * Count Type StagingFileCountOutputType
   */

  export type StagingFileCountOutputType = {
    rows: number
    transactionLinks: number
    customerBalances: number
    transactionAudits: number
  }

  export type StagingFileCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rows?: boolean | StagingFileCountOutputTypeCountRowsArgs
    transactionLinks?: boolean | StagingFileCountOutputTypeCountTransactionLinksArgs
    customerBalances?: boolean | StagingFileCountOutputTypeCountCustomerBalancesArgs
    transactionAudits?: boolean | StagingFileCountOutputTypeCountTransactionAuditsArgs
  }

  // Custom InputTypes
  /**
   * StagingFileCountOutputType without action
   */
  export type StagingFileCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFileCountOutputType
     */
    select?: StagingFileCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StagingFileCountOutputType without action
   */
  export type StagingFileCountOutputTypeCountRowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagingRowWhereInput
  }

  /**
   * StagingFileCountOutputType without action
   */
  export type StagingFileCountOutputTypeCountTransactionLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionSourceWhereInput
  }

  /**
   * StagingFileCountOutputType without action
   */
  export type StagingFileCountOutputTypeCountCustomerBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerBalanceSnapshotWhereInput
  }

  /**
   * StagingFileCountOutputType without action
   */
  export type StagingFileCountOutputTypeCountTransactionAuditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionAuditWhereInput
  }


  /**
   * Models
   */

  /**
   * Model StagingRow
   */

  export type AggregateStagingRow = {
    _count: StagingRowCountAggregateOutputType | null
    _avg: StagingRowAvgAggregateOutputType | null
    _sum: StagingRowSumAggregateOutputType | null
    _min: StagingRowMinAggregateOutputType | null
    _max: StagingRowMaxAggregateOutputType | null
  }

  export type StagingRowAvgAggregateOutputType = {
    id: number | null
    fileId: number | null
    index: number | null
  }

  export type StagingRowSumAggregateOutputType = {
    id: number | null
    fileId: number | null
    index: number | null
  }

  export type StagingRowMinAggregateOutputType = {
    id: number | null
    fileId: number | null
    index: number | null
    rawJson: string | null
    rowHash: string | null
  }

  export type StagingRowMaxAggregateOutputType = {
    id: number | null
    fileId: number | null
    index: number | null
    rawJson: string | null
    rowHash: string | null
  }

  export type StagingRowCountAggregateOutputType = {
    id: number
    fileId: number
    index: number
    rawJson: number
    rowHash: number
    _all: number
  }


  export type StagingRowAvgAggregateInputType = {
    id?: true
    fileId?: true
    index?: true
  }

  export type StagingRowSumAggregateInputType = {
    id?: true
    fileId?: true
    index?: true
  }

  export type StagingRowMinAggregateInputType = {
    id?: true
    fileId?: true
    index?: true
    rawJson?: true
    rowHash?: true
  }

  export type StagingRowMaxAggregateInputType = {
    id?: true
    fileId?: true
    index?: true
    rawJson?: true
    rowHash?: true
  }

  export type StagingRowCountAggregateInputType = {
    id?: true
    fileId?: true
    index?: true
    rawJson?: true
    rowHash?: true
    _all?: true
  }

  export type StagingRowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StagingRow to aggregate.
     */
    where?: StagingRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StagingRows to fetch.
     */
    orderBy?: StagingRowOrderByWithRelationInput | StagingRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StagingRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StagingRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StagingRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StagingRows
    **/
    _count?: true | StagingRowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StagingRowAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StagingRowSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StagingRowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StagingRowMaxAggregateInputType
  }

  export type GetStagingRowAggregateType<T extends StagingRowAggregateArgs> = {
        [P in keyof T & keyof AggregateStagingRow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStagingRow[P]>
      : GetScalarType<T[P], AggregateStagingRow[P]>
  }




  export type StagingRowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagingRowWhereInput
    orderBy?: StagingRowOrderByWithAggregationInput | StagingRowOrderByWithAggregationInput[]
    by: StagingRowScalarFieldEnum[] | StagingRowScalarFieldEnum
    having?: StagingRowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StagingRowCountAggregateInputType | true
    _avg?: StagingRowAvgAggregateInputType
    _sum?: StagingRowSumAggregateInputType
    _min?: StagingRowMinAggregateInputType
    _max?: StagingRowMaxAggregateInputType
  }

  export type StagingRowGroupByOutputType = {
    id: number
    fileId: number
    index: number
    rawJson: string
    rowHash: string
    _count: StagingRowCountAggregateOutputType | null
    _avg: StagingRowAvgAggregateOutputType | null
    _sum: StagingRowSumAggregateOutputType | null
    _min: StagingRowMinAggregateOutputType | null
    _max: StagingRowMaxAggregateOutputType | null
  }

  type GetStagingRowGroupByPayload<T extends StagingRowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StagingRowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StagingRowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StagingRowGroupByOutputType[P]>
            : GetScalarType<T[P], StagingRowGroupByOutputType[P]>
        }
      >
    >


  export type StagingRowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileId?: boolean
    index?: boolean
    rawJson?: boolean
    rowHash?: boolean
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stagingRow"]>

  export type StagingRowSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileId?: boolean
    index?: boolean
    rawJson?: boolean
    rowHash?: boolean
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stagingRow"]>

  export type StagingRowSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileId?: boolean
    index?: boolean
    rawJson?: boolean
    rowHash?: boolean
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stagingRow"]>

  export type StagingRowSelectScalar = {
    id?: boolean
    fileId?: boolean
    index?: boolean
    rawJson?: boolean
    rowHash?: boolean
  }

  export type StagingRowOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "fileId" | "index" | "rawJson" | "rowHash", ExtArgs["result"]["stagingRow"]>
  export type StagingRowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }
  export type StagingRowIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }
  export type StagingRowIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }

  export type $StagingRowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StagingRow"
    objects: {
      file: Prisma.$StagingFilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      fileId: number
      index: number
      rawJson: string
      rowHash: string
    }, ExtArgs["result"]["stagingRow"]>
    composites: {}
  }

  type StagingRowGetPayload<S extends boolean | null | undefined | StagingRowDefaultArgs> = $Result.GetResult<Prisma.$StagingRowPayload, S>

  type StagingRowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StagingRowFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StagingRowCountAggregateInputType | true
    }

  export interface StagingRowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StagingRow'], meta: { name: 'StagingRow' } }
    /**
     * Find zero or one StagingRow that matches the filter.
     * @param {StagingRowFindUniqueArgs} args - Arguments to find a StagingRow
     * @example
     * // Get one StagingRow
     * const stagingRow = await prisma.stagingRow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StagingRowFindUniqueArgs>(args: SelectSubset<T, StagingRowFindUniqueArgs<ExtArgs>>): Prisma__StagingRowClient<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StagingRow that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StagingRowFindUniqueOrThrowArgs} args - Arguments to find a StagingRow
     * @example
     * // Get one StagingRow
     * const stagingRow = await prisma.stagingRow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StagingRowFindUniqueOrThrowArgs>(args: SelectSubset<T, StagingRowFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StagingRowClient<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StagingRow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingRowFindFirstArgs} args - Arguments to find a StagingRow
     * @example
     * // Get one StagingRow
     * const stagingRow = await prisma.stagingRow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StagingRowFindFirstArgs>(args?: SelectSubset<T, StagingRowFindFirstArgs<ExtArgs>>): Prisma__StagingRowClient<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StagingRow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingRowFindFirstOrThrowArgs} args - Arguments to find a StagingRow
     * @example
     * // Get one StagingRow
     * const stagingRow = await prisma.stagingRow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StagingRowFindFirstOrThrowArgs>(args?: SelectSubset<T, StagingRowFindFirstOrThrowArgs<ExtArgs>>): Prisma__StagingRowClient<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StagingRows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingRowFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StagingRows
     * const stagingRows = await prisma.stagingRow.findMany()
     * 
     * // Get first 10 StagingRows
     * const stagingRows = await prisma.stagingRow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stagingRowWithIdOnly = await prisma.stagingRow.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StagingRowFindManyArgs>(args?: SelectSubset<T, StagingRowFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StagingRow.
     * @param {StagingRowCreateArgs} args - Arguments to create a StagingRow.
     * @example
     * // Create one StagingRow
     * const StagingRow = await prisma.stagingRow.create({
     *   data: {
     *     // ... data to create a StagingRow
     *   }
     * })
     * 
     */
    create<T extends StagingRowCreateArgs>(args: SelectSubset<T, StagingRowCreateArgs<ExtArgs>>): Prisma__StagingRowClient<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StagingRows.
     * @param {StagingRowCreateManyArgs} args - Arguments to create many StagingRows.
     * @example
     * // Create many StagingRows
     * const stagingRow = await prisma.stagingRow.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StagingRowCreateManyArgs>(args?: SelectSubset<T, StagingRowCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StagingRows and returns the data saved in the database.
     * @param {StagingRowCreateManyAndReturnArgs} args - Arguments to create many StagingRows.
     * @example
     * // Create many StagingRows
     * const stagingRow = await prisma.stagingRow.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StagingRows and only return the `id`
     * const stagingRowWithIdOnly = await prisma.stagingRow.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StagingRowCreateManyAndReturnArgs>(args?: SelectSubset<T, StagingRowCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StagingRow.
     * @param {StagingRowDeleteArgs} args - Arguments to delete one StagingRow.
     * @example
     * // Delete one StagingRow
     * const StagingRow = await prisma.stagingRow.delete({
     *   where: {
     *     // ... filter to delete one StagingRow
     *   }
     * })
     * 
     */
    delete<T extends StagingRowDeleteArgs>(args: SelectSubset<T, StagingRowDeleteArgs<ExtArgs>>): Prisma__StagingRowClient<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StagingRow.
     * @param {StagingRowUpdateArgs} args - Arguments to update one StagingRow.
     * @example
     * // Update one StagingRow
     * const stagingRow = await prisma.stagingRow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StagingRowUpdateArgs>(args: SelectSubset<T, StagingRowUpdateArgs<ExtArgs>>): Prisma__StagingRowClient<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StagingRows.
     * @param {StagingRowDeleteManyArgs} args - Arguments to filter StagingRows to delete.
     * @example
     * // Delete a few StagingRows
     * const { count } = await prisma.stagingRow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StagingRowDeleteManyArgs>(args?: SelectSubset<T, StagingRowDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StagingRows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingRowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StagingRows
     * const stagingRow = await prisma.stagingRow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StagingRowUpdateManyArgs>(args: SelectSubset<T, StagingRowUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StagingRows and returns the data updated in the database.
     * @param {StagingRowUpdateManyAndReturnArgs} args - Arguments to update many StagingRows.
     * @example
     * // Update many StagingRows
     * const stagingRow = await prisma.stagingRow.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StagingRows and only return the `id`
     * const stagingRowWithIdOnly = await prisma.stagingRow.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StagingRowUpdateManyAndReturnArgs>(args: SelectSubset<T, StagingRowUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StagingRow.
     * @param {StagingRowUpsertArgs} args - Arguments to update or create a StagingRow.
     * @example
     * // Update or create a StagingRow
     * const stagingRow = await prisma.stagingRow.upsert({
     *   create: {
     *     // ... data to create a StagingRow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StagingRow we want to update
     *   }
     * })
     */
    upsert<T extends StagingRowUpsertArgs>(args: SelectSubset<T, StagingRowUpsertArgs<ExtArgs>>): Prisma__StagingRowClient<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StagingRows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingRowCountArgs} args - Arguments to filter StagingRows to count.
     * @example
     * // Count the number of StagingRows
     * const count = await prisma.stagingRow.count({
     *   where: {
     *     // ... the filter for the StagingRows we want to count
     *   }
     * })
    **/
    count<T extends StagingRowCountArgs>(
      args?: Subset<T, StagingRowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StagingRowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StagingRow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingRowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StagingRowAggregateArgs>(args: Subset<T, StagingRowAggregateArgs>): Prisma.PrismaPromise<GetStagingRowAggregateType<T>>

    /**
     * Group by StagingRow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingRowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StagingRowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StagingRowGroupByArgs['orderBy'] }
        : { orderBy?: StagingRowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StagingRowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStagingRowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StagingRow model
   */
  readonly fields: StagingRowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StagingRow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StagingRowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    file<T extends StagingFileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagingFileDefaultArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StagingRow model
   */
  interface StagingRowFieldRefs {
    readonly id: FieldRef<"StagingRow", 'Int'>
    readonly fileId: FieldRef<"StagingRow", 'Int'>
    readonly index: FieldRef<"StagingRow", 'Int'>
    readonly rawJson: FieldRef<"StagingRow", 'String'>
    readonly rowHash: FieldRef<"StagingRow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StagingRow findUnique
   */
  export type StagingRowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * Filter, which StagingRow to fetch.
     */
    where: StagingRowWhereUniqueInput
  }

  /**
   * StagingRow findUniqueOrThrow
   */
  export type StagingRowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * Filter, which StagingRow to fetch.
     */
    where: StagingRowWhereUniqueInput
  }

  /**
   * StagingRow findFirst
   */
  export type StagingRowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * Filter, which StagingRow to fetch.
     */
    where?: StagingRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StagingRows to fetch.
     */
    orderBy?: StagingRowOrderByWithRelationInput | StagingRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StagingRows.
     */
    cursor?: StagingRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StagingRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StagingRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StagingRows.
     */
    distinct?: StagingRowScalarFieldEnum | StagingRowScalarFieldEnum[]
  }

  /**
   * StagingRow findFirstOrThrow
   */
  export type StagingRowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * Filter, which StagingRow to fetch.
     */
    where?: StagingRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StagingRows to fetch.
     */
    orderBy?: StagingRowOrderByWithRelationInput | StagingRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StagingRows.
     */
    cursor?: StagingRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StagingRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StagingRows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StagingRows.
     */
    distinct?: StagingRowScalarFieldEnum | StagingRowScalarFieldEnum[]
  }

  /**
   * StagingRow findMany
   */
  export type StagingRowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * Filter, which StagingRows to fetch.
     */
    where?: StagingRowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StagingRows to fetch.
     */
    orderBy?: StagingRowOrderByWithRelationInput | StagingRowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StagingRows.
     */
    cursor?: StagingRowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StagingRows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StagingRows.
     */
    skip?: number
    distinct?: StagingRowScalarFieldEnum | StagingRowScalarFieldEnum[]
  }

  /**
   * StagingRow create
   */
  export type StagingRowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * The data needed to create a StagingRow.
     */
    data: XOR<StagingRowCreateInput, StagingRowUncheckedCreateInput>
  }

  /**
   * StagingRow createMany
   */
  export type StagingRowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StagingRows.
     */
    data: StagingRowCreateManyInput | StagingRowCreateManyInput[]
  }

  /**
   * StagingRow createManyAndReturn
   */
  export type StagingRowCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * The data used to create many StagingRows.
     */
    data: StagingRowCreateManyInput | StagingRowCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * StagingRow update
   */
  export type StagingRowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * The data needed to update a StagingRow.
     */
    data: XOR<StagingRowUpdateInput, StagingRowUncheckedUpdateInput>
    /**
     * Choose, which StagingRow to update.
     */
    where: StagingRowWhereUniqueInput
  }

  /**
   * StagingRow updateMany
   */
  export type StagingRowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StagingRows.
     */
    data: XOR<StagingRowUpdateManyMutationInput, StagingRowUncheckedUpdateManyInput>
    /**
     * Filter which StagingRows to update
     */
    where?: StagingRowWhereInput
    /**
     * Limit how many StagingRows to update.
     */
    limit?: number
  }

  /**
   * StagingRow updateManyAndReturn
   */
  export type StagingRowUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * The data used to update StagingRows.
     */
    data: XOR<StagingRowUpdateManyMutationInput, StagingRowUncheckedUpdateManyInput>
    /**
     * Filter which StagingRows to update
     */
    where?: StagingRowWhereInput
    /**
     * Limit how many StagingRows to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * StagingRow upsert
   */
  export type StagingRowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * The filter to search for the StagingRow to update in case it exists.
     */
    where: StagingRowWhereUniqueInput
    /**
     * In case the StagingRow found by the `where` argument doesn't exist, create a new StagingRow with this data.
     */
    create: XOR<StagingRowCreateInput, StagingRowUncheckedCreateInput>
    /**
     * In case the StagingRow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StagingRowUpdateInput, StagingRowUncheckedUpdateInput>
  }

  /**
   * StagingRow delete
   */
  export type StagingRowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    /**
     * Filter which StagingRow to delete.
     */
    where: StagingRowWhereUniqueInput
  }

  /**
   * StagingRow deleteMany
   */
  export type StagingRowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StagingRows to delete
     */
    where?: StagingRowWhereInput
    /**
     * Limit how many StagingRows to delete.
     */
    limit?: number
  }

  /**
   * StagingRow without action
   */
  export type StagingRowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
  }


  /**
   * Model Customer
   */

  export type AggregateCustomer = {
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  export type CustomerAvgAggregateOutputType = {
    id: number | null
  }

  export type CustomerSumAggregateOutputType = {
    id: number | null
  }

  export type CustomerMinAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    phone: string | null
    address: string | null
    accountType: string | null
    tag1: string | null
    tag2: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerMaxAggregateOutputType = {
    id: number | null
    code: string | null
    name: string | null
    phone: string | null
    address: string | null
    accountType: string | null
    tag1: string | null
    tag2: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type CustomerCountAggregateOutputType = {
    id: number
    code: number
    name: number
    phone: number
    address: number
    accountType: number
    tag1: number
    tag2: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type CustomerAvgAggregateInputType = {
    id?: true
  }

  export type CustomerSumAggregateInputType = {
    id?: true
  }

  export type CustomerMinAggregateInputType = {
    id?: true
    code?: true
    name?: true
    phone?: true
    address?: true
    accountType?: true
    tag1?: true
    tag2?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerMaxAggregateInputType = {
    id?: true
    code?: true
    name?: true
    phone?: true
    address?: true
    accountType?: true
    tag1?: true
    tag2?: true
    createdAt?: true
    updatedAt?: true
  }

  export type CustomerCountAggregateInputType = {
    id?: true
    code?: true
    name?: true
    phone?: true
    address?: true
    accountType?: true
    tag1?: true
    tag2?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type CustomerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customer to aggregate.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Customers
    **/
    _count?: true | CustomerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerMaxAggregateInputType
  }

  export type GetCustomerAggregateType<T extends CustomerAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomer[P]>
      : GetScalarType<T[P], AggregateCustomer[P]>
  }




  export type CustomerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerWhereInput
    orderBy?: CustomerOrderByWithAggregationInput | CustomerOrderByWithAggregationInput[]
    by: CustomerScalarFieldEnum[] | CustomerScalarFieldEnum
    having?: CustomerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerCountAggregateInputType | true
    _avg?: CustomerAvgAggregateInputType
    _sum?: CustomerSumAggregateInputType
    _min?: CustomerMinAggregateInputType
    _max?: CustomerMaxAggregateInputType
  }

  export type CustomerGroupByOutputType = {
    id: number
    code: string
    name: string
    phone: string | null
    address: string | null
    accountType: string | null
    tag1: string | null
    tag2: string | null
    createdAt: Date
    updatedAt: Date
    _count: CustomerCountAggregateOutputType | null
    _avg: CustomerAvgAggregateOutputType | null
    _sum: CustomerSumAggregateOutputType | null
    _min: CustomerMinAggregateOutputType | null
    _max: CustomerMaxAggregateOutputType | null
  }

  type GetCustomerGroupByPayload<T extends CustomerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerGroupByOutputType[P]>
        }
      >
    >


  export type CustomerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    phone?: boolean
    address?: boolean
    accountType?: boolean
    tag1?: boolean
    tag2?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    transactions?: boolean | Customer$transactionsArgs<ExtArgs>
    balances?: boolean | Customer$balancesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    phone?: boolean
    address?: boolean
    accountType?: boolean
    tag1?: boolean
    tag2?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    code?: boolean
    name?: boolean
    phone?: boolean
    address?: boolean
    accountType?: boolean
    tag1?: boolean
    tag2?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["customer"]>

  export type CustomerSelectScalar = {
    id?: boolean
    code?: boolean
    name?: boolean
    phone?: boolean
    address?: boolean
    accountType?: boolean
    tag1?: boolean
    tag2?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type CustomerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "code" | "name" | "phone" | "address" | "accountType" | "tag1" | "tag2" | "createdAt" | "updatedAt", ExtArgs["result"]["customer"]>
  export type CustomerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transactions?: boolean | Customer$transactionsArgs<ExtArgs>
    balances?: boolean | Customer$balancesArgs<ExtArgs>
    _count?: boolean | CustomerCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CustomerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CustomerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CustomerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Customer"
    objects: {
      transactions: Prisma.$TransactionPayload<ExtArgs>[]
      balances: Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      code: string
      name: string
      phone: string | null
      address: string | null
      accountType: string | null
      tag1: string | null
      tag2: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["customer"]>
    composites: {}
  }

  type CustomerGetPayload<S extends boolean | null | undefined | CustomerDefaultArgs> = $Result.GetResult<Prisma.$CustomerPayload, S>

  type CustomerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerCountAggregateInputType | true
    }

  export interface CustomerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Customer'], meta: { name: 'Customer' } }
    /**
     * Find zero or one Customer that matches the filter.
     * @param {CustomerFindUniqueArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerFindUniqueArgs>(args: SelectSubset<T, CustomerFindUniqueArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Customer that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerFindUniqueOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerFindFirstArgs>(args?: SelectSubset<T, CustomerFindFirstArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Customer that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindFirstOrThrowArgs} args - Arguments to find a Customer
     * @example
     * // Get one Customer
     * const customer = await prisma.customer.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Customers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Customers
     * const customers = await prisma.customer.findMany()
     * 
     * // Get first 10 Customers
     * const customers = await prisma.customer.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerWithIdOnly = await prisma.customer.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerFindManyArgs>(args?: SelectSubset<T, CustomerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Customer.
     * @param {CustomerCreateArgs} args - Arguments to create a Customer.
     * @example
     * // Create one Customer
     * const Customer = await prisma.customer.create({
     *   data: {
     *     // ... data to create a Customer
     *   }
     * })
     * 
     */
    create<T extends CustomerCreateArgs>(args: SelectSubset<T, CustomerCreateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Customers.
     * @param {CustomerCreateManyArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerCreateManyArgs>(args?: SelectSubset<T, CustomerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Customers and returns the data saved in the database.
     * @param {CustomerCreateManyAndReturnArgs} args - Arguments to create many Customers.
     * @example
     * // Create many Customers
     * const customer = await prisma.customer.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Customer.
     * @param {CustomerDeleteArgs} args - Arguments to delete one Customer.
     * @example
     * // Delete one Customer
     * const Customer = await prisma.customer.delete({
     *   where: {
     *     // ... filter to delete one Customer
     *   }
     * })
     * 
     */
    delete<T extends CustomerDeleteArgs>(args: SelectSubset<T, CustomerDeleteArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Customer.
     * @param {CustomerUpdateArgs} args - Arguments to update one Customer.
     * @example
     * // Update one Customer
     * const customer = await prisma.customer.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerUpdateArgs>(args: SelectSubset<T, CustomerUpdateArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Customers.
     * @param {CustomerDeleteManyArgs} args - Arguments to filter Customers to delete.
     * @example
     * // Delete a few Customers
     * const { count } = await prisma.customer.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerDeleteManyArgs>(args?: SelectSubset<T, CustomerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerUpdateManyArgs>(args: SelectSubset<T, CustomerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Customers and returns the data updated in the database.
     * @param {CustomerUpdateManyAndReturnArgs} args - Arguments to update many Customers.
     * @example
     * // Update many Customers
     * const customer = await prisma.customer.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Customers and only return the `id`
     * const customerWithIdOnly = await prisma.customer.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Customer.
     * @param {CustomerUpsertArgs} args - Arguments to update or create a Customer.
     * @example
     * // Update or create a Customer
     * const customer = await prisma.customer.upsert({
     *   create: {
     *     // ... data to create a Customer
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Customer we want to update
     *   }
     * })
     */
    upsert<T extends CustomerUpsertArgs>(args: SelectSubset<T, CustomerUpsertArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Customers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerCountArgs} args - Arguments to filter Customers to count.
     * @example
     * // Count the number of Customers
     * const count = await prisma.customer.count({
     *   where: {
     *     // ... the filter for the Customers we want to count
     *   }
     * })
    **/
    count<T extends CustomerCountArgs>(
      args?: Subset<T, CustomerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerAggregateArgs>(args: Subset<T, CustomerAggregateArgs>): Prisma.PrismaPromise<GetCustomerAggregateType<T>>

    /**
     * Group by Customer.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerGroupByArgs['orderBy'] }
        : { orderBy?: CustomerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Customer model
   */
  readonly fields: CustomerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Customer.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transactions<T extends Customer$transactionsArgs<ExtArgs> = {}>(args?: Subset<T, Customer$transactionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    balances<T extends Customer$balancesArgs<ExtArgs> = {}>(args?: Subset<T, Customer$balancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Customer model
   */
  interface CustomerFieldRefs {
    readonly id: FieldRef<"Customer", 'Int'>
    readonly code: FieldRef<"Customer", 'String'>
    readonly name: FieldRef<"Customer", 'String'>
    readonly phone: FieldRef<"Customer", 'String'>
    readonly address: FieldRef<"Customer", 'String'>
    readonly accountType: FieldRef<"Customer", 'String'>
    readonly tag1: FieldRef<"Customer", 'String'>
    readonly tag2: FieldRef<"Customer", 'String'>
    readonly createdAt: FieldRef<"Customer", 'DateTime'>
    readonly updatedAt: FieldRef<"Customer", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Customer findUnique
   */
  export type CustomerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findUniqueOrThrow
   */
  export type CustomerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer findFirst
   */
  export type CustomerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findFirstOrThrow
   */
  export type CustomerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customer to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Customers.
     */
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer findMany
   */
  export type CustomerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter, which Customers to fetch.
     */
    where?: CustomerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Customers to fetch.
     */
    orderBy?: CustomerOrderByWithRelationInput | CustomerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Customers.
     */
    cursor?: CustomerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Customers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Customers.
     */
    skip?: number
    distinct?: CustomerScalarFieldEnum | CustomerScalarFieldEnum[]
  }

  /**
   * Customer create
   */
  export type CustomerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to create a Customer.
     */
    data: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
  }

  /**
   * Customer createMany
   */
  export type CustomerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer createManyAndReturn
   */
  export type CustomerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to create many Customers.
     */
    data: CustomerCreateManyInput | CustomerCreateManyInput[]
  }

  /**
   * Customer update
   */
  export type CustomerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The data needed to update a Customer.
     */
    data: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
    /**
     * Choose, which Customer to update.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer updateMany
   */
  export type CustomerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer updateManyAndReturn
   */
  export type CustomerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * The data used to update Customers.
     */
    data: XOR<CustomerUpdateManyMutationInput, CustomerUncheckedUpdateManyInput>
    /**
     * Filter which Customers to update
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to update.
     */
    limit?: number
  }

  /**
   * Customer upsert
   */
  export type CustomerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * The filter to search for the Customer to update in case it exists.
     */
    where: CustomerWhereUniqueInput
    /**
     * In case the Customer found by the `where` argument doesn't exist, create a new Customer with this data.
     */
    create: XOR<CustomerCreateInput, CustomerUncheckedCreateInput>
    /**
     * In case the Customer was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerUpdateInput, CustomerUncheckedUpdateInput>
  }

  /**
   * Customer delete
   */
  export type CustomerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
    /**
     * Filter which Customer to delete.
     */
    where: CustomerWhereUniqueInput
  }

  /**
   * Customer deleteMany
   */
  export type CustomerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Customers to delete
     */
    where?: CustomerWhereInput
    /**
     * Limit how many Customers to delete.
     */
    limit?: number
  }

  /**
   * Customer.transactions
   */
  export type Customer$transactionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    cursor?: TransactionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Customer.balances
   */
  export type Customer$balancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    where?: CustomerBalanceSnapshotWhereInput
    orderBy?: CustomerBalanceSnapshotOrderByWithRelationInput | CustomerBalanceSnapshotOrderByWithRelationInput[]
    cursor?: CustomerBalanceSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerBalanceSnapshotScalarFieldEnum | CustomerBalanceSnapshotScalarFieldEnum[]
  }

  /**
   * Customer without action
   */
  export type CustomerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Customer
     */
    select?: CustomerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Customer
     */
    omit?: CustomerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerInclude<ExtArgs> | null
  }


  /**
   * Model Transaction
   */

  export type AggregateTransaction = {
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  export type TransactionAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
    amountBaseCents: number | null
    discountCents: number | null
    amountNetCents: number | null
    vatCents: number | null
    debitCents: number | null
    creditCents: number | null
    lastFileId: number | null
  }

  export type TransactionSumAggregateOutputType = {
    id: number | null
    customerId: number | null
    amountBaseCents: number | null
    discountCents: number | null
    amountNetCents: number | null
    vatCents: number | null
    debitCents: number | null
    creditCents: number | null
    lastFileId: number | null
  }

  export type TransactionMinAggregateOutputType = {
    id: number | null
    customerId: number | null
    docType: string | null
    txnDate: Date | null
    voucherNo: string | null
    description: string | null
    dueDate: Date | null
    amountBaseCents: number | null
    discountCents: number | null
    amountNetCents: number | null
    vatCents: number | null
    debitCents: number | null
    creditCents: number | null
    currency: string | null
    naturalKey: string | null
    rowHash: string | null
    lastFileId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionMaxAggregateOutputType = {
    id: number | null
    customerId: number | null
    docType: string | null
    txnDate: Date | null
    voucherNo: string | null
    description: string | null
    dueDate: Date | null
    amountBaseCents: number | null
    discountCents: number | null
    amountNetCents: number | null
    vatCents: number | null
    debitCents: number | null
    creditCents: number | null
    currency: string | null
    naturalKey: string | null
    rowHash: string | null
    lastFileId: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type TransactionCountAggregateOutputType = {
    id: number
    customerId: number
    docType: number
    txnDate: number
    voucherNo: number
    description: number
    dueDate: number
    amountBaseCents: number
    discountCents: number
    amountNetCents: number
    vatCents: number
    debitCents: number
    creditCents: number
    currency: number
    naturalKey: number
    rowHash: number
    lastFileId: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type TransactionAvgAggregateInputType = {
    id?: true
    customerId?: true
    amountBaseCents?: true
    discountCents?: true
    amountNetCents?: true
    vatCents?: true
    debitCents?: true
    creditCents?: true
    lastFileId?: true
  }

  export type TransactionSumAggregateInputType = {
    id?: true
    customerId?: true
    amountBaseCents?: true
    discountCents?: true
    amountNetCents?: true
    vatCents?: true
    debitCents?: true
    creditCents?: true
    lastFileId?: true
  }

  export type TransactionMinAggregateInputType = {
    id?: true
    customerId?: true
    docType?: true
    txnDate?: true
    voucherNo?: true
    description?: true
    dueDate?: true
    amountBaseCents?: true
    discountCents?: true
    amountNetCents?: true
    vatCents?: true
    debitCents?: true
    creditCents?: true
    currency?: true
    naturalKey?: true
    rowHash?: true
    lastFileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionMaxAggregateInputType = {
    id?: true
    customerId?: true
    docType?: true
    txnDate?: true
    voucherNo?: true
    description?: true
    dueDate?: true
    amountBaseCents?: true
    discountCents?: true
    amountNetCents?: true
    vatCents?: true
    debitCents?: true
    creditCents?: true
    currency?: true
    naturalKey?: true
    rowHash?: true
    lastFileId?: true
    createdAt?: true
    updatedAt?: true
  }

  export type TransactionCountAggregateInputType = {
    id?: true
    customerId?: true
    docType?: true
    txnDate?: true
    voucherNo?: true
    description?: true
    dueDate?: true
    amountBaseCents?: true
    discountCents?: true
    amountNetCents?: true
    vatCents?: true
    debitCents?: true
    creditCents?: true
    currency?: true
    naturalKey?: true
    rowHash?: true
    lastFileId?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type TransactionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transaction to aggregate.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Transactions
    **/
    _count?: true | TransactionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionMaxAggregateInputType
  }

  export type GetTransactionAggregateType<T extends TransactionAggregateArgs> = {
        [P in keyof T & keyof AggregateTransaction]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransaction[P]>
      : GetScalarType<T[P], AggregateTransaction[P]>
  }




  export type TransactionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionWhereInput
    orderBy?: TransactionOrderByWithAggregationInput | TransactionOrderByWithAggregationInput[]
    by: TransactionScalarFieldEnum[] | TransactionScalarFieldEnum
    having?: TransactionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionCountAggregateInputType | true
    _avg?: TransactionAvgAggregateInputType
    _sum?: TransactionSumAggregateInputType
    _min?: TransactionMinAggregateInputType
    _max?: TransactionMaxAggregateInputType
  }

  export type TransactionGroupByOutputType = {
    id: number
    customerId: number
    docType: string | null
    txnDate: Date
    voucherNo: string | null
    description: string | null
    dueDate: Date | null
    amountBaseCents: number | null
    discountCents: number | null
    amountNetCents: number | null
    vatCents: number | null
    debitCents: number
    creditCents: number
    currency: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt: Date
    updatedAt: Date
    _count: TransactionCountAggregateOutputType | null
    _avg: TransactionAvgAggregateOutputType | null
    _sum: TransactionSumAggregateOutputType | null
    _min: TransactionMinAggregateOutputType | null
    _max: TransactionMaxAggregateOutputType | null
  }

  type GetTransactionGroupByPayload<T extends TransactionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    docType?: boolean
    txnDate?: boolean
    voucherNo?: boolean
    description?: boolean
    dueDate?: boolean
    amountBaseCents?: boolean
    discountCents?: boolean
    amountNetCents?: boolean
    vatCents?: boolean
    debitCents?: boolean
    creditCents?: boolean
    currency?: boolean
    naturalKey?: boolean
    rowHash?: boolean
    lastFileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    sources?: boolean | Transaction$sourcesArgs<ExtArgs>
    auditsFrom?: boolean | Transaction$auditsFromArgs<ExtArgs>
    auditsTo?: boolean | Transaction$auditsToArgs<ExtArgs>
    _count?: boolean | TransactionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    docType?: boolean
    txnDate?: boolean
    voucherNo?: boolean
    description?: boolean
    dueDate?: boolean
    amountBaseCents?: boolean
    discountCents?: boolean
    amountNetCents?: boolean
    vatCents?: boolean
    debitCents?: boolean
    creditCents?: boolean
    currency?: boolean
    naturalKey?: boolean
    rowHash?: boolean
    lastFileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    docType?: boolean
    txnDate?: boolean
    voucherNo?: boolean
    description?: boolean
    dueDate?: boolean
    amountBaseCents?: boolean
    discountCents?: boolean
    amountNetCents?: boolean
    vatCents?: boolean
    debitCents?: boolean
    creditCents?: boolean
    currency?: boolean
    naturalKey?: boolean
    rowHash?: boolean
    lastFileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transaction"]>

  export type TransactionSelectScalar = {
    id?: boolean
    customerId?: boolean
    docType?: boolean
    txnDate?: boolean
    voucherNo?: boolean
    description?: boolean
    dueDate?: boolean
    amountBaseCents?: boolean
    discountCents?: boolean
    amountNetCents?: boolean
    vatCents?: boolean
    debitCents?: boolean
    creditCents?: boolean
    currency?: boolean
    naturalKey?: boolean
    rowHash?: boolean
    lastFileId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type TransactionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "docType" | "txnDate" | "voucherNo" | "description" | "dueDate" | "amountBaseCents" | "discountCents" | "amountNetCents" | "vatCents" | "debitCents" | "creditCents" | "currency" | "naturalKey" | "rowHash" | "lastFileId" | "createdAt" | "updatedAt", ExtArgs["result"]["transaction"]>
  export type TransactionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    sources?: boolean | Transaction$sourcesArgs<ExtArgs>
    auditsFrom?: boolean | Transaction$auditsFromArgs<ExtArgs>
    auditsTo?: boolean | Transaction$auditsToArgs<ExtArgs>
    _count?: boolean | TransactionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }
  export type TransactionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
  }

  export type $TransactionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Transaction"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      sources: Prisma.$TransactionSourcePayload<ExtArgs>[]
      auditsFrom: Prisma.$TransactionAuditPayload<ExtArgs>[]
      auditsTo: Prisma.$TransactionAuditPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerId: number
      docType: string | null
      txnDate: Date
      voucherNo: string | null
      description: string | null
      dueDate: Date | null
      amountBaseCents: number | null
      discountCents: number | null
      amountNetCents: number | null
      vatCents: number | null
      debitCents: number
      creditCents: number
      currency: string
      naturalKey: string
      rowHash: string
      lastFileId: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["transaction"]>
    composites: {}
  }

  type TransactionGetPayload<S extends boolean | null | undefined | TransactionDefaultArgs> = $Result.GetResult<Prisma.$TransactionPayload, S>

  type TransactionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionCountAggregateInputType | true
    }

  export interface TransactionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Transaction'], meta: { name: 'Transaction' } }
    /**
     * Find zero or one Transaction that matches the filter.
     * @param {TransactionFindUniqueArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionFindUniqueArgs>(args: SelectSubset<T, TransactionFindUniqueArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Transaction that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionFindUniqueOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionFindFirstArgs>(args?: SelectSubset<T, TransactionFindFirstArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Transaction that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindFirstOrThrowArgs} args - Arguments to find a Transaction
     * @example
     * // Get one Transaction
     * const transaction = await prisma.transaction.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Transactions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Transactions
     * const transactions = await prisma.transaction.findMany()
     * 
     * // Get first 10 Transactions
     * const transactions = await prisma.transaction.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionWithIdOnly = await prisma.transaction.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionFindManyArgs>(args?: SelectSubset<T, TransactionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Transaction.
     * @param {TransactionCreateArgs} args - Arguments to create a Transaction.
     * @example
     * // Create one Transaction
     * const Transaction = await prisma.transaction.create({
     *   data: {
     *     // ... data to create a Transaction
     *   }
     * })
     * 
     */
    create<T extends TransactionCreateArgs>(args: SelectSubset<T, TransactionCreateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Transactions.
     * @param {TransactionCreateManyArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionCreateManyArgs>(args?: SelectSubset<T, TransactionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Transactions and returns the data saved in the database.
     * @param {TransactionCreateManyAndReturnArgs} args - Arguments to create many Transactions.
     * @example
     * // Create many Transactions
     * const transaction = await prisma.transaction.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Transaction.
     * @param {TransactionDeleteArgs} args - Arguments to delete one Transaction.
     * @example
     * // Delete one Transaction
     * const Transaction = await prisma.transaction.delete({
     *   where: {
     *     // ... filter to delete one Transaction
     *   }
     * })
     * 
     */
    delete<T extends TransactionDeleteArgs>(args: SelectSubset<T, TransactionDeleteArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Transaction.
     * @param {TransactionUpdateArgs} args - Arguments to update one Transaction.
     * @example
     * // Update one Transaction
     * const transaction = await prisma.transaction.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionUpdateArgs>(args: SelectSubset<T, TransactionUpdateArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Transactions.
     * @param {TransactionDeleteManyArgs} args - Arguments to filter Transactions to delete.
     * @example
     * // Delete a few Transactions
     * const { count } = await prisma.transaction.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionDeleteManyArgs>(args?: SelectSubset<T, TransactionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionUpdateManyArgs>(args: SelectSubset<T, TransactionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Transactions and returns the data updated in the database.
     * @param {TransactionUpdateManyAndReturnArgs} args - Arguments to update many Transactions.
     * @example
     * // Update many Transactions
     * const transaction = await prisma.transaction.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Transactions and only return the `id`
     * const transactionWithIdOnly = await prisma.transaction.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Transaction.
     * @param {TransactionUpsertArgs} args - Arguments to update or create a Transaction.
     * @example
     * // Update or create a Transaction
     * const transaction = await prisma.transaction.upsert({
     *   create: {
     *     // ... data to create a Transaction
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Transaction we want to update
     *   }
     * })
     */
    upsert<T extends TransactionUpsertArgs>(args: SelectSubset<T, TransactionUpsertArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Transactions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionCountArgs} args - Arguments to filter Transactions to count.
     * @example
     * // Count the number of Transactions
     * const count = await prisma.transaction.count({
     *   where: {
     *     // ... the filter for the Transactions we want to count
     *   }
     * })
    **/
    count<T extends TransactionCountArgs>(
      args?: Subset<T, TransactionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAggregateArgs>(args: Subset<T, TransactionAggregateArgs>): Prisma.PrismaPromise<GetTransactionAggregateType<T>>

    /**
     * Group by Transaction.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionGroupByArgs['orderBy'] }
        : { orderBy?: TransactionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Transaction model
   */
  readonly fields: TransactionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Transaction.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    sources<T extends Transaction$sourcesArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$sourcesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditsFrom<T extends Transaction$auditsFromArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$auditsFromArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    auditsTo<T extends Transaction$auditsToArgs<ExtArgs> = {}>(args?: Subset<T, Transaction$auditsToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Transaction model
   */
  interface TransactionFieldRefs {
    readonly id: FieldRef<"Transaction", 'Int'>
    readonly customerId: FieldRef<"Transaction", 'Int'>
    readonly docType: FieldRef<"Transaction", 'String'>
    readonly txnDate: FieldRef<"Transaction", 'DateTime'>
    readonly voucherNo: FieldRef<"Transaction", 'String'>
    readonly description: FieldRef<"Transaction", 'String'>
    readonly dueDate: FieldRef<"Transaction", 'DateTime'>
    readonly amountBaseCents: FieldRef<"Transaction", 'Int'>
    readonly discountCents: FieldRef<"Transaction", 'Int'>
    readonly amountNetCents: FieldRef<"Transaction", 'Int'>
    readonly vatCents: FieldRef<"Transaction", 'Int'>
    readonly debitCents: FieldRef<"Transaction", 'Int'>
    readonly creditCents: FieldRef<"Transaction", 'Int'>
    readonly currency: FieldRef<"Transaction", 'String'>
    readonly naturalKey: FieldRef<"Transaction", 'String'>
    readonly rowHash: FieldRef<"Transaction", 'String'>
    readonly lastFileId: FieldRef<"Transaction", 'Int'>
    readonly createdAt: FieldRef<"Transaction", 'DateTime'>
    readonly updatedAt: FieldRef<"Transaction", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Transaction findUnique
   */
  export type TransactionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findUniqueOrThrow
   */
  export type TransactionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction findFirst
   */
  export type TransactionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findFirstOrThrow
   */
  export type TransactionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transaction to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Transactions.
     */
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction findMany
   */
  export type TransactionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter, which Transactions to fetch.
     */
    where?: TransactionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Transactions to fetch.
     */
    orderBy?: TransactionOrderByWithRelationInput | TransactionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Transactions.
     */
    cursor?: TransactionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Transactions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Transactions.
     */
    skip?: number
    distinct?: TransactionScalarFieldEnum | TransactionScalarFieldEnum[]
  }

  /**
   * Transaction create
   */
  export type TransactionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to create a Transaction.
     */
    data: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
  }

  /**
   * Transaction createMany
   */
  export type TransactionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
  }

  /**
   * Transaction createManyAndReturn
   */
  export type TransactionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to create many Transactions.
     */
    data: TransactionCreateManyInput | TransactionCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction update
   */
  export type TransactionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The data needed to update a Transaction.
     */
    data: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
    /**
     * Choose, which Transaction to update.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction updateMany
   */
  export type TransactionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
  }

  /**
   * Transaction updateManyAndReturn
   */
  export type TransactionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * The data used to update Transactions.
     */
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyInput>
    /**
     * Filter which Transactions to update
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Transaction upsert
   */
  export type TransactionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * The filter to search for the Transaction to update in case it exists.
     */
    where: TransactionWhereUniqueInput
    /**
     * In case the Transaction found by the `where` argument doesn't exist, create a new Transaction with this data.
     */
    create: XOR<TransactionCreateInput, TransactionUncheckedCreateInput>
    /**
     * In case the Transaction was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionUpdateInput, TransactionUncheckedUpdateInput>
  }

  /**
   * Transaction delete
   */
  export type TransactionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    /**
     * Filter which Transaction to delete.
     */
    where: TransactionWhereUniqueInput
  }

  /**
   * Transaction deleteMany
   */
  export type TransactionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Transactions to delete
     */
    where?: TransactionWhereInput
    /**
     * Limit how many Transactions to delete.
     */
    limit?: number
  }

  /**
   * Transaction.sources
   */
  export type Transaction$sourcesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    where?: TransactionSourceWhereInput
    orderBy?: TransactionSourceOrderByWithRelationInput | TransactionSourceOrderByWithRelationInput[]
    cursor?: TransactionSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionSourceScalarFieldEnum | TransactionSourceScalarFieldEnum[]
  }

  /**
   * Transaction.auditsFrom
   */
  export type Transaction$auditsFromArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    where?: TransactionAuditWhereInput
    orderBy?: TransactionAuditOrderByWithRelationInput | TransactionAuditOrderByWithRelationInput[]
    cursor?: TransactionAuditWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionAuditScalarFieldEnum | TransactionAuditScalarFieldEnum[]
  }

  /**
   * Transaction.auditsTo
   */
  export type Transaction$auditsToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    where?: TransactionAuditWhereInput
    orderBy?: TransactionAuditOrderByWithRelationInput | TransactionAuditOrderByWithRelationInput[]
    cursor?: TransactionAuditWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionAuditScalarFieldEnum | TransactionAuditScalarFieldEnum[]
  }

  /**
   * Transaction without action
   */
  export type TransactionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
  }


  /**
   * Model TransactionSource
   */

  export type AggregateTransactionSource = {
    _count: TransactionSourceCountAggregateOutputType | null
    _avg: TransactionSourceAvgAggregateOutputType | null
    _sum: TransactionSourceSumAggregateOutputType | null
    _min: TransactionSourceMinAggregateOutputType | null
    _max: TransactionSourceMaxAggregateOutputType | null
  }

  export type TransactionSourceAvgAggregateOutputType = {
    id: number | null
    transactionId: number | null
    fileId: number | null
  }

  export type TransactionSourceSumAggregateOutputType = {
    id: number | null
    transactionId: number | null
    fileId: number | null
  }

  export type TransactionSourceMinAggregateOutputType = {
    id: number | null
    transactionId: number | null
    fileId: number | null
  }

  export type TransactionSourceMaxAggregateOutputType = {
    id: number | null
    transactionId: number | null
    fileId: number | null
  }

  export type TransactionSourceCountAggregateOutputType = {
    id: number
    transactionId: number
    fileId: number
    _all: number
  }


  export type TransactionSourceAvgAggregateInputType = {
    id?: true
    transactionId?: true
    fileId?: true
  }

  export type TransactionSourceSumAggregateInputType = {
    id?: true
    transactionId?: true
    fileId?: true
  }

  export type TransactionSourceMinAggregateInputType = {
    id?: true
    transactionId?: true
    fileId?: true
  }

  export type TransactionSourceMaxAggregateInputType = {
    id?: true
    transactionId?: true
    fileId?: true
  }

  export type TransactionSourceCountAggregateInputType = {
    id?: true
    transactionId?: true
    fileId?: true
    _all?: true
  }

  export type TransactionSourceAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionSource to aggregate.
     */
    where?: TransactionSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionSources to fetch.
     */
    orderBy?: TransactionSourceOrderByWithRelationInput | TransactionSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionSources
    **/
    _count?: true | TransactionSourceCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionSourceAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionSourceSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionSourceMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionSourceMaxAggregateInputType
  }

  export type GetTransactionSourceAggregateType<T extends TransactionSourceAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionSource]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionSource[P]>
      : GetScalarType<T[P], AggregateTransactionSource[P]>
  }




  export type TransactionSourceGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionSourceWhereInput
    orderBy?: TransactionSourceOrderByWithAggregationInput | TransactionSourceOrderByWithAggregationInput[]
    by: TransactionSourceScalarFieldEnum[] | TransactionSourceScalarFieldEnum
    having?: TransactionSourceScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionSourceCountAggregateInputType | true
    _avg?: TransactionSourceAvgAggregateInputType
    _sum?: TransactionSourceSumAggregateInputType
    _min?: TransactionSourceMinAggregateInputType
    _max?: TransactionSourceMaxAggregateInputType
  }

  export type TransactionSourceGroupByOutputType = {
    id: number
    transactionId: number
    fileId: number
    _count: TransactionSourceCountAggregateOutputType | null
    _avg: TransactionSourceAvgAggregateOutputType | null
    _sum: TransactionSourceSumAggregateOutputType | null
    _min: TransactionSourceMinAggregateOutputType | null
    _max: TransactionSourceMaxAggregateOutputType | null
  }

  type GetTransactionSourceGroupByPayload<T extends TransactionSourceGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionSourceGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionSourceGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionSourceGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionSourceGroupByOutputType[P]>
        }
      >
    >


  export type TransactionSourceSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    fileId?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionSource"]>

  export type TransactionSourceSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    fileId?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionSource"]>

  export type TransactionSourceSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    transactionId?: boolean
    fileId?: boolean
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionSource"]>

  export type TransactionSourceSelectScalar = {
    id?: boolean
    transactionId?: boolean
    fileId?: boolean
  }

  export type TransactionSourceOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "transactionId" | "fileId", ExtArgs["result"]["transactionSource"]>
  export type TransactionSourceInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }
  export type TransactionSourceIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }
  export type TransactionSourceIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    transaction?: boolean | TransactionDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }

  export type $TransactionSourcePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransactionSource"
    objects: {
      transaction: Prisma.$TransactionPayload<ExtArgs>
      file: Prisma.$StagingFilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      transactionId: number
      fileId: number
    }, ExtArgs["result"]["transactionSource"]>
    composites: {}
  }

  type TransactionSourceGetPayload<S extends boolean | null | undefined | TransactionSourceDefaultArgs> = $Result.GetResult<Prisma.$TransactionSourcePayload, S>

  type TransactionSourceCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionSourceFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionSourceCountAggregateInputType | true
    }

  export interface TransactionSourceDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionSource'], meta: { name: 'TransactionSource' } }
    /**
     * Find zero or one TransactionSource that matches the filter.
     * @param {TransactionSourceFindUniqueArgs} args - Arguments to find a TransactionSource
     * @example
     * // Get one TransactionSource
     * const transactionSource = await prisma.transactionSource.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionSourceFindUniqueArgs>(args: SelectSubset<T, TransactionSourceFindUniqueArgs<ExtArgs>>): Prisma__TransactionSourceClient<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TransactionSource that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionSourceFindUniqueOrThrowArgs} args - Arguments to find a TransactionSource
     * @example
     * // Get one TransactionSource
     * const transactionSource = await prisma.transactionSource.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionSourceFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionSourceFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionSourceClient<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransactionSource that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionSourceFindFirstArgs} args - Arguments to find a TransactionSource
     * @example
     * // Get one TransactionSource
     * const transactionSource = await prisma.transactionSource.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionSourceFindFirstArgs>(args?: SelectSubset<T, TransactionSourceFindFirstArgs<ExtArgs>>): Prisma__TransactionSourceClient<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransactionSource that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionSourceFindFirstOrThrowArgs} args - Arguments to find a TransactionSource
     * @example
     * // Get one TransactionSource
     * const transactionSource = await prisma.transactionSource.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionSourceFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionSourceFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionSourceClient<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TransactionSources that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionSourceFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionSources
     * const transactionSources = await prisma.transactionSource.findMany()
     * 
     * // Get first 10 TransactionSources
     * const transactionSources = await prisma.transactionSource.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionSourceWithIdOnly = await prisma.transactionSource.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionSourceFindManyArgs>(args?: SelectSubset<T, TransactionSourceFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TransactionSource.
     * @param {TransactionSourceCreateArgs} args - Arguments to create a TransactionSource.
     * @example
     * // Create one TransactionSource
     * const TransactionSource = await prisma.transactionSource.create({
     *   data: {
     *     // ... data to create a TransactionSource
     *   }
     * })
     * 
     */
    create<T extends TransactionSourceCreateArgs>(args: SelectSubset<T, TransactionSourceCreateArgs<ExtArgs>>): Prisma__TransactionSourceClient<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TransactionSources.
     * @param {TransactionSourceCreateManyArgs} args - Arguments to create many TransactionSources.
     * @example
     * // Create many TransactionSources
     * const transactionSource = await prisma.transactionSource.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionSourceCreateManyArgs>(args?: SelectSubset<T, TransactionSourceCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TransactionSources and returns the data saved in the database.
     * @param {TransactionSourceCreateManyAndReturnArgs} args - Arguments to create many TransactionSources.
     * @example
     * // Create many TransactionSources
     * const transactionSource = await prisma.transactionSource.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TransactionSources and only return the `id`
     * const transactionSourceWithIdOnly = await prisma.transactionSource.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionSourceCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionSourceCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TransactionSource.
     * @param {TransactionSourceDeleteArgs} args - Arguments to delete one TransactionSource.
     * @example
     * // Delete one TransactionSource
     * const TransactionSource = await prisma.transactionSource.delete({
     *   where: {
     *     // ... filter to delete one TransactionSource
     *   }
     * })
     * 
     */
    delete<T extends TransactionSourceDeleteArgs>(args: SelectSubset<T, TransactionSourceDeleteArgs<ExtArgs>>): Prisma__TransactionSourceClient<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TransactionSource.
     * @param {TransactionSourceUpdateArgs} args - Arguments to update one TransactionSource.
     * @example
     * // Update one TransactionSource
     * const transactionSource = await prisma.transactionSource.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionSourceUpdateArgs>(args: SelectSubset<T, TransactionSourceUpdateArgs<ExtArgs>>): Prisma__TransactionSourceClient<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TransactionSources.
     * @param {TransactionSourceDeleteManyArgs} args - Arguments to filter TransactionSources to delete.
     * @example
     * // Delete a few TransactionSources
     * const { count } = await prisma.transactionSource.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionSourceDeleteManyArgs>(args?: SelectSubset<T, TransactionSourceDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionSourceUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionSources
     * const transactionSource = await prisma.transactionSource.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionSourceUpdateManyArgs>(args: SelectSubset<T, TransactionSourceUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionSources and returns the data updated in the database.
     * @param {TransactionSourceUpdateManyAndReturnArgs} args - Arguments to update many TransactionSources.
     * @example
     * // Update many TransactionSources
     * const transactionSource = await prisma.transactionSource.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TransactionSources and only return the `id`
     * const transactionSourceWithIdOnly = await prisma.transactionSource.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionSourceUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionSourceUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TransactionSource.
     * @param {TransactionSourceUpsertArgs} args - Arguments to update or create a TransactionSource.
     * @example
     * // Update or create a TransactionSource
     * const transactionSource = await prisma.transactionSource.upsert({
     *   create: {
     *     // ... data to create a TransactionSource
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionSource we want to update
     *   }
     * })
     */
    upsert<T extends TransactionSourceUpsertArgs>(args: SelectSubset<T, TransactionSourceUpsertArgs<ExtArgs>>): Prisma__TransactionSourceClient<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TransactionSources.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionSourceCountArgs} args - Arguments to filter TransactionSources to count.
     * @example
     * // Count the number of TransactionSources
     * const count = await prisma.transactionSource.count({
     *   where: {
     *     // ... the filter for the TransactionSources we want to count
     *   }
     * })
    **/
    count<T extends TransactionSourceCountArgs>(
      args?: Subset<T, TransactionSourceCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionSourceCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionSourceAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionSourceAggregateArgs>(args: Subset<T, TransactionSourceAggregateArgs>): Prisma.PrismaPromise<GetTransactionSourceAggregateType<T>>

    /**
     * Group by TransactionSource.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionSourceGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionSourceGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionSourceGroupByArgs['orderBy'] }
        : { orderBy?: TransactionSourceGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionSourceGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionSourceGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionSource model
   */
  readonly fields: TransactionSourceFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionSource.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionSourceClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    transaction<T extends TransactionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TransactionDefaultArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    file<T extends StagingFileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagingFileDefaultArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TransactionSource model
   */
  interface TransactionSourceFieldRefs {
    readonly id: FieldRef<"TransactionSource", 'Int'>
    readonly transactionId: FieldRef<"TransactionSource", 'Int'>
    readonly fileId: FieldRef<"TransactionSource", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * TransactionSource findUnique
   */
  export type TransactionSourceFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * Filter, which TransactionSource to fetch.
     */
    where: TransactionSourceWhereUniqueInput
  }

  /**
   * TransactionSource findUniqueOrThrow
   */
  export type TransactionSourceFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * Filter, which TransactionSource to fetch.
     */
    where: TransactionSourceWhereUniqueInput
  }

  /**
   * TransactionSource findFirst
   */
  export type TransactionSourceFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * Filter, which TransactionSource to fetch.
     */
    where?: TransactionSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionSources to fetch.
     */
    orderBy?: TransactionSourceOrderByWithRelationInput | TransactionSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionSources.
     */
    cursor?: TransactionSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionSources.
     */
    distinct?: TransactionSourceScalarFieldEnum | TransactionSourceScalarFieldEnum[]
  }

  /**
   * TransactionSource findFirstOrThrow
   */
  export type TransactionSourceFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * Filter, which TransactionSource to fetch.
     */
    where?: TransactionSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionSources to fetch.
     */
    orderBy?: TransactionSourceOrderByWithRelationInput | TransactionSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionSources.
     */
    cursor?: TransactionSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionSources.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionSources.
     */
    distinct?: TransactionSourceScalarFieldEnum | TransactionSourceScalarFieldEnum[]
  }

  /**
   * TransactionSource findMany
   */
  export type TransactionSourceFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * Filter, which TransactionSources to fetch.
     */
    where?: TransactionSourceWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionSources to fetch.
     */
    orderBy?: TransactionSourceOrderByWithRelationInput | TransactionSourceOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionSources.
     */
    cursor?: TransactionSourceWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionSources from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionSources.
     */
    skip?: number
    distinct?: TransactionSourceScalarFieldEnum | TransactionSourceScalarFieldEnum[]
  }

  /**
   * TransactionSource create
   */
  export type TransactionSourceCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * The data needed to create a TransactionSource.
     */
    data: XOR<TransactionSourceCreateInput, TransactionSourceUncheckedCreateInput>
  }

  /**
   * TransactionSource createMany
   */
  export type TransactionSourceCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionSources.
     */
    data: TransactionSourceCreateManyInput | TransactionSourceCreateManyInput[]
  }

  /**
   * TransactionSource createManyAndReturn
   */
  export type TransactionSourceCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * The data used to create many TransactionSources.
     */
    data: TransactionSourceCreateManyInput | TransactionSourceCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransactionSource update
   */
  export type TransactionSourceUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * The data needed to update a TransactionSource.
     */
    data: XOR<TransactionSourceUpdateInput, TransactionSourceUncheckedUpdateInput>
    /**
     * Choose, which TransactionSource to update.
     */
    where: TransactionSourceWhereUniqueInput
  }

  /**
   * TransactionSource updateMany
   */
  export type TransactionSourceUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionSources.
     */
    data: XOR<TransactionSourceUpdateManyMutationInput, TransactionSourceUncheckedUpdateManyInput>
    /**
     * Filter which TransactionSources to update
     */
    where?: TransactionSourceWhereInput
    /**
     * Limit how many TransactionSources to update.
     */
    limit?: number
  }

  /**
   * TransactionSource updateManyAndReturn
   */
  export type TransactionSourceUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * The data used to update TransactionSources.
     */
    data: XOR<TransactionSourceUpdateManyMutationInput, TransactionSourceUncheckedUpdateManyInput>
    /**
     * Filter which TransactionSources to update
     */
    where?: TransactionSourceWhereInput
    /**
     * Limit how many TransactionSources to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransactionSource upsert
   */
  export type TransactionSourceUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * The filter to search for the TransactionSource to update in case it exists.
     */
    where: TransactionSourceWhereUniqueInput
    /**
     * In case the TransactionSource found by the `where` argument doesn't exist, create a new TransactionSource with this data.
     */
    create: XOR<TransactionSourceCreateInput, TransactionSourceUncheckedCreateInput>
    /**
     * In case the TransactionSource was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionSourceUpdateInput, TransactionSourceUncheckedUpdateInput>
  }

  /**
   * TransactionSource delete
   */
  export type TransactionSourceDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    /**
     * Filter which TransactionSource to delete.
     */
    where: TransactionSourceWhereUniqueInput
  }

  /**
   * TransactionSource deleteMany
   */
  export type TransactionSourceDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionSources to delete
     */
    where?: TransactionSourceWhereInput
    /**
     * Limit how many TransactionSources to delete.
     */
    limit?: number
  }

  /**
   * TransactionSource without action
   */
  export type TransactionSourceDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
  }


  /**
   * Model TransactionAudit
   */

  export type AggregateTransactionAudit = {
    _count: TransactionAuditCountAggregateOutputType | null
    _avg: TransactionAuditAvgAggregateOutputType | null
    _sum: TransactionAuditSumAggregateOutputType | null
    _min: TransactionAuditMinAggregateOutputType | null
    _max: TransactionAuditMaxAggregateOutputType | null
  }

  export type TransactionAuditAvgAggregateOutputType = {
    id: number | null
    oldTxnId: number | null
    newTxnId: number | null
    fileId: number | null
  }

  export type TransactionAuditSumAggregateOutputType = {
    id: number | null
    oldTxnId: number | null
    newTxnId: number | null
    fileId: number | null
  }

  export type TransactionAuditMinAggregateOutputType = {
    id: number | null
    oldTxnId: number | null
    newTxnId: number | null
    fileId: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type TransactionAuditMaxAggregateOutputType = {
    id: number | null
    oldTxnId: number | null
    newTxnId: number | null
    fileId: number | null
    reason: string | null
    createdAt: Date | null
  }

  export type TransactionAuditCountAggregateOutputType = {
    id: number
    oldTxnId: number
    newTxnId: number
    fileId: number
    reason: number
    createdAt: number
    _all: number
  }


  export type TransactionAuditAvgAggregateInputType = {
    id?: true
    oldTxnId?: true
    newTxnId?: true
    fileId?: true
  }

  export type TransactionAuditSumAggregateInputType = {
    id?: true
    oldTxnId?: true
    newTxnId?: true
    fileId?: true
  }

  export type TransactionAuditMinAggregateInputType = {
    id?: true
    oldTxnId?: true
    newTxnId?: true
    fileId?: true
    reason?: true
    createdAt?: true
  }

  export type TransactionAuditMaxAggregateInputType = {
    id?: true
    oldTxnId?: true
    newTxnId?: true
    fileId?: true
    reason?: true
    createdAt?: true
  }

  export type TransactionAuditCountAggregateInputType = {
    id?: true
    oldTxnId?: true
    newTxnId?: true
    fileId?: true
    reason?: true
    createdAt?: true
    _all?: true
  }

  export type TransactionAuditAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionAudit to aggregate.
     */
    where?: TransactionAuditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionAudits to fetch.
     */
    orderBy?: TransactionAuditOrderByWithRelationInput | TransactionAuditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TransactionAuditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionAudits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionAudits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned TransactionAudits
    **/
    _count?: true | TransactionAuditCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TransactionAuditAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TransactionAuditSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TransactionAuditMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TransactionAuditMaxAggregateInputType
  }

  export type GetTransactionAuditAggregateType<T extends TransactionAuditAggregateArgs> = {
        [P in keyof T & keyof AggregateTransactionAudit]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTransactionAudit[P]>
      : GetScalarType<T[P], AggregateTransactionAudit[P]>
  }




  export type TransactionAuditGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TransactionAuditWhereInput
    orderBy?: TransactionAuditOrderByWithAggregationInput | TransactionAuditOrderByWithAggregationInput[]
    by: TransactionAuditScalarFieldEnum[] | TransactionAuditScalarFieldEnum
    having?: TransactionAuditScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TransactionAuditCountAggregateInputType | true
    _avg?: TransactionAuditAvgAggregateInputType
    _sum?: TransactionAuditSumAggregateInputType
    _min?: TransactionAuditMinAggregateInputType
    _max?: TransactionAuditMaxAggregateInputType
  }

  export type TransactionAuditGroupByOutputType = {
    id: number
    oldTxnId: number | null
    newTxnId: number | null
    fileId: number
    reason: string
    createdAt: Date
    _count: TransactionAuditCountAggregateOutputType | null
    _avg: TransactionAuditAvgAggregateOutputType | null
    _sum: TransactionAuditSumAggregateOutputType | null
    _min: TransactionAuditMinAggregateOutputType | null
    _max: TransactionAuditMaxAggregateOutputType | null
  }

  type GetTransactionAuditGroupByPayload<T extends TransactionAuditGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TransactionAuditGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TransactionAuditGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TransactionAuditGroupByOutputType[P]>
            : GetScalarType<T[P], TransactionAuditGroupByOutputType[P]>
        }
      >
    >


  export type TransactionAuditSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    oldTxnId?: boolean
    newTxnId?: boolean
    fileId?: boolean
    reason?: boolean
    createdAt?: boolean
    oldTxn?: boolean | TransactionAudit$oldTxnArgs<ExtArgs>
    newTxn?: boolean | TransactionAudit$newTxnArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionAudit"]>

  export type TransactionAuditSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    oldTxnId?: boolean
    newTxnId?: boolean
    fileId?: boolean
    reason?: boolean
    createdAt?: boolean
    oldTxn?: boolean | TransactionAudit$oldTxnArgs<ExtArgs>
    newTxn?: boolean | TransactionAudit$newTxnArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionAudit"]>

  export type TransactionAuditSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    oldTxnId?: boolean
    newTxnId?: boolean
    fileId?: boolean
    reason?: boolean
    createdAt?: boolean
    oldTxn?: boolean | TransactionAudit$oldTxnArgs<ExtArgs>
    newTxn?: boolean | TransactionAudit$newTxnArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["transactionAudit"]>

  export type TransactionAuditSelectScalar = {
    id?: boolean
    oldTxnId?: boolean
    newTxnId?: boolean
    fileId?: boolean
    reason?: boolean
    createdAt?: boolean
  }

  export type TransactionAuditOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "oldTxnId" | "newTxnId" | "fileId" | "reason" | "createdAt", ExtArgs["result"]["transactionAudit"]>
  export type TransactionAuditInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oldTxn?: boolean | TransactionAudit$oldTxnArgs<ExtArgs>
    newTxn?: boolean | TransactionAudit$newTxnArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }
  export type TransactionAuditIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oldTxn?: boolean | TransactionAudit$oldTxnArgs<ExtArgs>
    newTxn?: boolean | TransactionAudit$newTxnArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }
  export type TransactionAuditIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    oldTxn?: boolean | TransactionAudit$oldTxnArgs<ExtArgs>
    newTxn?: boolean | TransactionAudit$newTxnArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }

  export type $TransactionAuditPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "TransactionAudit"
    objects: {
      oldTxn: Prisma.$TransactionPayload<ExtArgs> | null
      newTxn: Prisma.$TransactionPayload<ExtArgs> | null
      file: Prisma.$StagingFilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      oldTxnId: number | null
      newTxnId: number | null
      fileId: number
      reason: string
      createdAt: Date
    }, ExtArgs["result"]["transactionAudit"]>
    composites: {}
  }

  type TransactionAuditGetPayload<S extends boolean | null | undefined | TransactionAuditDefaultArgs> = $Result.GetResult<Prisma.$TransactionAuditPayload, S>

  type TransactionAuditCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<TransactionAuditFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: TransactionAuditCountAggregateInputType | true
    }

  export interface TransactionAuditDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['TransactionAudit'], meta: { name: 'TransactionAudit' } }
    /**
     * Find zero or one TransactionAudit that matches the filter.
     * @param {TransactionAuditFindUniqueArgs} args - Arguments to find a TransactionAudit
     * @example
     * // Get one TransactionAudit
     * const transactionAudit = await prisma.transactionAudit.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends TransactionAuditFindUniqueArgs>(args: SelectSubset<T, TransactionAuditFindUniqueArgs<ExtArgs>>): Prisma__TransactionAuditClient<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one TransactionAudit that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {TransactionAuditFindUniqueOrThrowArgs} args - Arguments to find a TransactionAudit
     * @example
     * // Get one TransactionAudit
     * const transactionAudit = await prisma.transactionAudit.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends TransactionAuditFindUniqueOrThrowArgs>(args: SelectSubset<T, TransactionAuditFindUniqueOrThrowArgs<ExtArgs>>): Prisma__TransactionAuditClient<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransactionAudit that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAuditFindFirstArgs} args - Arguments to find a TransactionAudit
     * @example
     * // Get one TransactionAudit
     * const transactionAudit = await prisma.transactionAudit.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends TransactionAuditFindFirstArgs>(args?: SelectSubset<T, TransactionAuditFindFirstArgs<ExtArgs>>): Prisma__TransactionAuditClient<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first TransactionAudit that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAuditFindFirstOrThrowArgs} args - Arguments to find a TransactionAudit
     * @example
     * // Get one TransactionAudit
     * const transactionAudit = await prisma.transactionAudit.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends TransactionAuditFindFirstOrThrowArgs>(args?: SelectSubset<T, TransactionAuditFindFirstOrThrowArgs<ExtArgs>>): Prisma__TransactionAuditClient<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more TransactionAudits that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAuditFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all TransactionAudits
     * const transactionAudits = await prisma.transactionAudit.findMany()
     * 
     * // Get first 10 TransactionAudits
     * const transactionAudits = await prisma.transactionAudit.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const transactionAuditWithIdOnly = await prisma.transactionAudit.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends TransactionAuditFindManyArgs>(args?: SelectSubset<T, TransactionAuditFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a TransactionAudit.
     * @param {TransactionAuditCreateArgs} args - Arguments to create a TransactionAudit.
     * @example
     * // Create one TransactionAudit
     * const TransactionAudit = await prisma.transactionAudit.create({
     *   data: {
     *     // ... data to create a TransactionAudit
     *   }
     * })
     * 
     */
    create<T extends TransactionAuditCreateArgs>(args: SelectSubset<T, TransactionAuditCreateArgs<ExtArgs>>): Prisma__TransactionAuditClient<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many TransactionAudits.
     * @param {TransactionAuditCreateManyArgs} args - Arguments to create many TransactionAudits.
     * @example
     * // Create many TransactionAudits
     * const transactionAudit = await prisma.transactionAudit.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends TransactionAuditCreateManyArgs>(args?: SelectSubset<T, TransactionAuditCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many TransactionAudits and returns the data saved in the database.
     * @param {TransactionAuditCreateManyAndReturnArgs} args - Arguments to create many TransactionAudits.
     * @example
     * // Create many TransactionAudits
     * const transactionAudit = await prisma.transactionAudit.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many TransactionAudits and only return the `id`
     * const transactionAuditWithIdOnly = await prisma.transactionAudit.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends TransactionAuditCreateManyAndReturnArgs>(args?: SelectSubset<T, TransactionAuditCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a TransactionAudit.
     * @param {TransactionAuditDeleteArgs} args - Arguments to delete one TransactionAudit.
     * @example
     * // Delete one TransactionAudit
     * const TransactionAudit = await prisma.transactionAudit.delete({
     *   where: {
     *     // ... filter to delete one TransactionAudit
     *   }
     * })
     * 
     */
    delete<T extends TransactionAuditDeleteArgs>(args: SelectSubset<T, TransactionAuditDeleteArgs<ExtArgs>>): Prisma__TransactionAuditClient<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one TransactionAudit.
     * @param {TransactionAuditUpdateArgs} args - Arguments to update one TransactionAudit.
     * @example
     * // Update one TransactionAudit
     * const transactionAudit = await prisma.transactionAudit.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends TransactionAuditUpdateArgs>(args: SelectSubset<T, TransactionAuditUpdateArgs<ExtArgs>>): Prisma__TransactionAuditClient<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more TransactionAudits.
     * @param {TransactionAuditDeleteManyArgs} args - Arguments to filter TransactionAudits to delete.
     * @example
     * // Delete a few TransactionAudits
     * const { count } = await prisma.transactionAudit.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends TransactionAuditDeleteManyArgs>(args?: SelectSubset<T, TransactionAuditDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionAudits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAuditUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many TransactionAudits
     * const transactionAudit = await prisma.transactionAudit.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends TransactionAuditUpdateManyArgs>(args: SelectSubset<T, TransactionAuditUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more TransactionAudits and returns the data updated in the database.
     * @param {TransactionAuditUpdateManyAndReturnArgs} args - Arguments to update many TransactionAudits.
     * @example
     * // Update many TransactionAudits
     * const transactionAudit = await prisma.transactionAudit.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more TransactionAudits and only return the `id`
     * const transactionAuditWithIdOnly = await prisma.transactionAudit.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends TransactionAuditUpdateManyAndReturnArgs>(args: SelectSubset<T, TransactionAuditUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one TransactionAudit.
     * @param {TransactionAuditUpsertArgs} args - Arguments to update or create a TransactionAudit.
     * @example
     * // Update or create a TransactionAudit
     * const transactionAudit = await prisma.transactionAudit.upsert({
     *   create: {
     *     // ... data to create a TransactionAudit
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the TransactionAudit we want to update
     *   }
     * })
     */
    upsert<T extends TransactionAuditUpsertArgs>(args: SelectSubset<T, TransactionAuditUpsertArgs<ExtArgs>>): Prisma__TransactionAuditClient<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of TransactionAudits.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAuditCountArgs} args - Arguments to filter TransactionAudits to count.
     * @example
     * // Count the number of TransactionAudits
     * const count = await prisma.transactionAudit.count({
     *   where: {
     *     // ... the filter for the TransactionAudits we want to count
     *   }
     * })
    **/
    count<T extends TransactionAuditCountArgs>(
      args?: Subset<T, TransactionAuditCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TransactionAuditCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a TransactionAudit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAuditAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TransactionAuditAggregateArgs>(args: Subset<T, TransactionAuditAggregateArgs>): Prisma.PrismaPromise<GetTransactionAuditAggregateType<T>>

    /**
     * Group by TransactionAudit.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TransactionAuditGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TransactionAuditGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TransactionAuditGroupByArgs['orderBy'] }
        : { orderBy?: TransactionAuditGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TransactionAuditGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTransactionAuditGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the TransactionAudit model
   */
  readonly fields: TransactionAuditFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for TransactionAudit.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TransactionAuditClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    oldTxn<T extends TransactionAudit$oldTxnArgs<ExtArgs> = {}>(args?: Subset<T, TransactionAudit$oldTxnArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    newTxn<T extends TransactionAudit$newTxnArgs<ExtArgs> = {}>(args?: Subset<T, TransactionAudit$newTxnArgs<ExtArgs>>): Prisma__TransactionClient<$Result.GetResult<Prisma.$TransactionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    file<T extends StagingFileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagingFileDefaultArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the TransactionAudit model
   */
  interface TransactionAuditFieldRefs {
    readonly id: FieldRef<"TransactionAudit", 'Int'>
    readonly oldTxnId: FieldRef<"TransactionAudit", 'Int'>
    readonly newTxnId: FieldRef<"TransactionAudit", 'Int'>
    readonly fileId: FieldRef<"TransactionAudit", 'Int'>
    readonly reason: FieldRef<"TransactionAudit", 'String'>
    readonly createdAt: FieldRef<"TransactionAudit", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * TransactionAudit findUnique
   */
  export type TransactionAuditFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * Filter, which TransactionAudit to fetch.
     */
    where: TransactionAuditWhereUniqueInput
  }

  /**
   * TransactionAudit findUniqueOrThrow
   */
  export type TransactionAuditFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * Filter, which TransactionAudit to fetch.
     */
    where: TransactionAuditWhereUniqueInput
  }

  /**
   * TransactionAudit findFirst
   */
  export type TransactionAuditFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * Filter, which TransactionAudit to fetch.
     */
    where?: TransactionAuditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionAudits to fetch.
     */
    orderBy?: TransactionAuditOrderByWithRelationInput | TransactionAuditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionAudits.
     */
    cursor?: TransactionAuditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionAudits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionAudits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionAudits.
     */
    distinct?: TransactionAuditScalarFieldEnum | TransactionAuditScalarFieldEnum[]
  }

  /**
   * TransactionAudit findFirstOrThrow
   */
  export type TransactionAuditFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * Filter, which TransactionAudit to fetch.
     */
    where?: TransactionAuditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionAudits to fetch.
     */
    orderBy?: TransactionAuditOrderByWithRelationInput | TransactionAuditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for TransactionAudits.
     */
    cursor?: TransactionAuditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionAudits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionAudits.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of TransactionAudits.
     */
    distinct?: TransactionAuditScalarFieldEnum | TransactionAuditScalarFieldEnum[]
  }

  /**
   * TransactionAudit findMany
   */
  export type TransactionAuditFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * Filter, which TransactionAudits to fetch.
     */
    where?: TransactionAuditWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of TransactionAudits to fetch.
     */
    orderBy?: TransactionAuditOrderByWithRelationInput | TransactionAuditOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing TransactionAudits.
     */
    cursor?: TransactionAuditWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` TransactionAudits from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` TransactionAudits.
     */
    skip?: number
    distinct?: TransactionAuditScalarFieldEnum | TransactionAuditScalarFieldEnum[]
  }

  /**
   * TransactionAudit create
   */
  export type TransactionAuditCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * The data needed to create a TransactionAudit.
     */
    data: XOR<TransactionAuditCreateInput, TransactionAuditUncheckedCreateInput>
  }

  /**
   * TransactionAudit createMany
   */
  export type TransactionAuditCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many TransactionAudits.
     */
    data: TransactionAuditCreateManyInput | TransactionAuditCreateManyInput[]
  }

  /**
   * TransactionAudit createManyAndReturn
   */
  export type TransactionAuditCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * The data used to create many TransactionAudits.
     */
    data: TransactionAuditCreateManyInput | TransactionAuditCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransactionAudit update
   */
  export type TransactionAuditUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * The data needed to update a TransactionAudit.
     */
    data: XOR<TransactionAuditUpdateInput, TransactionAuditUncheckedUpdateInput>
    /**
     * Choose, which TransactionAudit to update.
     */
    where: TransactionAuditWhereUniqueInput
  }

  /**
   * TransactionAudit updateMany
   */
  export type TransactionAuditUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update TransactionAudits.
     */
    data: XOR<TransactionAuditUpdateManyMutationInput, TransactionAuditUncheckedUpdateManyInput>
    /**
     * Filter which TransactionAudits to update
     */
    where?: TransactionAuditWhereInput
    /**
     * Limit how many TransactionAudits to update.
     */
    limit?: number
  }

  /**
   * TransactionAudit updateManyAndReturn
   */
  export type TransactionAuditUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * The data used to update TransactionAudits.
     */
    data: XOR<TransactionAuditUpdateManyMutationInput, TransactionAuditUncheckedUpdateManyInput>
    /**
     * Filter which TransactionAudits to update
     */
    where?: TransactionAuditWhereInput
    /**
     * Limit how many TransactionAudits to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * TransactionAudit upsert
   */
  export type TransactionAuditUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * The filter to search for the TransactionAudit to update in case it exists.
     */
    where: TransactionAuditWhereUniqueInput
    /**
     * In case the TransactionAudit found by the `where` argument doesn't exist, create a new TransactionAudit with this data.
     */
    create: XOR<TransactionAuditCreateInput, TransactionAuditUncheckedCreateInput>
    /**
     * In case the TransactionAudit was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TransactionAuditUpdateInput, TransactionAuditUncheckedUpdateInput>
  }

  /**
   * TransactionAudit delete
   */
  export type TransactionAuditDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    /**
     * Filter which TransactionAudit to delete.
     */
    where: TransactionAuditWhereUniqueInput
  }

  /**
   * TransactionAudit deleteMany
   */
  export type TransactionAuditDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which TransactionAudits to delete
     */
    where?: TransactionAuditWhereInput
    /**
     * Limit how many TransactionAudits to delete.
     */
    limit?: number
  }

  /**
   * TransactionAudit.oldTxn
   */
  export type TransactionAudit$oldTxnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
  }

  /**
   * TransactionAudit.newTxn
   */
  export type TransactionAudit$newTxnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Transaction
     */
    select?: TransactionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Transaction
     */
    omit?: TransactionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionInclude<ExtArgs> | null
    where?: TransactionWhereInput
  }

  /**
   * TransactionAudit without action
   */
  export type TransactionAuditDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
  }


  /**
   * Model CustomerBalanceSnapshot
   */

  export type AggregateCustomerBalanceSnapshot = {
    _count: CustomerBalanceSnapshotCountAggregateOutputType | null
    _avg: CustomerBalanceSnapshotAvgAggregateOutputType | null
    _sum: CustomerBalanceSnapshotSumAggregateOutputType | null
    _min: CustomerBalanceSnapshotMinAggregateOutputType | null
    _max: CustomerBalanceSnapshotMaxAggregateOutputType | null
  }

  export type CustomerBalanceSnapshotAvgAggregateOutputType = {
    id: number | null
    customerId: number | null
    fileId: number | null
    reportedTotalDebitCents: number | null
    reportedTotalCreditCents: number | null
    reportedDebtBalanceCents: number | null
    reportedCreditBalanceCents: number | null
    calcTotalDebitCents: number | null
    calcTotalCreditCents: number | null
    calcDebtBalanceCents: number | null
    calcCreditBalanceCents: number | null
    diffTotalDebitCents: number | null
    diffTotalCreditCents: number | null
    diffDebtBalanceCents: number | null
    diffCreditBalanceCents: number | null
  }

  export type CustomerBalanceSnapshotSumAggregateOutputType = {
    id: number | null
    customerId: number | null
    fileId: number | null
    reportedTotalDebitCents: number | null
    reportedTotalCreditCents: number | null
    reportedDebtBalanceCents: number | null
    reportedCreditBalanceCents: number | null
    calcTotalDebitCents: number | null
    calcTotalCreditCents: number | null
    calcDebtBalanceCents: number | null
    calcCreditBalanceCents: number | null
    diffTotalDebitCents: number | null
    diffTotalCreditCents: number | null
    diffDebtBalanceCents: number | null
    diffCreditBalanceCents: number | null
  }

  export type CustomerBalanceSnapshotMinAggregateOutputType = {
    id: number | null
    customerId: number | null
    fileId: number | null
    reportedTotalDebitCents: number | null
    reportedTotalCreditCents: number | null
    reportedDebtBalanceCents: number | null
    reportedCreditBalanceCents: number | null
    calcTotalDebitCents: number | null
    calcTotalCreditCents: number | null
    calcDebtBalanceCents: number | null
    calcCreditBalanceCents: number | null
    diffTotalDebitCents: number | null
    diffTotalCreditCents: number | null
    diffDebtBalanceCents: number | null
    diffCreditBalanceCents: number | null
    createdAt: Date | null
  }

  export type CustomerBalanceSnapshotMaxAggregateOutputType = {
    id: number | null
    customerId: number | null
    fileId: number | null
    reportedTotalDebitCents: number | null
    reportedTotalCreditCents: number | null
    reportedDebtBalanceCents: number | null
    reportedCreditBalanceCents: number | null
    calcTotalDebitCents: number | null
    calcTotalCreditCents: number | null
    calcDebtBalanceCents: number | null
    calcCreditBalanceCents: number | null
    diffTotalDebitCents: number | null
    diffTotalCreditCents: number | null
    diffDebtBalanceCents: number | null
    diffCreditBalanceCents: number | null
    createdAt: Date | null
  }

  export type CustomerBalanceSnapshotCountAggregateOutputType = {
    id: number
    customerId: number
    fileId: number
    reportedTotalDebitCents: number
    reportedTotalCreditCents: number
    reportedDebtBalanceCents: number
    reportedCreditBalanceCents: number
    calcTotalDebitCents: number
    calcTotalCreditCents: number
    calcDebtBalanceCents: number
    calcCreditBalanceCents: number
    diffTotalDebitCents: number
    diffTotalCreditCents: number
    diffDebtBalanceCents: number
    diffCreditBalanceCents: number
    createdAt: number
    _all: number
  }


  export type CustomerBalanceSnapshotAvgAggregateInputType = {
    id?: true
    customerId?: true
    fileId?: true
    reportedTotalDebitCents?: true
    reportedTotalCreditCents?: true
    reportedDebtBalanceCents?: true
    reportedCreditBalanceCents?: true
    calcTotalDebitCents?: true
    calcTotalCreditCents?: true
    calcDebtBalanceCents?: true
    calcCreditBalanceCents?: true
    diffTotalDebitCents?: true
    diffTotalCreditCents?: true
    diffDebtBalanceCents?: true
    diffCreditBalanceCents?: true
  }

  export type CustomerBalanceSnapshotSumAggregateInputType = {
    id?: true
    customerId?: true
    fileId?: true
    reportedTotalDebitCents?: true
    reportedTotalCreditCents?: true
    reportedDebtBalanceCents?: true
    reportedCreditBalanceCents?: true
    calcTotalDebitCents?: true
    calcTotalCreditCents?: true
    calcDebtBalanceCents?: true
    calcCreditBalanceCents?: true
    diffTotalDebitCents?: true
    diffTotalCreditCents?: true
    diffDebtBalanceCents?: true
    diffCreditBalanceCents?: true
  }

  export type CustomerBalanceSnapshotMinAggregateInputType = {
    id?: true
    customerId?: true
    fileId?: true
    reportedTotalDebitCents?: true
    reportedTotalCreditCents?: true
    reportedDebtBalanceCents?: true
    reportedCreditBalanceCents?: true
    calcTotalDebitCents?: true
    calcTotalCreditCents?: true
    calcDebtBalanceCents?: true
    calcCreditBalanceCents?: true
    diffTotalDebitCents?: true
    diffTotalCreditCents?: true
    diffDebtBalanceCents?: true
    diffCreditBalanceCents?: true
    createdAt?: true
  }

  export type CustomerBalanceSnapshotMaxAggregateInputType = {
    id?: true
    customerId?: true
    fileId?: true
    reportedTotalDebitCents?: true
    reportedTotalCreditCents?: true
    reportedDebtBalanceCents?: true
    reportedCreditBalanceCents?: true
    calcTotalDebitCents?: true
    calcTotalCreditCents?: true
    calcDebtBalanceCents?: true
    calcCreditBalanceCents?: true
    diffTotalDebitCents?: true
    diffTotalCreditCents?: true
    diffDebtBalanceCents?: true
    diffCreditBalanceCents?: true
    createdAt?: true
  }

  export type CustomerBalanceSnapshotCountAggregateInputType = {
    id?: true
    customerId?: true
    fileId?: true
    reportedTotalDebitCents?: true
    reportedTotalCreditCents?: true
    reportedDebtBalanceCents?: true
    reportedCreditBalanceCents?: true
    calcTotalDebitCents?: true
    calcTotalCreditCents?: true
    calcDebtBalanceCents?: true
    calcCreditBalanceCents?: true
    diffTotalDebitCents?: true
    diffTotalCreditCents?: true
    diffDebtBalanceCents?: true
    diffCreditBalanceCents?: true
    createdAt?: true
    _all?: true
  }

  export type CustomerBalanceSnapshotAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerBalanceSnapshot to aggregate.
     */
    where?: CustomerBalanceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerBalanceSnapshots to fetch.
     */
    orderBy?: CustomerBalanceSnapshotOrderByWithRelationInput | CustomerBalanceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CustomerBalanceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerBalanceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerBalanceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CustomerBalanceSnapshots
    **/
    _count?: true | CustomerBalanceSnapshotCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: CustomerBalanceSnapshotAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: CustomerBalanceSnapshotSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CustomerBalanceSnapshotMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CustomerBalanceSnapshotMaxAggregateInputType
  }

  export type GetCustomerBalanceSnapshotAggregateType<T extends CustomerBalanceSnapshotAggregateArgs> = {
        [P in keyof T & keyof AggregateCustomerBalanceSnapshot]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCustomerBalanceSnapshot[P]>
      : GetScalarType<T[P], AggregateCustomerBalanceSnapshot[P]>
  }




  export type CustomerBalanceSnapshotGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CustomerBalanceSnapshotWhereInput
    orderBy?: CustomerBalanceSnapshotOrderByWithAggregationInput | CustomerBalanceSnapshotOrderByWithAggregationInput[]
    by: CustomerBalanceSnapshotScalarFieldEnum[] | CustomerBalanceSnapshotScalarFieldEnum
    having?: CustomerBalanceSnapshotScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CustomerBalanceSnapshotCountAggregateInputType | true
    _avg?: CustomerBalanceSnapshotAvgAggregateInputType
    _sum?: CustomerBalanceSnapshotSumAggregateInputType
    _min?: CustomerBalanceSnapshotMinAggregateInputType
    _max?: CustomerBalanceSnapshotMaxAggregateInputType
  }

  export type CustomerBalanceSnapshotGroupByOutputType = {
    id: number
    customerId: number
    fileId: number
    reportedTotalDebitCents: number
    reportedTotalCreditCents: number
    reportedDebtBalanceCents: number
    reportedCreditBalanceCents: number
    calcTotalDebitCents: number
    calcTotalCreditCents: number
    calcDebtBalanceCents: number
    calcCreditBalanceCents: number
    diffTotalDebitCents: number
    diffTotalCreditCents: number
    diffDebtBalanceCents: number
    diffCreditBalanceCents: number
    createdAt: Date
    _count: CustomerBalanceSnapshotCountAggregateOutputType | null
    _avg: CustomerBalanceSnapshotAvgAggregateOutputType | null
    _sum: CustomerBalanceSnapshotSumAggregateOutputType | null
    _min: CustomerBalanceSnapshotMinAggregateOutputType | null
    _max: CustomerBalanceSnapshotMaxAggregateOutputType | null
  }

  type GetCustomerBalanceSnapshotGroupByPayload<T extends CustomerBalanceSnapshotGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CustomerBalanceSnapshotGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CustomerBalanceSnapshotGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CustomerBalanceSnapshotGroupByOutputType[P]>
            : GetScalarType<T[P], CustomerBalanceSnapshotGroupByOutputType[P]>
        }
      >
    >


  export type CustomerBalanceSnapshotSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    fileId?: boolean
    reportedTotalDebitCents?: boolean
    reportedTotalCreditCents?: boolean
    reportedDebtBalanceCents?: boolean
    reportedCreditBalanceCents?: boolean
    calcTotalDebitCents?: boolean
    calcTotalCreditCents?: boolean
    calcDebtBalanceCents?: boolean
    calcCreditBalanceCents?: boolean
    diffTotalDebitCents?: boolean
    diffTotalCreditCents?: boolean
    diffDebtBalanceCents?: boolean
    diffCreditBalanceCents?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerBalanceSnapshot"]>

  export type CustomerBalanceSnapshotSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    fileId?: boolean
    reportedTotalDebitCents?: boolean
    reportedTotalCreditCents?: boolean
    reportedDebtBalanceCents?: boolean
    reportedCreditBalanceCents?: boolean
    calcTotalDebitCents?: boolean
    calcTotalCreditCents?: boolean
    calcDebtBalanceCents?: boolean
    calcCreditBalanceCents?: boolean
    diffTotalDebitCents?: boolean
    diffTotalCreditCents?: boolean
    diffDebtBalanceCents?: boolean
    diffCreditBalanceCents?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerBalanceSnapshot"]>

  export type CustomerBalanceSnapshotSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    customerId?: boolean
    fileId?: boolean
    reportedTotalDebitCents?: boolean
    reportedTotalCreditCents?: boolean
    reportedDebtBalanceCents?: boolean
    reportedCreditBalanceCents?: boolean
    calcTotalDebitCents?: boolean
    calcTotalCreditCents?: boolean
    calcDebtBalanceCents?: boolean
    calcCreditBalanceCents?: boolean
    diffTotalDebitCents?: boolean
    diffTotalCreditCents?: boolean
    diffDebtBalanceCents?: boolean
    diffCreditBalanceCents?: boolean
    createdAt?: boolean
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["customerBalanceSnapshot"]>

  export type CustomerBalanceSnapshotSelectScalar = {
    id?: boolean
    customerId?: boolean
    fileId?: boolean
    reportedTotalDebitCents?: boolean
    reportedTotalCreditCents?: boolean
    reportedDebtBalanceCents?: boolean
    reportedCreditBalanceCents?: boolean
    calcTotalDebitCents?: boolean
    calcTotalCreditCents?: boolean
    calcDebtBalanceCents?: boolean
    calcCreditBalanceCents?: boolean
    diffTotalDebitCents?: boolean
    diffTotalCreditCents?: boolean
    diffDebtBalanceCents?: boolean
    diffCreditBalanceCents?: boolean
    createdAt?: boolean
  }

  export type CustomerBalanceSnapshotOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "customerId" | "fileId" | "reportedTotalDebitCents" | "reportedTotalCreditCents" | "reportedDebtBalanceCents" | "reportedCreditBalanceCents" | "calcTotalDebitCents" | "calcTotalCreditCents" | "calcDebtBalanceCents" | "calcCreditBalanceCents" | "diffTotalDebitCents" | "diffTotalCreditCents" | "diffDebtBalanceCents" | "diffCreditBalanceCents" | "createdAt", ExtArgs["result"]["customerBalanceSnapshot"]>
  export type CustomerBalanceSnapshotInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }
  export type CustomerBalanceSnapshotIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }
  export type CustomerBalanceSnapshotIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    customer?: boolean | CustomerDefaultArgs<ExtArgs>
    file?: boolean | StagingFileDefaultArgs<ExtArgs>
  }

  export type $CustomerBalanceSnapshotPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CustomerBalanceSnapshot"
    objects: {
      customer: Prisma.$CustomerPayload<ExtArgs>
      file: Prisma.$StagingFilePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      customerId: number
      fileId: number
      reportedTotalDebitCents: number
      reportedTotalCreditCents: number
      reportedDebtBalanceCents: number
      reportedCreditBalanceCents: number
      calcTotalDebitCents: number
      calcTotalCreditCents: number
      calcDebtBalanceCents: number
      calcCreditBalanceCents: number
      diffTotalDebitCents: number
      diffTotalCreditCents: number
      diffDebtBalanceCents: number
      diffCreditBalanceCents: number
      createdAt: Date
    }, ExtArgs["result"]["customerBalanceSnapshot"]>
    composites: {}
  }

  type CustomerBalanceSnapshotGetPayload<S extends boolean | null | undefined | CustomerBalanceSnapshotDefaultArgs> = $Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload, S>

  type CustomerBalanceSnapshotCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CustomerBalanceSnapshotFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CustomerBalanceSnapshotCountAggregateInputType | true
    }

  export interface CustomerBalanceSnapshotDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CustomerBalanceSnapshot'], meta: { name: 'CustomerBalanceSnapshot' } }
    /**
     * Find zero or one CustomerBalanceSnapshot that matches the filter.
     * @param {CustomerBalanceSnapshotFindUniqueArgs} args - Arguments to find a CustomerBalanceSnapshot
     * @example
     * // Get one CustomerBalanceSnapshot
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CustomerBalanceSnapshotFindUniqueArgs>(args: SelectSubset<T, CustomerBalanceSnapshotFindUniqueArgs<ExtArgs>>): Prisma__CustomerBalanceSnapshotClient<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one CustomerBalanceSnapshot that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CustomerBalanceSnapshotFindUniqueOrThrowArgs} args - Arguments to find a CustomerBalanceSnapshot
     * @example
     * // Get one CustomerBalanceSnapshot
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CustomerBalanceSnapshotFindUniqueOrThrowArgs>(args: SelectSubset<T, CustomerBalanceSnapshotFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CustomerBalanceSnapshotClient<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerBalanceSnapshot that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerBalanceSnapshotFindFirstArgs} args - Arguments to find a CustomerBalanceSnapshot
     * @example
     * // Get one CustomerBalanceSnapshot
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CustomerBalanceSnapshotFindFirstArgs>(args?: SelectSubset<T, CustomerBalanceSnapshotFindFirstArgs<ExtArgs>>): Prisma__CustomerBalanceSnapshotClient<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first CustomerBalanceSnapshot that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerBalanceSnapshotFindFirstOrThrowArgs} args - Arguments to find a CustomerBalanceSnapshot
     * @example
     * // Get one CustomerBalanceSnapshot
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CustomerBalanceSnapshotFindFirstOrThrowArgs>(args?: SelectSubset<T, CustomerBalanceSnapshotFindFirstOrThrowArgs<ExtArgs>>): Prisma__CustomerBalanceSnapshotClient<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more CustomerBalanceSnapshots that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerBalanceSnapshotFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CustomerBalanceSnapshots
     * const customerBalanceSnapshots = await prisma.customerBalanceSnapshot.findMany()
     * 
     * // Get first 10 CustomerBalanceSnapshots
     * const customerBalanceSnapshots = await prisma.customerBalanceSnapshot.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const customerBalanceSnapshotWithIdOnly = await prisma.customerBalanceSnapshot.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CustomerBalanceSnapshotFindManyArgs>(args?: SelectSubset<T, CustomerBalanceSnapshotFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a CustomerBalanceSnapshot.
     * @param {CustomerBalanceSnapshotCreateArgs} args - Arguments to create a CustomerBalanceSnapshot.
     * @example
     * // Create one CustomerBalanceSnapshot
     * const CustomerBalanceSnapshot = await prisma.customerBalanceSnapshot.create({
     *   data: {
     *     // ... data to create a CustomerBalanceSnapshot
     *   }
     * })
     * 
     */
    create<T extends CustomerBalanceSnapshotCreateArgs>(args: SelectSubset<T, CustomerBalanceSnapshotCreateArgs<ExtArgs>>): Prisma__CustomerBalanceSnapshotClient<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many CustomerBalanceSnapshots.
     * @param {CustomerBalanceSnapshotCreateManyArgs} args - Arguments to create many CustomerBalanceSnapshots.
     * @example
     * // Create many CustomerBalanceSnapshots
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CustomerBalanceSnapshotCreateManyArgs>(args?: SelectSubset<T, CustomerBalanceSnapshotCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many CustomerBalanceSnapshots and returns the data saved in the database.
     * @param {CustomerBalanceSnapshotCreateManyAndReturnArgs} args - Arguments to create many CustomerBalanceSnapshots.
     * @example
     * // Create many CustomerBalanceSnapshots
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many CustomerBalanceSnapshots and only return the `id`
     * const customerBalanceSnapshotWithIdOnly = await prisma.customerBalanceSnapshot.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CustomerBalanceSnapshotCreateManyAndReturnArgs>(args?: SelectSubset<T, CustomerBalanceSnapshotCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a CustomerBalanceSnapshot.
     * @param {CustomerBalanceSnapshotDeleteArgs} args - Arguments to delete one CustomerBalanceSnapshot.
     * @example
     * // Delete one CustomerBalanceSnapshot
     * const CustomerBalanceSnapshot = await prisma.customerBalanceSnapshot.delete({
     *   where: {
     *     // ... filter to delete one CustomerBalanceSnapshot
     *   }
     * })
     * 
     */
    delete<T extends CustomerBalanceSnapshotDeleteArgs>(args: SelectSubset<T, CustomerBalanceSnapshotDeleteArgs<ExtArgs>>): Prisma__CustomerBalanceSnapshotClient<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one CustomerBalanceSnapshot.
     * @param {CustomerBalanceSnapshotUpdateArgs} args - Arguments to update one CustomerBalanceSnapshot.
     * @example
     * // Update one CustomerBalanceSnapshot
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CustomerBalanceSnapshotUpdateArgs>(args: SelectSubset<T, CustomerBalanceSnapshotUpdateArgs<ExtArgs>>): Prisma__CustomerBalanceSnapshotClient<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more CustomerBalanceSnapshots.
     * @param {CustomerBalanceSnapshotDeleteManyArgs} args - Arguments to filter CustomerBalanceSnapshots to delete.
     * @example
     * // Delete a few CustomerBalanceSnapshots
     * const { count } = await prisma.customerBalanceSnapshot.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CustomerBalanceSnapshotDeleteManyArgs>(args?: SelectSubset<T, CustomerBalanceSnapshotDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerBalanceSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerBalanceSnapshotUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CustomerBalanceSnapshots
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CustomerBalanceSnapshotUpdateManyArgs>(args: SelectSubset<T, CustomerBalanceSnapshotUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CustomerBalanceSnapshots and returns the data updated in the database.
     * @param {CustomerBalanceSnapshotUpdateManyAndReturnArgs} args - Arguments to update many CustomerBalanceSnapshots.
     * @example
     * // Update many CustomerBalanceSnapshots
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more CustomerBalanceSnapshots and only return the `id`
     * const customerBalanceSnapshotWithIdOnly = await prisma.customerBalanceSnapshot.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CustomerBalanceSnapshotUpdateManyAndReturnArgs>(args: SelectSubset<T, CustomerBalanceSnapshotUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one CustomerBalanceSnapshot.
     * @param {CustomerBalanceSnapshotUpsertArgs} args - Arguments to update or create a CustomerBalanceSnapshot.
     * @example
     * // Update or create a CustomerBalanceSnapshot
     * const customerBalanceSnapshot = await prisma.customerBalanceSnapshot.upsert({
     *   create: {
     *     // ... data to create a CustomerBalanceSnapshot
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CustomerBalanceSnapshot we want to update
     *   }
     * })
     */
    upsert<T extends CustomerBalanceSnapshotUpsertArgs>(args: SelectSubset<T, CustomerBalanceSnapshotUpsertArgs<ExtArgs>>): Prisma__CustomerBalanceSnapshotClient<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of CustomerBalanceSnapshots.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerBalanceSnapshotCountArgs} args - Arguments to filter CustomerBalanceSnapshots to count.
     * @example
     * // Count the number of CustomerBalanceSnapshots
     * const count = await prisma.customerBalanceSnapshot.count({
     *   where: {
     *     // ... the filter for the CustomerBalanceSnapshots we want to count
     *   }
     * })
    **/
    count<T extends CustomerBalanceSnapshotCountArgs>(
      args?: Subset<T, CustomerBalanceSnapshotCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CustomerBalanceSnapshotCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CustomerBalanceSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerBalanceSnapshotAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CustomerBalanceSnapshotAggregateArgs>(args: Subset<T, CustomerBalanceSnapshotAggregateArgs>): Prisma.PrismaPromise<GetCustomerBalanceSnapshotAggregateType<T>>

    /**
     * Group by CustomerBalanceSnapshot.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CustomerBalanceSnapshotGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CustomerBalanceSnapshotGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CustomerBalanceSnapshotGroupByArgs['orderBy'] }
        : { orderBy?: CustomerBalanceSnapshotGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CustomerBalanceSnapshotGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCustomerBalanceSnapshotGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CustomerBalanceSnapshot model
   */
  readonly fields: CustomerBalanceSnapshotFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CustomerBalanceSnapshot.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CustomerBalanceSnapshotClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    customer<T extends CustomerDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CustomerDefaultArgs<ExtArgs>>): Prisma__CustomerClient<$Result.GetResult<Prisma.$CustomerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    file<T extends StagingFileDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StagingFileDefaultArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the CustomerBalanceSnapshot model
   */
  interface CustomerBalanceSnapshotFieldRefs {
    readonly id: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly customerId: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly fileId: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly reportedTotalDebitCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly reportedTotalCreditCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly reportedDebtBalanceCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly reportedCreditBalanceCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly calcTotalDebitCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly calcTotalCreditCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly calcDebtBalanceCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly calcCreditBalanceCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly diffTotalDebitCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly diffTotalCreditCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly diffDebtBalanceCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly diffCreditBalanceCents: FieldRef<"CustomerBalanceSnapshot", 'Int'>
    readonly createdAt: FieldRef<"CustomerBalanceSnapshot", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * CustomerBalanceSnapshot findUnique
   */
  export type CustomerBalanceSnapshotFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which CustomerBalanceSnapshot to fetch.
     */
    where: CustomerBalanceSnapshotWhereUniqueInput
  }

  /**
   * CustomerBalanceSnapshot findUniqueOrThrow
   */
  export type CustomerBalanceSnapshotFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which CustomerBalanceSnapshot to fetch.
     */
    where: CustomerBalanceSnapshotWhereUniqueInput
  }

  /**
   * CustomerBalanceSnapshot findFirst
   */
  export type CustomerBalanceSnapshotFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which CustomerBalanceSnapshot to fetch.
     */
    where?: CustomerBalanceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerBalanceSnapshots to fetch.
     */
    orderBy?: CustomerBalanceSnapshotOrderByWithRelationInput | CustomerBalanceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerBalanceSnapshots.
     */
    cursor?: CustomerBalanceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerBalanceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerBalanceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerBalanceSnapshots.
     */
    distinct?: CustomerBalanceSnapshotScalarFieldEnum | CustomerBalanceSnapshotScalarFieldEnum[]
  }

  /**
   * CustomerBalanceSnapshot findFirstOrThrow
   */
  export type CustomerBalanceSnapshotFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which CustomerBalanceSnapshot to fetch.
     */
    where?: CustomerBalanceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerBalanceSnapshots to fetch.
     */
    orderBy?: CustomerBalanceSnapshotOrderByWithRelationInput | CustomerBalanceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CustomerBalanceSnapshots.
     */
    cursor?: CustomerBalanceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerBalanceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerBalanceSnapshots.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CustomerBalanceSnapshots.
     */
    distinct?: CustomerBalanceSnapshotScalarFieldEnum | CustomerBalanceSnapshotScalarFieldEnum[]
  }

  /**
   * CustomerBalanceSnapshot findMany
   */
  export type CustomerBalanceSnapshotFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter, which CustomerBalanceSnapshots to fetch.
     */
    where?: CustomerBalanceSnapshotWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CustomerBalanceSnapshots to fetch.
     */
    orderBy?: CustomerBalanceSnapshotOrderByWithRelationInput | CustomerBalanceSnapshotOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CustomerBalanceSnapshots.
     */
    cursor?: CustomerBalanceSnapshotWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CustomerBalanceSnapshots from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CustomerBalanceSnapshots.
     */
    skip?: number
    distinct?: CustomerBalanceSnapshotScalarFieldEnum | CustomerBalanceSnapshotScalarFieldEnum[]
  }

  /**
   * CustomerBalanceSnapshot create
   */
  export type CustomerBalanceSnapshotCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to create a CustomerBalanceSnapshot.
     */
    data: XOR<CustomerBalanceSnapshotCreateInput, CustomerBalanceSnapshotUncheckedCreateInput>
  }

  /**
   * CustomerBalanceSnapshot createMany
   */
  export type CustomerBalanceSnapshotCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CustomerBalanceSnapshots.
     */
    data: CustomerBalanceSnapshotCreateManyInput | CustomerBalanceSnapshotCreateManyInput[]
  }

  /**
   * CustomerBalanceSnapshot createManyAndReturn
   */
  export type CustomerBalanceSnapshotCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * The data used to create many CustomerBalanceSnapshots.
     */
    data: CustomerBalanceSnapshotCreateManyInput | CustomerBalanceSnapshotCreateManyInput[]
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerBalanceSnapshot update
   */
  export type CustomerBalanceSnapshotUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * The data needed to update a CustomerBalanceSnapshot.
     */
    data: XOR<CustomerBalanceSnapshotUpdateInput, CustomerBalanceSnapshotUncheckedUpdateInput>
    /**
     * Choose, which CustomerBalanceSnapshot to update.
     */
    where: CustomerBalanceSnapshotWhereUniqueInput
  }

  /**
   * CustomerBalanceSnapshot updateMany
   */
  export type CustomerBalanceSnapshotUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CustomerBalanceSnapshots.
     */
    data: XOR<CustomerBalanceSnapshotUpdateManyMutationInput, CustomerBalanceSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which CustomerBalanceSnapshots to update
     */
    where?: CustomerBalanceSnapshotWhereInput
    /**
     * Limit how many CustomerBalanceSnapshots to update.
     */
    limit?: number
  }

  /**
   * CustomerBalanceSnapshot updateManyAndReturn
   */
  export type CustomerBalanceSnapshotUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * The data used to update CustomerBalanceSnapshots.
     */
    data: XOR<CustomerBalanceSnapshotUpdateManyMutationInput, CustomerBalanceSnapshotUncheckedUpdateManyInput>
    /**
     * Filter which CustomerBalanceSnapshots to update
     */
    where?: CustomerBalanceSnapshotWhereInput
    /**
     * Limit how many CustomerBalanceSnapshots to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * CustomerBalanceSnapshot upsert
   */
  export type CustomerBalanceSnapshotUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * The filter to search for the CustomerBalanceSnapshot to update in case it exists.
     */
    where: CustomerBalanceSnapshotWhereUniqueInput
    /**
     * In case the CustomerBalanceSnapshot found by the `where` argument doesn't exist, create a new CustomerBalanceSnapshot with this data.
     */
    create: XOR<CustomerBalanceSnapshotCreateInput, CustomerBalanceSnapshotUncheckedCreateInput>
    /**
     * In case the CustomerBalanceSnapshot was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CustomerBalanceSnapshotUpdateInput, CustomerBalanceSnapshotUncheckedUpdateInput>
  }

  /**
   * CustomerBalanceSnapshot delete
   */
  export type CustomerBalanceSnapshotDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    /**
     * Filter which CustomerBalanceSnapshot to delete.
     */
    where: CustomerBalanceSnapshotWhereUniqueInput
  }

  /**
   * CustomerBalanceSnapshot deleteMany
   */
  export type CustomerBalanceSnapshotDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CustomerBalanceSnapshots to delete
     */
    where?: CustomerBalanceSnapshotWhereInput
    /**
     * Limit how many CustomerBalanceSnapshots to delete.
     */
    limit?: number
  }

  /**
   * CustomerBalanceSnapshot without action
   */
  export type CustomerBalanceSnapshotDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
  }


  /**
   * Model StagingFile
   */

  export type AggregateStagingFile = {
    _count: StagingFileCountAggregateOutputType | null
    _avg: StagingFileAvgAggregateOutputType | null
    _sum: StagingFileSumAggregateOutputType | null
    _min: StagingFileMinAggregateOutputType | null
    _max: StagingFileMaxAggregateOutputType | null
  }

  export type StagingFileAvgAggregateOutputType = {
    id: number | null
    rowCount: number | null
    insertedCount: number | null
    updatedCount: number | null
    skippedCount: number | null
  }

  export type StagingFileSumAggregateOutputType = {
    id: number | null
    rowCount: number | null
    insertedCount: number | null
    updatedCount: number | null
    skippedCount: number | null
  }

  export type StagingFileMinAggregateOutputType = {
    id: number | null
    originalFilename: string | null
    uploadedAt: Date | null
    status: string | null
    rowCount: number | null
    insertedCount: number | null
    updatedCount: number | null
    skippedCount: number | null
    error: string | null
  }

  export type StagingFileMaxAggregateOutputType = {
    id: number | null
    originalFilename: string | null
    uploadedAt: Date | null
    status: string | null
    rowCount: number | null
    insertedCount: number | null
    updatedCount: number | null
    skippedCount: number | null
    error: string | null
  }

  export type StagingFileCountAggregateOutputType = {
    id: number
    originalFilename: number
    uploadedAt: number
    status: number
    rowCount: number
    insertedCount: number
    updatedCount: number
    skippedCount: number
    error: number
    _all: number
  }


  export type StagingFileAvgAggregateInputType = {
    id?: true
    rowCount?: true
    insertedCount?: true
    updatedCount?: true
    skippedCount?: true
  }

  export type StagingFileSumAggregateInputType = {
    id?: true
    rowCount?: true
    insertedCount?: true
    updatedCount?: true
    skippedCount?: true
  }

  export type StagingFileMinAggregateInputType = {
    id?: true
    originalFilename?: true
    uploadedAt?: true
    status?: true
    rowCount?: true
    insertedCount?: true
    updatedCount?: true
    skippedCount?: true
    error?: true
  }

  export type StagingFileMaxAggregateInputType = {
    id?: true
    originalFilename?: true
    uploadedAt?: true
    status?: true
    rowCount?: true
    insertedCount?: true
    updatedCount?: true
    skippedCount?: true
    error?: true
  }

  export type StagingFileCountAggregateInputType = {
    id?: true
    originalFilename?: true
    uploadedAt?: true
    status?: true
    rowCount?: true
    insertedCount?: true
    updatedCount?: true
    skippedCount?: true
    error?: true
    _all?: true
  }

  export type StagingFileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StagingFile to aggregate.
     */
    where?: StagingFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StagingFiles to fetch.
     */
    orderBy?: StagingFileOrderByWithRelationInput | StagingFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StagingFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StagingFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StagingFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StagingFiles
    **/
    _count?: true | StagingFileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StagingFileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StagingFileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StagingFileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StagingFileMaxAggregateInputType
  }

  export type GetStagingFileAggregateType<T extends StagingFileAggregateArgs> = {
        [P in keyof T & keyof AggregateStagingFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStagingFile[P]>
      : GetScalarType<T[P], AggregateStagingFile[P]>
  }




  export type StagingFileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StagingFileWhereInput
    orderBy?: StagingFileOrderByWithAggregationInput | StagingFileOrderByWithAggregationInput[]
    by: StagingFileScalarFieldEnum[] | StagingFileScalarFieldEnum
    having?: StagingFileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StagingFileCountAggregateInputType | true
    _avg?: StagingFileAvgAggregateInputType
    _sum?: StagingFileSumAggregateInputType
    _min?: StagingFileMinAggregateInputType
    _max?: StagingFileMaxAggregateInputType
  }

  export type StagingFileGroupByOutputType = {
    id: number
    originalFilename: string
    uploadedAt: Date
    status: string
    rowCount: number
    insertedCount: number
    updatedCount: number
    skippedCount: number
    error: string | null
    _count: StagingFileCountAggregateOutputType | null
    _avg: StagingFileAvgAggregateOutputType | null
    _sum: StagingFileSumAggregateOutputType | null
    _min: StagingFileMinAggregateOutputType | null
    _max: StagingFileMaxAggregateOutputType | null
  }

  type GetStagingFileGroupByPayload<T extends StagingFileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StagingFileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StagingFileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StagingFileGroupByOutputType[P]>
            : GetScalarType<T[P], StagingFileGroupByOutputType[P]>
        }
      >
    >


  export type StagingFileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalFilename?: boolean
    uploadedAt?: boolean
    status?: boolean
    rowCount?: boolean
    insertedCount?: boolean
    updatedCount?: boolean
    skippedCount?: boolean
    error?: boolean
    rows?: boolean | StagingFile$rowsArgs<ExtArgs>
    transactionLinks?: boolean | StagingFile$transactionLinksArgs<ExtArgs>
    customerBalances?: boolean | StagingFile$customerBalancesArgs<ExtArgs>
    transactionAudits?: boolean | StagingFile$transactionAuditsArgs<ExtArgs>
    _count?: boolean | StagingFileCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stagingFile"]>

  export type StagingFileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalFilename?: boolean
    uploadedAt?: boolean
    status?: boolean
    rowCount?: boolean
    insertedCount?: boolean
    updatedCount?: boolean
    skippedCount?: boolean
    error?: boolean
  }, ExtArgs["result"]["stagingFile"]>

  export type StagingFileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    originalFilename?: boolean
    uploadedAt?: boolean
    status?: boolean
    rowCount?: boolean
    insertedCount?: boolean
    updatedCount?: boolean
    skippedCount?: boolean
    error?: boolean
  }, ExtArgs["result"]["stagingFile"]>

  export type StagingFileSelectScalar = {
    id?: boolean
    originalFilename?: boolean
    uploadedAt?: boolean
    status?: boolean
    rowCount?: boolean
    insertedCount?: boolean
    updatedCount?: boolean
    skippedCount?: boolean
    error?: boolean
  }

  export type StagingFileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "originalFilename" | "uploadedAt" | "status" | "rowCount" | "insertedCount" | "updatedCount" | "skippedCount" | "error", ExtArgs["result"]["stagingFile"]>
  export type StagingFileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    rows?: boolean | StagingFile$rowsArgs<ExtArgs>
    transactionLinks?: boolean | StagingFile$transactionLinksArgs<ExtArgs>
    customerBalances?: boolean | StagingFile$customerBalancesArgs<ExtArgs>
    transactionAudits?: boolean | StagingFile$transactionAuditsArgs<ExtArgs>
    _count?: boolean | StagingFileCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StagingFileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StagingFileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StagingFilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StagingFile"
    objects: {
      rows: Prisma.$StagingRowPayload<ExtArgs>[]
      transactionLinks: Prisma.$TransactionSourcePayload<ExtArgs>[]
      customerBalances: Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>[]
      transactionAudits: Prisma.$TransactionAuditPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      originalFilename: string
      uploadedAt: Date
      status: string
      rowCount: number
      insertedCount: number
      updatedCount: number
      skippedCount: number
      error: string | null
    }, ExtArgs["result"]["stagingFile"]>
    composites: {}
  }

  type StagingFileGetPayload<S extends boolean | null | undefined | StagingFileDefaultArgs> = $Result.GetResult<Prisma.$StagingFilePayload, S>

  type StagingFileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StagingFileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StagingFileCountAggregateInputType | true
    }

  export interface StagingFileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StagingFile'], meta: { name: 'StagingFile' } }
    /**
     * Find zero or one StagingFile that matches the filter.
     * @param {StagingFileFindUniqueArgs} args - Arguments to find a StagingFile
     * @example
     * // Get one StagingFile
     * const stagingFile = await prisma.stagingFile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StagingFileFindUniqueArgs>(args: SelectSubset<T, StagingFileFindUniqueArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StagingFile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StagingFileFindUniqueOrThrowArgs} args - Arguments to find a StagingFile
     * @example
     * // Get one StagingFile
     * const stagingFile = await prisma.stagingFile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StagingFileFindUniqueOrThrowArgs>(args: SelectSubset<T, StagingFileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StagingFile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingFileFindFirstArgs} args - Arguments to find a StagingFile
     * @example
     * // Get one StagingFile
     * const stagingFile = await prisma.stagingFile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StagingFileFindFirstArgs>(args?: SelectSubset<T, StagingFileFindFirstArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StagingFile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingFileFindFirstOrThrowArgs} args - Arguments to find a StagingFile
     * @example
     * // Get one StagingFile
     * const stagingFile = await prisma.stagingFile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StagingFileFindFirstOrThrowArgs>(args?: SelectSubset<T, StagingFileFindFirstOrThrowArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StagingFiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingFileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StagingFiles
     * const stagingFiles = await prisma.stagingFile.findMany()
     * 
     * // Get first 10 StagingFiles
     * const stagingFiles = await prisma.stagingFile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stagingFileWithIdOnly = await prisma.stagingFile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StagingFileFindManyArgs>(args?: SelectSubset<T, StagingFileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StagingFile.
     * @param {StagingFileCreateArgs} args - Arguments to create a StagingFile.
     * @example
     * // Create one StagingFile
     * const StagingFile = await prisma.stagingFile.create({
     *   data: {
     *     // ... data to create a StagingFile
     *   }
     * })
     * 
     */
    create<T extends StagingFileCreateArgs>(args: SelectSubset<T, StagingFileCreateArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StagingFiles.
     * @param {StagingFileCreateManyArgs} args - Arguments to create many StagingFiles.
     * @example
     * // Create many StagingFiles
     * const stagingFile = await prisma.stagingFile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StagingFileCreateManyArgs>(args?: SelectSubset<T, StagingFileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StagingFiles and returns the data saved in the database.
     * @param {StagingFileCreateManyAndReturnArgs} args - Arguments to create many StagingFiles.
     * @example
     * // Create many StagingFiles
     * const stagingFile = await prisma.stagingFile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StagingFiles and only return the `id`
     * const stagingFileWithIdOnly = await prisma.stagingFile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StagingFileCreateManyAndReturnArgs>(args?: SelectSubset<T, StagingFileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StagingFile.
     * @param {StagingFileDeleteArgs} args - Arguments to delete one StagingFile.
     * @example
     * // Delete one StagingFile
     * const StagingFile = await prisma.stagingFile.delete({
     *   where: {
     *     // ... filter to delete one StagingFile
     *   }
     * })
     * 
     */
    delete<T extends StagingFileDeleteArgs>(args: SelectSubset<T, StagingFileDeleteArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StagingFile.
     * @param {StagingFileUpdateArgs} args - Arguments to update one StagingFile.
     * @example
     * // Update one StagingFile
     * const stagingFile = await prisma.stagingFile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StagingFileUpdateArgs>(args: SelectSubset<T, StagingFileUpdateArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StagingFiles.
     * @param {StagingFileDeleteManyArgs} args - Arguments to filter StagingFiles to delete.
     * @example
     * // Delete a few StagingFiles
     * const { count } = await prisma.stagingFile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StagingFileDeleteManyArgs>(args?: SelectSubset<T, StagingFileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StagingFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingFileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StagingFiles
     * const stagingFile = await prisma.stagingFile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StagingFileUpdateManyArgs>(args: SelectSubset<T, StagingFileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StagingFiles and returns the data updated in the database.
     * @param {StagingFileUpdateManyAndReturnArgs} args - Arguments to update many StagingFiles.
     * @example
     * // Update many StagingFiles
     * const stagingFile = await prisma.stagingFile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StagingFiles and only return the `id`
     * const stagingFileWithIdOnly = await prisma.stagingFile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StagingFileUpdateManyAndReturnArgs>(args: SelectSubset<T, StagingFileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StagingFile.
     * @param {StagingFileUpsertArgs} args - Arguments to update or create a StagingFile.
     * @example
     * // Update or create a StagingFile
     * const stagingFile = await prisma.stagingFile.upsert({
     *   create: {
     *     // ... data to create a StagingFile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StagingFile we want to update
     *   }
     * })
     */
    upsert<T extends StagingFileUpsertArgs>(args: SelectSubset<T, StagingFileUpsertArgs<ExtArgs>>): Prisma__StagingFileClient<$Result.GetResult<Prisma.$StagingFilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StagingFiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingFileCountArgs} args - Arguments to filter StagingFiles to count.
     * @example
     * // Count the number of StagingFiles
     * const count = await prisma.stagingFile.count({
     *   where: {
     *     // ... the filter for the StagingFiles we want to count
     *   }
     * })
    **/
    count<T extends StagingFileCountArgs>(
      args?: Subset<T, StagingFileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StagingFileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StagingFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingFileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StagingFileAggregateArgs>(args: Subset<T, StagingFileAggregateArgs>): Prisma.PrismaPromise<GetStagingFileAggregateType<T>>

    /**
     * Group by StagingFile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StagingFileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StagingFileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StagingFileGroupByArgs['orderBy'] }
        : { orderBy?: StagingFileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StagingFileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStagingFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StagingFile model
   */
  readonly fields: StagingFileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StagingFile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StagingFileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    rows<T extends StagingFile$rowsArgs<ExtArgs> = {}>(args?: Subset<T, StagingFile$rowsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagingRowPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionLinks<T extends StagingFile$transactionLinksArgs<ExtArgs> = {}>(args?: Subset<T, StagingFile$transactionLinksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionSourcePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    customerBalances<T extends StagingFile$customerBalancesArgs<ExtArgs> = {}>(args?: Subset<T, StagingFile$customerBalancesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CustomerBalanceSnapshotPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    transactionAudits<T extends StagingFile$transactionAuditsArgs<ExtArgs> = {}>(args?: Subset<T, StagingFile$transactionAuditsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TransactionAuditPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StagingFile model
   */
  interface StagingFileFieldRefs {
    readonly id: FieldRef<"StagingFile", 'Int'>
    readonly originalFilename: FieldRef<"StagingFile", 'String'>
    readonly uploadedAt: FieldRef<"StagingFile", 'DateTime'>
    readonly status: FieldRef<"StagingFile", 'String'>
    readonly rowCount: FieldRef<"StagingFile", 'Int'>
    readonly insertedCount: FieldRef<"StagingFile", 'Int'>
    readonly updatedCount: FieldRef<"StagingFile", 'Int'>
    readonly skippedCount: FieldRef<"StagingFile", 'Int'>
    readonly error: FieldRef<"StagingFile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StagingFile findUnique
   */
  export type StagingFileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * Filter, which StagingFile to fetch.
     */
    where: StagingFileWhereUniqueInput
  }

  /**
   * StagingFile findUniqueOrThrow
   */
  export type StagingFileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * Filter, which StagingFile to fetch.
     */
    where: StagingFileWhereUniqueInput
  }

  /**
   * StagingFile findFirst
   */
  export type StagingFileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * Filter, which StagingFile to fetch.
     */
    where?: StagingFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StagingFiles to fetch.
     */
    orderBy?: StagingFileOrderByWithRelationInput | StagingFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StagingFiles.
     */
    cursor?: StagingFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StagingFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StagingFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StagingFiles.
     */
    distinct?: StagingFileScalarFieldEnum | StagingFileScalarFieldEnum[]
  }

  /**
   * StagingFile findFirstOrThrow
   */
  export type StagingFileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * Filter, which StagingFile to fetch.
     */
    where?: StagingFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StagingFiles to fetch.
     */
    orderBy?: StagingFileOrderByWithRelationInput | StagingFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StagingFiles.
     */
    cursor?: StagingFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StagingFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StagingFiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StagingFiles.
     */
    distinct?: StagingFileScalarFieldEnum | StagingFileScalarFieldEnum[]
  }

  /**
   * StagingFile findMany
   */
  export type StagingFileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * Filter, which StagingFiles to fetch.
     */
    where?: StagingFileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StagingFiles to fetch.
     */
    orderBy?: StagingFileOrderByWithRelationInput | StagingFileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StagingFiles.
     */
    cursor?: StagingFileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StagingFiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StagingFiles.
     */
    skip?: number
    distinct?: StagingFileScalarFieldEnum | StagingFileScalarFieldEnum[]
  }

  /**
   * StagingFile create
   */
  export type StagingFileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * The data needed to create a StagingFile.
     */
    data: XOR<StagingFileCreateInput, StagingFileUncheckedCreateInput>
  }

  /**
   * StagingFile createMany
   */
  export type StagingFileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StagingFiles.
     */
    data: StagingFileCreateManyInput | StagingFileCreateManyInput[]
  }

  /**
   * StagingFile createManyAndReturn
   */
  export type StagingFileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * The data used to create many StagingFiles.
     */
    data: StagingFileCreateManyInput | StagingFileCreateManyInput[]
  }

  /**
   * StagingFile update
   */
  export type StagingFileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * The data needed to update a StagingFile.
     */
    data: XOR<StagingFileUpdateInput, StagingFileUncheckedUpdateInput>
    /**
     * Choose, which StagingFile to update.
     */
    where: StagingFileWhereUniqueInput
  }

  /**
   * StagingFile updateMany
   */
  export type StagingFileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StagingFiles.
     */
    data: XOR<StagingFileUpdateManyMutationInput, StagingFileUncheckedUpdateManyInput>
    /**
     * Filter which StagingFiles to update
     */
    where?: StagingFileWhereInput
    /**
     * Limit how many StagingFiles to update.
     */
    limit?: number
  }

  /**
   * StagingFile updateManyAndReturn
   */
  export type StagingFileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * The data used to update StagingFiles.
     */
    data: XOR<StagingFileUpdateManyMutationInput, StagingFileUncheckedUpdateManyInput>
    /**
     * Filter which StagingFiles to update
     */
    where?: StagingFileWhereInput
    /**
     * Limit how many StagingFiles to update.
     */
    limit?: number
  }

  /**
   * StagingFile upsert
   */
  export type StagingFileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * The filter to search for the StagingFile to update in case it exists.
     */
    where: StagingFileWhereUniqueInput
    /**
     * In case the StagingFile found by the `where` argument doesn't exist, create a new StagingFile with this data.
     */
    create: XOR<StagingFileCreateInput, StagingFileUncheckedCreateInput>
    /**
     * In case the StagingFile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StagingFileUpdateInput, StagingFileUncheckedUpdateInput>
  }

  /**
   * StagingFile delete
   */
  export type StagingFileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
    /**
     * Filter which StagingFile to delete.
     */
    where: StagingFileWhereUniqueInput
  }

  /**
   * StagingFile deleteMany
   */
  export type StagingFileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StagingFiles to delete
     */
    where?: StagingFileWhereInput
    /**
     * Limit how many StagingFiles to delete.
     */
    limit?: number
  }

  /**
   * StagingFile.rows
   */
  export type StagingFile$rowsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingRow
     */
    select?: StagingRowSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingRow
     */
    omit?: StagingRowOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingRowInclude<ExtArgs> | null
    where?: StagingRowWhereInput
    orderBy?: StagingRowOrderByWithRelationInput | StagingRowOrderByWithRelationInput[]
    cursor?: StagingRowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StagingRowScalarFieldEnum | StagingRowScalarFieldEnum[]
  }

  /**
   * StagingFile.transactionLinks
   */
  export type StagingFile$transactionLinksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionSource
     */
    select?: TransactionSourceSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionSource
     */
    omit?: TransactionSourceOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionSourceInclude<ExtArgs> | null
    where?: TransactionSourceWhereInput
    orderBy?: TransactionSourceOrderByWithRelationInput | TransactionSourceOrderByWithRelationInput[]
    cursor?: TransactionSourceWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionSourceScalarFieldEnum | TransactionSourceScalarFieldEnum[]
  }

  /**
   * StagingFile.customerBalances
   */
  export type StagingFile$customerBalancesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CustomerBalanceSnapshot
     */
    select?: CustomerBalanceSnapshotSelect<ExtArgs> | null
    /**
     * Omit specific fields from the CustomerBalanceSnapshot
     */
    omit?: CustomerBalanceSnapshotOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CustomerBalanceSnapshotInclude<ExtArgs> | null
    where?: CustomerBalanceSnapshotWhereInput
    orderBy?: CustomerBalanceSnapshotOrderByWithRelationInput | CustomerBalanceSnapshotOrderByWithRelationInput[]
    cursor?: CustomerBalanceSnapshotWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CustomerBalanceSnapshotScalarFieldEnum | CustomerBalanceSnapshotScalarFieldEnum[]
  }

  /**
   * StagingFile.transactionAudits
   */
  export type StagingFile$transactionAuditsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TransactionAudit
     */
    select?: TransactionAuditSelect<ExtArgs> | null
    /**
     * Omit specific fields from the TransactionAudit
     */
    omit?: TransactionAuditOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TransactionAuditInclude<ExtArgs> | null
    where?: TransactionAuditWhereInput
    orderBy?: TransactionAuditOrderByWithRelationInput | TransactionAuditOrderByWithRelationInput[]
    cursor?: TransactionAuditWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TransactionAuditScalarFieldEnum | TransactionAuditScalarFieldEnum[]
  }

  /**
   * StagingFile without action
   */
  export type StagingFileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StagingFile
     */
    select?: StagingFileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StagingFile
     */
    omit?: StagingFileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StagingFileInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const StagingRowScalarFieldEnum: {
    id: 'id',
    fileId: 'fileId',
    index: 'index',
    rawJson: 'rawJson',
    rowHash: 'rowHash'
  };

  export type StagingRowScalarFieldEnum = (typeof StagingRowScalarFieldEnum)[keyof typeof StagingRowScalarFieldEnum]


  export const CustomerScalarFieldEnum: {
    id: 'id',
    code: 'code',
    name: 'name',
    phone: 'phone',
    address: 'address',
    accountType: 'accountType',
    tag1: 'tag1',
    tag2: 'tag2',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type CustomerScalarFieldEnum = (typeof CustomerScalarFieldEnum)[keyof typeof CustomerScalarFieldEnum]


  export const TransactionScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    docType: 'docType',
    txnDate: 'txnDate',
    voucherNo: 'voucherNo',
    description: 'description',
    dueDate: 'dueDate',
    amountBaseCents: 'amountBaseCents',
    discountCents: 'discountCents',
    amountNetCents: 'amountNetCents',
    vatCents: 'vatCents',
    debitCents: 'debitCents',
    creditCents: 'creditCents',
    currency: 'currency',
    naturalKey: 'naturalKey',
    rowHash: 'rowHash',
    lastFileId: 'lastFileId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type TransactionScalarFieldEnum = (typeof TransactionScalarFieldEnum)[keyof typeof TransactionScalarFieldEnum]


  export const TransactionSourceScalarFieldEnum: {
    id: 'id',
    transactionId: 'transactionId',
    fileId: 'fileId'
  };

  export type TransactionSourceScalarFieldEnum = (typeof TransactionSourceScalarFieldEnum)[keyof typeof TransactionSourceScalarFieldEnum]


  export const TransactionAuditScalarFieldEnum: {
    id: 'id',
    oldTxnId: 'oldTxnId',
    newTxnId: 'newTxnId',
    fileId: 'fileId',
    reason: 'reason',
    createdAt: 'createdAt'
  };

  export type TransactionAuditScalarFieldEnum = (typeof TransactionAuditScalarFieldEnum)[keyof typeof TransactionAuditScalarFieldEnum]


  export const CustomerBalanceSnapshotScalarFieldEnum: {
    id: 'id',
    customerId: 'customerId',
    fileId: 'fileId',
    reportedTotalDebitCents: 'reportedTotalDebitCents',
    reportedTotalCreditCents: 'reportedTotalCreditCents',
    reportedDebtBalanceCents: 'reportedDebtBalanceCents',
    reportedCreditBalanceCents: 'reportedCreditBalanceCents',
    calcTotalDebitCents: 'calcTotalDebitCents',
    calcTotalCreditCents: 'calcTotalCreditCents',
    calcDebtBalanceCents: 'calcDebtBalanceCents',
    calcCreditBalanceCents: 'calcCreditBalanceCents',
    diffTotalDebitCents: 'diffTotalDebitCents',
    diffTotalCreditCents: 'diffTotalCreditCents',
    diffDebtBalanceCents: 'diffDebtBalanceCents',
    diffCreditBalanceCents: 'diffCreditBalanceCents',
    createdAt: 'createdAt'
  };

  export type CustomerBalanceSnapshotScalarFieldEnum = (typeof CustomerBalanceSnapshotScalarFieldEnum)[keyof typeof CustomerBalanceSnapshotScalarFieldEnum]


  export const StagingFileScalarFieldEnum: {
    id: 'id',
    originalFilename: 'originalFilename',
    uploadedAt: 'uploadedAt',
    status: 'status',
    rowCount: 'rowCount',
    insertedCount: 'insertedCount',
    updatedCount: 'updatedCount',
    skippedCount: 'skippedCount',
    error: 'error'
  };

  export type StagingFileScalarFieldEnum = (typeof StagingFileScalarFieldEnum)[keyof typeof StagingFileScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type StagingRowWhereInput = {
    AND?: StagingRowWhereInput | StagingRowWhereInput[]
    OR?: StagingRowWhereInput[]
    NOT?: StagingRowWhereInput | StagingRowWhereInput[]
    id?: IntFilter<"StagingRow"> | number
    fileId?: IntFilter<"StagingRow"> | number
    index?: IntFilter<"StagingRow"> | number
    rawJson?: StringFilter<"StagingRow"> | string
    rowHash?: StringFilter<"StagingRow"> | string
    file?: XOR<StagingFileScalarRelationFilter, StagingFileWhereInput>
  }

  export type StagingRowOrderByWithRelationInput = {
    id?: SortOrder
    fileId?: SortOrder
    index?: SortOrder
    rawJson?: SortOrder
    rowHash?: SortOrder
    file?: StagingFileOrderByWithRelationInput
  }

  export type StagingRowWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    fileId_index?: StagingRowFileIdIndexCompoundUniqueInput
    AND?: StagingRowWhereInput | StagingRowWhereInput[]
    OR?: StagingRowWhereInput[]
    NOT?: StagingRowWhereInput | StagingRowWhereInput[]
    fileId?: IntFilter<"StagingRow"> | number
    index?: IntFilter<"StagingRow"> | number
    rawJson?: StringFilter<"StagingRow"> | string
    rowHash?: StringFilter<"StagingRow"> | string
    file?: XOR<StagingFileScalarRelationFilter, StagingFileWhereInput>
  }, "id" | "fileId_index">

  export type StagingRowOrderByWithAggregationInput = {
    id?: SortOrder
    fileId?: SortOrder
    index?: SortOrder
    rawJson?: SortOrder
    rowHash?: SortOrder
    _count?: StagingRowCountOrderByAggregateInput
    _avg?: StagingRowAvgOrderByAggregateInput
    _max?: StagingRowMaxOrderByAggregateInput
    _min?: StagingRowMinOrderByAggregateInput
    _sum?: StagingRowSumOrderByAggregateInput
  }

  export type StagingRowScalarWhereWithAggregatesInput = {
    AND?: StagingRowScalarWhereWithAggregatesInput | StagingRowScalarWhereWithAggregatesInput[]
    OR?: StagingRowScalarWhereWithAggregatesInput[]
    NOT?: StagingRowScalarWhereWithAggregatesInput | StagingRowScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StagingRow"> | number
    fileId?: IntWithAggregatesFilter<"StagingRow"> | number
    index?: IntWithAggregatesFilter<"StagingRow"> | number
    rawJson?: StringWithAggregatesFilter<"StagingRow"> | string
    rowHash?: StringWithAggregatesFilter<"StagingRow"> | string
  }

  export type CustomerWhereInput = {
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    id?: IntFilter<"Customer"> | number
    code?: StringFilter<"Customer"> | string
    name?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    accountType?: StringNullableFilter<"Customer"> | string | null
    tag1?: StringNullableFilter<"Customer"> | string | null
    tag2?: StringNullableFilter<"Customer"> | string | null
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    transactions?: TransactionListRelationFilter
    balances?: CustomerBalanceSnapshotListRelationFilter
  }

  export type CustomerOrderByWithRelationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    accountType?: SortOrderInput | SortOrder
    tag1?: SortOrderInput | SortOrder
    tag2?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    transactions?: TransactionOrderByRelationAggregateInput
    balances?: CustomerBalanceSnapshotOrderByRelationAggregateInput
  }

  export type CustomerWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    code?: string
    AND?: CustomerWhereInput | CustomerWhereInput[]
    OR?: CustomerWhereInput[]
    NOT?: CustomerWhereInput | CustomerWhereInput[]
    name?: StringFilter<"Customer"> | string
    phone?: StringNullableFilter<"Customer"> | string | null
    address?: StringNullableFilter<"Customer"> | string | null
    accountType?: StringNullableFilter<"Customer"> | string | null
    tag1?: StringNullableFilter<"Customer"> | string | null
    tag2?: StringNullableFilter<"Customer"> | string | null
    createdAt?: DateTimeFilter<"Customer"> | Date | string
    updatedAt?: DateTimeFilter<"Customer"> | Date | string
    transactions?: TransactionListRelationFilter
    balances?: CustomerBalanceSnapshotListRelationFilter
  }, "id" | "code">

  export type CustomerOrderByWithAggregationInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    accountType?: SortOrderInput | SortOrder
    tag1?: SortOrderInput | SortOrder
    tag2?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: CustomerCountOrderByAggregateInput
    _avg?: CustomerAvgOrderByAggregateInput
    _max?: CustomerMaxOrderByAggregateInput
    _min?: CustomerMinOrderByAggregateInput
    _sum?: CustomerSumOrderByAggregateInput
  }

  export type CustomerScalarWhereWithAggregatesInput = {
    AND?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    OR?: CustomerScalarWhereWithAggregatesInput[]
    NOT?: CustomerScalarWhereWithAggregatesInput | CustomerScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Customer"> | number
    code?: StringWithAggregatesFilter<"Customer"> | string
    name?: StringWithAggregatesFilter<"Customer"> | string
    phone?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    address?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    accountType?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    tag1?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    tag2?: StringNullableWithAggregatesFilter<"Customer"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Customer"> | Date | string
  }

  export type TransactionWhereInput = {
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    id?: IntFilter<"Transaction"> | number
    customerId?: IntFilter<"Transaction"> | number
    docType?: StringNullableFilter<"Transaction"> | string | null
    txnDate?: DateTimeFilter<"Transaction"> | Date | string
    voucherNo?: StringNullableFilter<"Transaction"> | string | null
    description?: StringNullableFilter<"Transaction"> | string | null
    dueDate?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    amountBaseCents?: IntNullableFilter<"Transaction"> | number | null
    discountCents?: IntNullableFilter<"Transaction"> | number | null
    amountNetCents?: IntNullableFilter<"Transaction"> | number | null
    vatCents?: IntNullableFilter<"Transaction"> | number | null
    debitCents?: IntFilter<"Transaction"> | number
    creditCents?: IntFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    naturalKey?: StringFilter<"Transaction"> | string
    rowHash?: StringFilter<"Transaction"> | string
    lastFileId?: IntFilter<"Transaction"> | number
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    sources?: TransactionSourceListRelationFilter
    auditsFrom?: TransactionAuditListRelationFilter
    auditsTo?: TransactionAuditListRelationFilter
  }

  export type TransactionOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    docType?: SortOrderInput | SortOrder
    txnDate?: SortOrder
    voucherNo?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    amountBaseCents?: SortOrderInput | SortOrder
    discountCents?: SortOrderInput | SortOrder
    amountNetCents?: SortOrderInput | SortOrder
    vatCents?: SortOrderInput | SortOrder
    debitCents?: SortOrder
    creditCents?: SortOrder
    currency?: SortOrder
    naturalKey?: SortOrder
    rowHash?: SortOrder
    lastFileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    sources?: TransactionSourceOrderByRelationAggregateInput
    auditsFrom?: TransactionAuditOrderByRelationAggregateInput
    auditsTo?: TransactionAuditOrderByRelationAggregateInput
  }

  export type TransactionWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    naturalKey?: string
    AND?: TransactionWhereInput | TransactionWhereInput[]
    OR?: TransactionWhereInput[]
    NOT?: TransactionWhereInput | TransactionWhereInput[]
    customerId?: IntFilter<"Transaction"> | number
    docType?: StringNullableFilter<"Transaction"> | string | null
    txnDate?: DateTimeFilter<"Transaction"> | Date | string
    voucherNo?: StringNullableFilter<"Transaction"> | string | null
    description?: StringNullableFilter<"Transaction"> | string | null
    dueDate?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    amountBaseCents?: IntNullableFilter<"Transaction"> | number | null
    discountCents?: IntNullableFilter<"Transaction"> | number | null
    amountNetCents?: IntNullableFilter<"Transaction"> | number | null
    vatCents?: IntNullableFilter<"Transaction"> | number | null
    debitCents?: IntFilter<"Transaction"> | number
    creditCents?: IntFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    rowHash?: StringFilter<"Transaction"> | string
    lastFileId?: IntFilter<"Transaction"> | number
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    sources?: TransactionSourceListRelationFilter
    auditsFrom?: TransactionAuditListRelationFilter
    auditsTo?: TransactionAuditListRelationFilter
  }, "id" | "naturalKey">

  export type TransactionOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    docType?: SortOrderInput | SortOrder
    txnDate?: SortOrder
    voucherNo?: SortOrderInput | SortOrder
    description?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    amountBaseCents?: SortOrderInput | SortOrder
    discountCents?: SortOrderInput | SortOrder
    amountNetCents?: SortOrderInput | SortOrder
    vatCents?: SortOrderInput | SortOrder
    debitCents?: SortOrder
    creditCents?: SortOrder
    currency?: SortOrder
    naturalKey?: SortOrder
    rowHash?: SortOrder
    lastFileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: TransactionCountOrderByAggregateInput
    _avg?: TransactionAvgOrderByAggregateInput
    _max?: TransactionMaxOrderByAggregateInput
    _min?: TransactionMinOrderByAggregateInput
    _sum?: TransactionSumOrderByAggregateInput
  }

  export type TransactionScalarWhereWithAggregatesInput = {
    AND?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    OR?: TransactionScalarWhereWithAggregatesInput[]
    NOT?: TransactionScalarWhereWithAggregatesInput | TransactionScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Transaction"> | number
    customerId?: IntWithAggregatesFilter<"Transaction"> | number
    docType?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    txnDate?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    voucherNo?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    description?: StringNullableWithAggregatesFilter<"Transaction"> | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"Transaction"> | Date | string | null
    amountBaseCents?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    discountCents?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    amountNetCents?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    vatCents?: IntNullableWithAggregatesFilter<"Transaction"> | number | null
    debitCents?: IntWithAggregatesFilter<"Transaction"> | number
    creditCents?: IntWithAggregatesFilter<"Transaction"> | number
    currency?: StringWithAggregatesFilter<"Transaction"> | string
    naturalKey?: StringWithAggregatesFilter<"Transaction"> | string
    rowHash?: StringWithAggregatesFilter<"Transaction"> | string
    lastFileId?: IntWithAggregatesFilter<"Transaction"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Transaction"> | Date | string
  }

  export type TransactionSourceWhereInput = {
    AND?: TransactionSourceWhereInput | TransactionSourceWhereInput[]
    OR?: TransactionSourceWhereInput[]
    NOT?: TransactionSourceWhereInput | TransactionSourceWhereInput[]
    id?: IntFilter<"TransactionSource"> | number
    transactionId?: IntFilter<"TransactionSource"> | number
    fileId?: IntFilter<"TransactionSource"> | number
    transaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
    file?: XOR<StagingFileScalarRelationFilter, StagingFileWhereInput>
  }

  export type TransactionSourceOrderByWithRelationInput = {
    id?: SortOrder
    transactionId?: SortOrder
    fileId?: SortOrder
    transaction?: TransactionOrderByWithRelationInput
    file?: StagingFileOrderByWithRelationInput
  }

  export type TransactionSourceWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransactionSourceWhereInput | TransactionSourceWhereInput[]
    OR?: TransactionSourceWhereInput[]
    NOT?: TransactionSourceWhereInput | TransactionSourceWhereInput[]
    transactionId?: IntFilter<"TransactionSource"> | number
    fileId?: IntFilter<"TransactionSource"> | number
    transaction?: XOR<TransactionScalarRelationFilter, TransactionWhereInput>
    file?: XOR<StagingFileScalarRelationFilter, StagingFileWhereInput>
  }, "id">

  export type TransactionSourceOrderByWithAggregationInput = {
    id?: SortOrder
    transactionId?: SortOrder
    fileId?: SortOrder
    _count?: TransactionSourceCountOrderByAggregateInput
    _avg?: TransactionSourceAvgOrderByAggregateInput
    _max?: TransactionSourceMaxOrderByAggregateInput
    _min?: TransactionSourceMinOrderByAggregateInput
    _sum?: TransactionSourceSumOrderByAggregateInput
  }

  export type TransactionSourceScalarWhereWithAggregatesInput = {
    AND?: TransactionSourceScalarWhereWithAggregatesInput | TransactionSourceScalarWhereWithAggregatesInput[]
    OR?: TransactionSourceScalarWhereWithAggregatesInput[]
    NOT?: TransactionSourceScalarWhereWithAggregatesInput | TransactionSourceScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TransactionSource"> | number
    transactionId?: IntWithAggregatesFilter<"TransactionSource"> | number
    fileId?: IntWithAggregatesFilter<"TransactionSource"> | number
  }

  export type TransactionAuditWhereInput = {
    AND?: TransactionAuditWhereInput | TransactionAuditWhereInput[]
    OR?: TransactionAuditWhereInput[]
    NOT?: TransactionAuditWhereInput | TransactionAuditWhereInput[]
    id?: IntFilter<"TransactionAudit"> | number
    oldTxnId?: IntNullableFilter<"TransactionAudit"> | number | null
    newTxnId?: IntNullableFilter<"TransactionAudit"> | number | null
    fileId?: IntFilter<"TransactionAudit"> | number
    reason?: StringFilter<"TransactionAudit"> | string
    createdAt?: DateTimeFilter<"TransactionAudit"> | Date | string
    oldTxn?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
    newTxn?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
    file?: XOR<StagingFileScalarRelationFilter, StagingFileWhereInput>
  }

  export type TransactionAuditOrderByWithRelationInput = {
    id?: SortOrder
    oldTxnId?: SortOrderInput | SortOrder
    newTxnId?: SortOrderInput | SortOrder
    fileId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    oldTxn?: TransactionOrderByWithRelationInput
    newTxn?: TransactionOrderByWithRelationInput
    file?: StagingFileOrderByWithRelationInput
  }

  export type TransactionAuditWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TransactionAuditWhereInput | TransactionAuditWhereInput[]
    OR?: TransactionAuditWhereInput[]
    NOT?: TransactionAuditWhereInput | TransactionAuditWhereInput[]
    oldTxnId?: IntNullableFilter<"TransactionAudit"> | number | null
    newTxnId?: IntNullableFilter<"TransactionAudit"> | number | null
    fileId?: IntFilter<"TransactionAudit"> | number
    reason?: StringFilter<"TransactionAudit"> | string
    createdAt?: DateTimeFilter<"TransactionAudit"> | Date | string
    oldTxn?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
    newTxn?: XOR<TransactionNullableScalarRelationFilter, TransactionWhereInput> | null
    file?: XOR<StagingFileScalarRelationFilter, StagingFileWhereInput>
  }, "id">

  export type TransactionAuditOrderByWithAggregationInput = {
    id?: SortOrder
    oldTxnId?: SortOrderInput | SortOrder
    newTxnId?: SortOrderInput | SortOrder
    fileId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
    _count?: TransactionAuditCountOrderByAggregateInput
    _avg?: TransactionAuditAvgOrderByAggregateInput
    _max?: TransactionAuditMaxOrderByAggregateInput
    _min?: TransactionAuditMinOrderByAggregateInput
    _sum?: TransactionAuditSumOrderByAggregateInput
  }

  export type TransactionAuditScalarWhereWithAggregatesInput = {
    AND?: TransactionAuditScalarWhereWithAggregatesInput | TransactionAuditScalarWhereWithAggregatesInput[]
    OR?: TransactionAuditScalarWhereWithAggregatesInput[]
    NOT?: TransactionAuditScalarWhereWithAggregatesInput | TransactionAuditScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"TransactionAudit"> | number
    oldTxnId?: IntNullableWithAggregatesFilter<"TransactionAudit"> | number | null
    newTxnId?: IntNullableWithAggregatesFilter<"TransactionAudit"> | number | null
    fileId?: IntWithAggregatesFilter<"TransactionAudit"> | number
    reason?: StringWithAggregatesFilter<"TransactionAudit"> | string
    createdAt?: DateTimeWithAggregatesFilter<"TransactionAudit"> | Date | string
  }

  export type CustomerBalanceSnapshotWhereInput = {
    AND?: CustomerBalanceSnapshotWhereInput | CustomerBalanceSnapshotWhereInput[]
    OR?: CustomerBalanceSnapshotWhereInput[]
    NOT?: CustomerBalanceSnapshotWhereInput | CustomerBalanceSnapshotWhereInput[]
    id?: IntFilter<"CustomerBalanceSnapshot"> | number
    customerId?: IntFilter<"CustomerBalanceSnapshot"> | number
    fileId?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    createdAt?: DateTimeFilter<"CustomerBalanceSnapshot"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    file?: XOR<StagingFileScalarRelationFilter, StagingFileWhereInput>
  }

  export type CustomerBalanceSnapshotOrderByWithRelationInput = {
    id?: SortOrder
    customerId?: SortOrder
    fileId?: SortOrder
    reportedTotalDebitCents?: SortOrder
    reportedTotalCreditCents?: SortOrder
    reportedDebtBalanceCents?: SortOrder
    reportedCreditBalanceCents?: SortOrder
    calcTotalDebitCents?: SortOrder
    calcTotalCreditCents?: SortOrder
    calcDebtBalanceCents?: SortOrder
    calcCreditBalanceCents?: SortOrder
    diffTotalDebitCents?: SortOrder
    diffTotalCreditCents?: SortOrder
    diffDebtBalanceCents?: SortOrder
    diffCreditBalanceCents?: SortOrder
    createdAt?: SortOrder
    customer?: CustomerOrderByWithRelationInput
    file?: StagingFileOrderByWithRelationInput
  }

  export type CustomerBalanceSnapshotWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    customerId_fileId?: CustomerBalanceSnapshotCustomerIdFileIdCompoundUniqueInput
    AND?: CustomerBalanceSnapshotWhereInput | CustomerBalanceSnapshotWhereInput[]
    OR?: CustomerBalanceSnapshotWhereInput[]
    NOT?: CustomerBalanceSnapshotWhereInput | CustomerBalanceSnapshotWhereInput[]
    customerId?: IntFilter<"CustomerBalanceSnapshot"> | number
    fileId?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    createdAt?: DateTimeFilter<"CustomerBalanceSnapshot"> | Date | string
    customer?: XOR<CustomerScalarRelationFilter, CustomerWhereInput>
    file?: XOR<StagingFileScalarRelationFilter, StagingFileWhereInput>
  }, "id" | "customerId_fileId">

  export type CustomerBalanceSnapshotOrderByWithAggregationInput = {
    id?: SortOrder
    customerId?: SortOrder
    fileId?: SortOrder
    reportedTotalDebitCents?: SortOrder
    reportedTotalCreditCents?: SortOrder
    reportedDebtBalanceCents?: SortOrder
    reportedCreditBalanceCents?: SortOrder
    calcTotalDebitCents?: SortOrder
    calcTotalCreditCents?: SortOrder
    calcDebtBalanceCents?: SortOrder
    calcCreditBalanceCents?: SortOrder
    diffTotalDebitCents?: SortOrder
    diffTotalCreditCents?: SortOrder
    diffDebtBalanceCents?: SortOrder
    diffCreditBalanceCents?: SortOrder
    createdAt?: SortOrder
    _count?: CustomerBalanceSnapshotCountOrderByAggregateInput
    _avg?: CustomerBalanceSnapshotAvgOrderByAggregateInput
    _max?: CustomerBalanceSnapshotMaxOrderByAggregateInput
    _min?: CustomerBalanceSnapshotMinOrderByAggregateInput
    _sum?: CustomerBalanceSnapshotSumOrderByAggregateInput
  }

  export type CustomerBalanceSnapshotScalarWhereWithAggregatesInput = {
    AND?: CustomerBalanceSnapshotScalarWhereWithAggregatesInput | CustomerBalanceSnapshotScalarWhereWithAggregatesInput[]
    OR?: CustomerBalanceSnapshotScalarWhereWithAggregatesInput[]
    NOT?: CustomerBalanceSnapshotScalarWhereWithAggregatesInput | CustomerBalanceSnapshotScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    customerId?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    fileId?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    reportedTotalDebitCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    reportedTotalCreditCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    reportedDebtBalanceCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    reportedCreditBalanceCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    calcTotalDebitCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    calcTotalCreditCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    calcDebtBalanceCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    calcCreditBalanceCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    diffTotalDebitCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    diffTotalCreditCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    diffDebtBalanceCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    diffCreditBalanceCents?: IntWithAggregatesFilter<"CustomerBalanceSnapshot"> | number
    createdAt?: DateTimeWithAggregatesFilter<"CustomerBalanceSnapshot"> | Date | string
  }

  export type StagingFileWhereInput = {
    AND?: StagingFileWhereInput | StagingFileWhereInput[]
    OR?: StagingFileWhereInput[]
    NOT?: StagingFileWhereInput | StagingFileWhereInput[]
    id?: IntFilter<"StagingFile"> | number
    originalFilename?: StringFilter<"StagingFile"> | string
    uploadedAt?: DateTimeFilter<"StagingFile"> | Date | string
    status?: StringFilter<"StagingFile"> | string
    rowCount?: IntFilter<"StagingFile"> | number
    insertedCount?: IntFilter<"StagingFile"> | number
    updatedCount?: IntFilter<"StagingFile"> | number
    skippedCount?: IntFilter<"StagingFile"> | number
    error?: StringNullableFilter<"StagingFile"> | string | null
    rows?: StagingRowListRelationFilter
    transactionLinks?: TransactionSourceListRelationFilter
    customerBalances?: CustomerBalanceSnapshotListRelationFilter
    transactionAudits?: TransactionAuditListRelationFilter
  }

  export type StagingFileOrderByWithRelationInput = {
    id?: SortOrder
    originalFilename?: SortOrder
    uploadedAt?: SortOrder
    status?: SortOrder
    rowCount?: SortOrder
    insertedCount?: SortOrder
    updatedCount?: SortOrder
    skippedCount?: SortOrder
    error?: SortOrderInput | SortOrder
    rows?: StagingRowOrderByRelationAggregateInput
    transactionLinks?: TransactionSourceOrderByRelationAggregateInput
    customerBalances?: CustomerBalanceSnapshotOrderByRelationAggregateInput
    transactionAudits?: TransactionAuditOrderByRelationAggregateInput
  }

  export type StagingFileWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: StagingFileWhereInput | StagingFileWhereInput[]
    OR?: StagingFileWhereInput[]
    NOT?: StagingFileWhereInput | StagingFileWhereInput[]
    originalFilename?: StringFilter<"StagingFile"> | string
    uploadedAt?: DateTimeFilter<"StagingFile"> | Date | string
    status?: StringFilter<"StagingFile"> | string
    rowCount?: IntFilter<"StagingFile"> | number
    insertedCount?: IntFilter<"StagingFile"> | number
    updatedCount?: IntFilter<"StagingFile"> | number
    skippedCount?: IntFilter<"StagingFile"> | number
    error?: StringNullableFilter<"StagingFile"> | string | null
    rows?: StagingRowListRelationFilter
    transactionLinks?: TransactionSourceListRelationFilter
    customerBalances?: CustomerBalanceSnapshotListRelationFilter
    transactionAudits?: TransactionAuditListRelationFilter
  }, "id">

  export type StagingFileOrderByWithAggregationInput = {
    id?: SortOrder
    originalFilename?: SortOrder
    uploadedAt?: SortOrder
    status?: SortOrder
    rowCount?: SortOrder
    insertedCount?: SortOrder
    updatedCount?: SortOrder
    skippedCount?: SortOrder
    error?: SortOrderInput | SortOrder
    _count?: StagingFileCountOrderByAggregateInput
    _avg?: StagingFileAvgOrderByAggregateInput
    _max?: StagingFileMaxOrderByAggregateInput
    _min?: StagingFileMinOrderByAggregateInput
    _sum?: StagingFileSumOrderByAggregateInput
  }

  export type StagingFileScalarWhereWithAggregatesInput = {
    AND?: StagingFileScalarWhereWithAggregatesInput | StagingFileScalarWhereWithAggregatesInput[]
    OR?: StagingFileScalarWhereWithAggregatesInput[]
    NOT?: StagingFileScalarWhereWithAggregatesInput | StagingFileScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"StagingFile"> | number
    originalFilename?: StringWithAggregatesFilter<"StagingFile"> | string
    uploadedAt?: DateTimeWithAggregatesFilter<"StagingFile"> | Date | string
    status?: StringWithAggregatesFilter<"StagingFile"> | string
    rowCount?: IntWithAggregatesFilter<"StagingFile"> | number
    insertedCount?: IntWithAggregatesFilter<"StagingFile"> | number
    updatedCount?: IntWithAggregatesFilter<"StagingFile"> | number
    skippedCount?: IntWithAggregatesFilter<"StagingFile"> | number
    error?: StringNullableWithAggregatesFilter<"StagingFile"> | string | null
  }

  export type StagingRowCreateInput = {
    index: number
    rawJson: string
    rowHash: string
    file: StagingFileCreateNestedOneWithoutRowsInput
  }

  export type StagingRowUncheckedCreateInput = {
    id?: number
    fileId: number
    index: number
    rawJson: string
    rowHash: string
  }

  export type StagingRowUpdateInput = {
    index?: IntFieldUpdateOperationsInput | number
    rawJson?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    file?: StagingFileUpdateOneRequiredWithoutRowsNestedInput
  }

  export type StagingRowUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    rawJson?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
  }

  export type StagingRowCreateManyInput = {
    id?: number
    fileId: number
    index: number
    rawJson: string
    rowHash: string
  }

  export type StagingRowUpdateManyMutationInput = {
    index?: IntFieldUpdateOperationsInput | number
    rawJson?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
  }

  export type StagingRowUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    rawJson?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
  }

  export type CustomerCreateInput = {
    code: string
    name: string
    phone?: string | null
    address?: string | null
    accountType?: string | null
    tag1?: string | null
    tag2?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
    balances?: CustomerBalanceSnapshotCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateInput = {
    id?: number
    code: string
    name: string
    phone?: string | null
    address?: string | null
    accountType?: string | null
    tag1?: string | null
    tag2?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
    balances?: CustomerBalanceSnapshotUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUpdateInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
    balances?: CustomerBalanceSnapshotUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
    balances?: CustomerBalanceSnapshotUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerCreateManyInput = {
    id?: number
    code: string
    name: string
    phone?: string | null
    address?: string | null
    accountType?: string | null
    tag1?: string | null
    tag2?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerUpdateManyMutationInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionCreateInput = {
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    sources?: TransactionSourceCreateNestedManyWithoutTransactionInput
    auditsFrom?: TransactionAuditCreateNestedManyWithoutOldTxnInput
    auditsTo?: TransactionAuditCreateNestedManyWithoutNewTxnInput
  }

  export type TransactionUncheckedCreateInput = {
    id?: number
    customerId: number
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sources?: TransactionSourceUncheckedCreateNestedManyWithoutTransactionInput
    auditsFrom?: TransactionAuditUncheckedCreateNestedManyWithoutOldTxnInput
    auditsTo?: TransactionAuditUncheckedCreateNestedManyWithoutNewTxnInput
  }

  export type TransactionUpdateInput = {
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    sources?: TransactionSourceUpdateManyWithoutTransactionNestedInput
    auditsFrom?: TransactionAuditUpdateManyWithoutOldTxnNestedInput
    auditsTo?: TransactionAuditUpdateManyWithoutNewTxnNestedInput
  }

  export type TransactionUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sources?: TransactionSourceUncheckedUpdateManyWithoutTransactionNestedInput
    auditsFrom?: TransactionAuditUncheckedUpdateManyWithoutOldTxnNestedInput
    auditsTo?: TransactionAuditUncheckedUpdateManyWithoutNewTxnNestedInput
  }

  export type TransactionCreateManyInput = {
    id?: number
    customerId: number
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type TransactionUpdateManyMutationInput = {
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionSourceCreateInput = {
    transaction: TransactionCreateNestedOneWithoutSourcesInput
    file: StagingFileCreateNestedOneWithoutTransactionLinksInput
  }

  export type TransactionSourceUncheckedCreateInput = {
    id?: number
    transactionId: number
    fileId: number
  }

  export type TransactionSourceUpdateInput = {
    transaction?: TransactionUpdateOneRequiredWithoutSourcesNestedInput
    file?: StagingFileUpdateOneRequiredWithoutTransactionLinksNestedInput
  }

  export type TransactionSourceUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    transactionId?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionSourceCreateManyInput = {
    id?: number
    transactionId: number
    fileId: number
  }

  export type TransactionSourceUpdateManyMutationInput = {

  }

  export type TransactionSourceUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    transactionId?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionAuditCreateInput = {
    reason: string
    createdAt?: Date | string
    oldTxn?: TransactionCreateNestedOneWithoutAuditsFromInput
    newTxn?: TransactionCreateNestedOneWithoutAuditsToInput
    file: StagingFileCreateNestedOneWithoutTransactionAuditsInput
  }

  export type TransactionAuditUncheckedCreateInput = {
    id?: number
    oldTxnId?: number | null
    newTxnId?: number | null
    fileId: number
    reason: string
    createdAt?: Date | string
  }

  export type TransactionAuditUpdateInput = {
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldTxn?: TransactionUpdateOneWithoutAuditsFromNestedInput
    newTxn?: TransactionUpdateOneWithoutAuditsToNestedInput
    file?: StagingFileUpdateOneRequiredWithoutTransactionAuditsNestedInput
  }

  export type TransactionAuditUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    newTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    fileId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionAuditCreateManyInput = {
    id?: number
    oldTxnId?: number | null
    newTxnId?: number | null
    fileId: number
    reason: string
    createdAt?: Date | string
  }

  export type TransactionAuditUpdateManyMutationInput = {
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionAuditUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    newTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    fileId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerBalanceSnapshotCreateInput = {
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutBalancesInput
    file: StagingFileCreateNestedOneWithoutCustomerBalancesInput
  }

  export type CustomerBalanceSnapshotUncheckedCreateInput = {
    id?: number
    customerId: number
    fileId: number
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
  }

  export type CustomerBalanceSnapshotUpdateInput = {
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutBalancesNestedInput
    file?: StagingFileUpdateOneRequiredWithoutCustomerBalancesNestedInput
  }

  export type CustomerBalanceSnapshotUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerBalanceSnapshotCreateManyInput = {
    id?: number
    customerId: number
    fileId: number
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
  }

  export type CustomerBalanceSnapshotUpdateManyMutationInput = {
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerBalanceSnapshotUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StagingFileCreateInput = {
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    rows?: StagingRowCreateNestedManyWithoutFileInput
    transactionLinks?: TransactionSourceCreateNestedManyWithoutFileInput
    customerBalances?: CustomerBalanceSnapshotCreateNestedManyWithoutFileInput
    transactionAudits?: TransactionAuditCreateNestedManyWithoutFileInput
  }

  export type StagingFileUncheckedCreateInput = {
    id?: number
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    rows?: StagingRowUncheckedCreateNestedManyWithoutFileInput
    transactionLinks?: TransactionSourceUncheckedCreateNestedManyWithoutFileInput
    customerBalances?: CustomerBalanceSnapshotUncheckedCreateNestedManyWithoutFileInput
    transactionAudits?: TransactionAuditUncheckedCreateNestedManyWithoutFileInput
  }

  export type StagingFileUpdateInput = {
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    rows?: StagingRowUpdateManyWithoutFileNestedInput
    transactionLinks?: TransactionSourceUpdateManyWithoutFileNestedInput
    customerBalances?: CustomerBalanceSnapshotUpdateManyWithoutFileNestedInput
    transactionAudits?: TransactionAuditUpdateManyWithoutFileNestedInput
  }

  export type StagingFileUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    rows?: StagingRowUncheckedUpdateManyWithoutFileNestedInput
    transactionLinks?: TransactionSourceUncheckedUpdateManyWithoutFileNestedInput
    customerBalances?: CustomerBalanceSnapshotUncheckedUpdateManyWithoutFileNestedInput
    transactionAudits?: TransactionAuditUncheckedUpdateManyWithoutFileNestedInput
  }

  export type StagingFileCreateManyInput = {
    id?: number
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
  }

  export type StagingFileUpdateManyMutationInput = {
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StagingFileUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StagingFileScalarRelationFilter = {
    is?: StagingFileWhereInput
    isNot?: StagingFileWhereInput
  }

  export type StagingRowFileIdIndexCompoundUniqueInput = {
    fileId: number
    index: number
  }

  export type StagingRowCountOrderByAggregateInput = {
    id?: SortOrder
    fileId?: SortOrder
    index?: SortOrder
    rawJson?: SortOrder
    rowHash?: SortOrder
  }

  export type StagingRowAvgOrderByAggregateInput = {
    id?: SortOrder
    fileId?: SortOrder
    index?: SortOrder
  }

  export type StagingRowMaxOrderByAggregateInput = {
    id?: SortOrder
    fileId?: SortOrder
    index?: SortOrder
    rawJson?: SortOrder
    rowHash?: SortOrder
  }

  export type StagingRowMinOrderByAggregateInput = {
    id?: SortOrder
    fileId?: SortOrder
    index?: SortOrder
    rawJson?: SortOrder
    rowHash?: SortOrder
  }

  export type StagingRowSumOrderByAggregateInput = {
    id?: SortOrder
    fileId?: SortOrder
    index?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type TransactionListRelationFilter = {
    every?: TransactionWhereInput
    some?: TransactionWhereInput
    none?: TransactionWhereInput
  }

  export type CustomerBalanceSnapshotListRelationFilter = {
    every?: CustomerBalanceSnapshotWhereInput
    some?: CustomerBalanceSnapshotWhereInput
    none?: CustomerBalanceSnapshotWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TransactionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerBalanceSnapshotOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CustomerCountOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    accountType?: SortOrder
    tag1?: SortOrder
    tag2?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type CustomerMaxOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    accountType?: SortOrder
    tag1?: SortOrder
    tag2?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerMinOrderByAggregateInput = {
    id?: SortOrder
    code?: SortOrder
    name?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    accountType?: SortOrder
    tag1?: SortOrder
    tag2?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type CustomerSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type CustomerScalarRelationFilter = {
    is?: CustomerWhereInput
    isNot?: CustomerWhereInput
  }

  export type TransactionSourceListRelationFilter = {
    every?: TransactionSourceWhereInput
    some?: TransactionSourceWhereInput
    none?: TransactionSourceWhereInput
  }

  export type TransactionAuditListRelationFilter = {
    every?: TransactionAuditWhereInput
    some?: TransactionAuditWhereInput
    none?: TransactionAuditWhereInput
  }

  export type TransactionSourceOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionAuditOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TransactionCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    docType?: SortOrder
    txnDate?: SortOrder
    voucherNo?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    amountBaseCents?: SortOrder
    discountCents?: SortOrder
    amountNetCents?: SortOrder
    vatCents?: SortOrder
    debitCents?: SortOrder
    creditCents?: SortOrder
    currency?: SortOrder
    naturalKey?: SortOrder
    rowHash?: SortOrder
    lastFileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    amountBaseCents?: SortOrder
    discountCents?: SortOrder
    amountNetCents?: SortOrder
    vatCents?: SortOrder
    debitCents?: SortOrder
    creditCents?: SortOrder
    lastFileId?: SortOrder
  }

  export type TransactionMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    docType?: SortOrder
    txnDate?: SortOrder
    voucherNo?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    amountBaseCents?: SortOrder
    discountCents?: SortOrder
    amountNetCents?: SortOrder
    vatCents?: SortOrder
    debitCents?: SortOrder
    creditCents?: SortOrder
    currency?: SortOrder
    naturalKey?: SortOrder
    rowHash?: SortOrder
    lastFileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    docType?: SortOrder
    txnDate?: SortOrder
    voucherNo?: SortOrder
    description?: SortOrder
    dueDate?: SortOrder
    amountBaseCents?: SortOrder
    discountCents?: SortOrder
    amountNetCents?: SortOrder
    vatCents?: SortOrder
    debitCents?: SortOrder
    creditCents?: SortOrder
    currency?: SortOrder
    naturalKey?: SortOrder
    rowHash?: SortOrder
    lastFileId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type TransactionSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    amountBaseCents?: SortOrder
    discountCents?: SortOrder
    amountNetCents?: SortOrder
    vatCents?: SortOrder
    debitCents?: SortOrder
    creditCents?: SortOrder
    lastFileId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type TransactionScalarRelationFilter = {
    is?: TransactionWhereInput
    isNot?: TransactionWhereInput
  }

  export type TransactionSourceCountOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    fileId?: SortOrder
  }

  export type TransactionSourceAvgOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    fileId?: SortOrder
  }

  export type TransactionSourceMaxOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    fileId?: SortOrder
  }

  export type TransactionSourceMinOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    fileId?: SortOrder
  }

  export type TransactionSourceSumOrderByAggregateInput = {
    id?: SortOrder
    transactionId?: SortOrder
    fileId?: SortOrder
  }

  export type TransactionNullableScalarRelationFilter = {
    is?: TransactionWhereInput | null
    isNot?: TransactionWhereInput | null
  }

  export type TransactionAuditCountOrderByAggregateInput = {
    id?: SortOrder
    oldTxnId?: SortOrder
    newTxnId?: SortOrder
    fileId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionAuditAvgOrderByAggregateInput = {
    id?: SortOrder
    oldTxnId?: SortOrder
    newTxnId?: SortOrder
    fileId?: SortOrder
  }

  export type TransactionAuditMaxOrderByAggregateInput = {
    id?: SortOrder
    oldTxnId?: SortOrder
    newTxnId?: SortOrder
    fileId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionAuditMinOrderByAggregateInput = {
    id?: SortOrder
    oldTxnId?: SortOrder
    newTxnId?: SortOrder
    fileId?: SortOrder
    reason?: SortOrder
    createdAt?: SortOrder
  }

  export type TransactionAuditSumOrderByAggregateInput = {
    id?: SortOrder
    oldTxnId?: SortOrder
    newTxnId?: SortOrder
    fileId?: SortOrder
  }

  export type CustomerBalanceSnapshotCustomerIdFileIdCompoundUniqueInput = {
    customerId: number
    fileId: number
  }

  export type CustomerBalanceSnapshotCountOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    fileId?: SortOrder
    reportedTotalDebitCents?: SortOrder
    reportedTotalCreditCents?: SortOrder
    reportedDebtBalanceCents?: SortOrder
    reportedCreditBalanceCents?: SortOrder
    calcTotalDebitCents?: SortOrder
    calcTotalCreditCents?: SortOrder
    calcDebtBalanceCents?: SortOrder
    calcCreditBalanceCents?: SortOrder
    diffTotalDebitCents?: SortOrder
    diffTotalCreditCents?: SortOrder
    diffDebtBalanceCents?: SortOrder
    diffCreditBalanceCents?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerBalanceSnapshotAvgOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    fileId?: SortOrder
    reportedTotalDebitCents?: SortOrder
    reportedTotalCreditCents?: SortOrder
    reportedDebtBalanceCents?: SortOrder
    reportedCreditBalanceCents?: SortOrder
    calcTotalDebitCents?: SortOrder
    calcTotalCreditCents?: SortOrder
    calcDebtBalanceCents?: SortOrder
    calcCreditBalanceCents?: SortOrder
    diffTotalDebitCents?: SortOrder
    diffTotalCreditCents?: SortOrder
    diffDebtBalanceCents?: SortOrder
    diffCreditBalanceCents?: SortOrder
  }

  export type CustomerBalanceSnapshotMaxOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    fileId?: SortOrder
    reportedTotalDebitCents?: SortOrder
    reportedTotalCreditCents?: SortOrder
    reportedDebtBalanceCents?: SortOrder
    reportedCreditBalanceCents?: SortOrder
    calcTotalDebitCents?: SortOrder
    calcTotalCreditCents?: SortOrder
    calcDebtBalanceCents?: SortOrder
    calcCreditBalanceCents?: SortOrder
    diffTotalDebitCents?: SortOrder
    diffTotalCreditCents?: SortOrder
    diffDebtBalanceCents?: SortOrder
    diffCreditBalanceCents?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerBalanceSnapshotMinOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    fileId?: SortOrder
    reportedTotalDebitCents?: SortOrder
    reportedTotalCreditCents?: SortOrder
    reportedDebtBalanceCents?: SortOrder
    reportedCreditBalanceCents?: SortOrder
    calcTotalDebitCents?: SortOrder
    calcTotalCreditCents?: SortOrder
    calcDebtBalanceCents?: SortOrder
    calcCreditBalanceCents?: SortOrder
    diffTotalDebitCents?: SortOrder
    diffTotalCreditCents?: SortOrder
    diffDebtBalanceCents?: SortOrder
    diffCreditBalanceCents?: SortOrder
    createdAt?: SortOrder
  }

  export type CustomerBalanceSnapshotSumOrderByAggregateInput = {
    id?: SortOrder
    customerId?: SortOrder
    fileId?: SortOrder
    reportedTotalDebitCents?: SortOrder
    reportedTotalCreditCents?: SortOrder
    reportedDebtBalanceCents?: SortOrder
    reportedCreditBalanceCents?: SortOrder
    calcTotalDebitCents?: SortOrder
    calcTotalCreditCents?: SortOrder
    calcDebtBalanceCents?: SortOrder
    calcCreditBalanceCents?: SortOrder
    diffTotalDebitCents?: SortOrder
    diffTotalCreditCents?: SortOrder
    diffDebtBalanceCents?: SortOrder
    diffCreditBalanceCents?: SortOrder
  }

  export type StagingRowListRelationFilter = {
    every?: StagingRowWhereInput
    some?: StagingRowWhereInput
    none?: StagingRowWhereInput
  }

  export type StagingRowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StagingFileCountOrderByAggregateInput = {
    id?: SortOrder
    originalFilename?: SortOrder
    uploadedAt?: SortOrder
    status?: SortOrder
    rowCount?: SortOrder
    insertedCount?: SortOrder
    updatedCount?: SortOrder
    skippedCount?: SortOrder
    error?: SortOrder
  }

  export type StagingFileAvgOrderByAggregateInput = {
    id?: SortOrder
    rowCount?: SortOrder
    insertedCount?: SortOrder
    updatedCount?: SortOrder
    skippedCount?: SortOrder
  }

  export type StagingFileMaxOrderByAggregateInput = {
    id?: SortOrder
    originalFilename?: SortOrder
    uploadedAt?: SortOrder
    status?: SortOrder
    rowCount?: SortOrder
    insertedCount?: SortOrder
    updatedCount?: SortOrder
    skippedCount?: SortOrder
    error?: SortOrder
  }

  export type StagingFileMinOrderByAggregateInput = {
    id?: SortOrder
    originalFilename?: SortOrder
    uploadedAt?: SortOrder
    status?: SortOrder
    rowCount?: SortOrder
    insertedCount?: SortOrder
    updatedCount?: SortOrder
    skippedCount?: SortOrder
    error?: SortOrder
  }

  export type StagingFileSumOrderByAggregateInput = {
    id?: SortOrder
    rowCount?: SortOrder
    insertedCount?: SortOrder
    updatedCount?: SortOrder
    skippedCount?: SortOrder
  }

  export type StagingFileCreateNestedOneWithoutRowsInput = {
    create?: XOR<StagingFileCreateWithoutRowsInput, StagingFileUncheckedCreateWithoutRowsInput>
    connectOrCreate?: StagingFileCreateOrConnectWithoutRowsInput
    connect?: StagingFileWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type StagingFileUpdateOneRequiredWithoutRowsNestedInput = {
    create?: XOR<StagingFileCreateWithoutRowsInput, StagingFileUncheckedCreateWithoutRowsInput>
    connectOrCreate?: StagingFileCreateOrConnectWithoutRowsInput
    upsert?: StagingFileUpsertWithoutRowsInput
    connect?: StagingFileWhereUniqueInput
    update?: XOR<XOR<StagingFileUpdateToOneWithWhereWithoutRowsInput, StagingFileUpdateWithoutRowsInput>, StagingFileUncheckedUpdateWithoutRowsInput>
  }

  export type TransactionCreateNestedManyWithoutCustomerInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CustomerBalanceSnapshotCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerBalanceSnapshotCreateWithoutCustomerInput, CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput> | CustomerBalanceSnapshotCreateWithoutCustomerInput[] | CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput | CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerBalanceSnapshotCreateManyCustomerInputEnvelope
    connect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
  }

  export type TransactionUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
  }

  export type CustomerBalanceSnapshotUncheckedCreateNestedManyWithoutCustomerInput = {
    create?: XOR<CustomerBalanceSnapshotCreateWithoutCustomerInput, CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput> | CustomerBalanceSnapshotCreateWithoutCustomerInput[] | CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput | CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput[]
    createMany?: CustomerBalanceSnapshotCreateManyCustomerInputEnvelope
    connect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TransactionUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCustomerInput | TransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCustomerInput | TransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCustomerInput | TransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CustomerBalanceSnapshotUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerBalanceSnapshotCreateWithoutCustomerInput, CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput> | CustomerBalanceSnapshotCreateWithoutCustomerInput[] | CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput | CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutCustomerInput | CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerBalanceSnapshotCreateManyCustomerInputEnvelope
    set?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    disconnect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    delete?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    connect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    update?: CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutCustomerInput | CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerBalanceSnapshotUpdateManyWithWhereWithoutCustomerInput | CustomerBalanceSnapshotUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerBalanceSnapshotScalarWhereInput | CustomerBalanceSnapshotScalarWhereInput[]
  }

  export type TransactionUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput> | TransactionCreateWithoutCustomerInput[] | TransactionUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: TransactionCreateOrConnectWithoutCustomerInput | TransactionCreateOrConnectWithoutCustomerInput[]
    upsert?: TransactionUpsertWithWhereUniqueWithoutCustomerInput | TransactionUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: TransactionCreateManyCustomerInputEnvelope
    set?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    disconnect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    delete?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    connect?: TransactionWhereUniqueInput | TransactionWhereUniqueInput[]
    update?: TransactionUpdateWithWhereUniqueWithoutCustomerInput | TransactionUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: TransactionUpdateManyWithWhereWithoutCustomerInput | TransactionUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
  }

  export type CustomerBalanceSnapshotUncheckedUpdateManyWithoutCustomerNestedInput = {
    create?: XOR<CustomerBalanceSnapshotCreateWithoutCustomerInput, CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput> | CustomerBalanceSnapshotCreateWithoutCustomerInput[] | CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput[]
    connectOrCreate?: CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput | CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput[]
    upsert?: CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutCustomerInput | CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutCustomerInput[]
    createMany?: CustomerBalanceSnapshotCreateManyCustomerInputEnvelope
    set?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    disconnect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    delete?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    connect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    update?: CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutCustomerInput | CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutCustomerInput[]
    updateMany?: CustomerBalanceSnapshotUpdateManyWithWhereWithoutCustomerInput | CustomerBalanceSnapshotUpdateManyWithWhereWithoutCustomerInput[]
    deleteMany?: CustomerBalanceSnapshotScalarWhereInput | CustomerBalanceSnapshotScalarWhereInput[]
  }

  export type CustomerCreateNestedOneWithoutTransactionsInput = {
    create?: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTransactionsInput
    connect?: CustomerWhereUniqueInput
  }

  export type TransactionSourceCreateNestedManyWithoutTransactionInput = {
    create?: XOR<TransactionSourceCreateWithoutTransactionInput, TransactionSourceUncheckedCreateWithoutTransactionInput> | TransactionSourceCreateWithoutTransactionInput[] | TransactionSourceUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: TransactionSourceCreateOrConnectWithoutTransactionInput | TransactionSourceCreateOrConnectWithoutTransactionInput[]
    createMany?: TransactionSourceCreateManyTransactionInputEnvelope
    connect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
  }

  export type TransactionAuditCreateNestedManyWithoutOldTxnInput = {
    create?: XOR<TransactionAuditCreateWithoutOldTxnInput, TransactionAuditUncheckedCreateWithoutOldTxnInput> | TransactionAuditCreateWithoutOldTxnInput[] | TransactionAuditUncheckedCreateWithoutOldTxnInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutOldTxnInput | TransactionAuditCreateOrConnectWithoutOldTxnInput[]
    createMany?: TransactionAuditCreateManyOldTxnInputEnvelope
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
  }

  export type TransactionAuditCreateNestedManyWithoutNewTxnInput = {
    create?: XOR<TransactionAuditCreateWithoutNewTxnInput, TransactionAuditUncheckedCreateWithoutNewTxnInput> | TransactionAuditCreateWithoutNewTxnInput[] | TransactionAuditUncheckedCreateWithoutNewTxnInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutNewTxnInput | TransactionAuditCreateOrConnectWithoutNewTxnInput[]
    createMany?: TransactionAuditCreateManyNewTxnInputEnvelope
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
  }

  export type TransactionSourceUncheckedCreateNestedManyWithoutTransactionInput = {
    create?: XOR<TransactionSourceCreateWithoutTransactionInput, TransactionSourceUncheckedCreateWithoutTransactionInput> | TransactionSourceCreateWithoutTransactionInput[] | TransactionSourceUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: TransactionSourceCreateOrConnectWithoutTransactionInput | TransactionSourceCreateOrConnectWithoutTransactionInput[]
    createMany?: TransactionSourceCreateManyTransactionInputEnvelope
    connect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
  }

  export type TransactionAuditUncheckedCreateNestedManyWithoutOldTxnInput = {
    create?: XOR<TransactionAuditCreateWithoutOldTxnInput, TransactionAuditUncheckedCreateWithoutOldTxnInput> | TransactionAuditCreateWithoutOldTxnInput[] | TransactionAuditUncheckedCreateWithoutOldTxnInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutOldTxnInput | TransactionAuditCreateOrConnectWithoutOldTxnInput[]
    createMany?: TransactionAuditCreateManyOldTxnInputEnvelope
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
  }

  export type TransactionAuditUncheckedCreateNestedManyWithoutNewTxnInput = {
    create?: XOR<TransactionAuditCreateWithoutNewTxnInput, TransactionAuditUncheckedCreateWithoutNewTxnInput> | TransactionAuditCreateWithoutNewTxnInput[] | TransactionAuditUncheckedCreateWithoutNewTxnInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutNewTxnInput | TransactionAuditCreateOrConnectWithoutNewTxnInput[]
    createMany?: TransactionAuditCreateManyNewTxnInputEnvelope
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type CustomerUpdateOneRequiredWithoutTransactionsNestedInput = {
    create?: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutTransactionsInput
    upsert?: CustomerUpsertWithoutTransactionsInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutTransactionsInput, CustomerUpdateWithoutTransactionsInput>, CustomerUncheckedUpdateWithoutTransactionsInput>
  }

  export type TransactionSourceUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<TransactionSourceCreateWithoutTransactionInput, TransactionSourceUncheckedCreateWithoutTransactionInput> | TransactionSourceCreateWithoutTransactionInput[] | TransactionSourceUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: TransactionSourceCreateOrConnectWithoutTransactionInput | TransactionSourceCreateOrConnectWithoutTransactionInput[]
    upsert?: TransactionSourceUpsertWithWhereUniqueWithoutTransactionInput | TransactionSourceUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: TransactionSourceCreateManyTransactionInputEnvelope
    set?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    disconnect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    delete?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    connect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    update?: TransactionSourceUpdateWithWhereUniqueWithoutTransactionInput | TransactionSourceUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: TransactionSourceUpdateManyWithWhereWithoutTransactionInput | TransactionSourceUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: TransactionSourceScalarWhereInput | TransactionSourceScalarWhereInput[]
  }

  export type TransactionAuditUpdateManyWithoutOldTxnNestedInput = {
    create?: XOR<TransactionAuditCreateWithoutOldTxnInput, TransactionAuditUncheckedCreateWithoutOldTxnInput> | TransactionAuditCreateWithoutOldTxnInput[] | TransactionAuditUncheckedCreateWithoutOldTxnInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutOldTxnInput | TransactionAuditCreateOrConnectWithoutOldTxnInput[]
    upsert?: TransactionAuditUpsertWithWhereUniqueWithoutOldTxnInput | TransactionAuditUpsertWithWhereUniqueWithoutOldTxnInput[]
    createMany?: TransactionAuditCreateManyOldTxnInputEnvelope
    set?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    disconnect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    delete?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    update?: TransactionAuditUpdateWithWhereUniqueWithoutOldTxnInput | TransactionAuditUpdateWithWhereUniqueWithoutOldTxnInput[]
    updateMany?: TransactionAuditUpdateManyWithWhereWithoutOldTxnInput | TransactionAuditUpdateManyWithWhereWithoutOldTxnInput[]
    deleteMany?: TransactionAuditScalarWhereInput | TransactionAuditScalarWhereInput[]
  }

  export type TransactionAuditUpdateManyWithoutNewTxnNestedInput = {
    create?: XOR<TransactionAuditCreateWithoutNewTxnInput, TransactionAuditUncheckedCreateWithoutNewTxnInput> | TransactionAuditCreateWithoutNewTxnInput[] | TransactionAuditUncheckedCreateWithoutNewTxnInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutNewTxnInput | TransactionAuditCreateOrConnectWithoutNewTxnInput[]
    upsert?: TransactionAuditUpsertWithWhereUniqueWithoutNewTxnInput | TransactionAuditUpsertWithWhereUniqueWithoutNewTxnInput[]
    createMany?: TransactionAuditCreateManyNewTxnInputEnvelope
    set?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    disconnect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    delete?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    update?: TransactionAuditUpdateWithWhereUniqueWithoutNewTxnInput | TransactionAuditUpdateWithWhereUniqueWithoutNewTxnInput[]
    updateMany?: TransactionAuditUpdateManyWithWhereWithoutNewTxnInput | TransactionAuditUpdateManyWithWhereWithoutNewTxnInput[]
    deleteMany?: TransactionAuditScalarWhereInput | TransactionAuditScalarWhereInput[]
  }

  export type TransactionSourceUncheckedUpdateManyWithoutTransactionNestedInput = {
    create?: XOR<TransactionSourceCreateWithoutTransactionInput, TransactionSourceUncheckedCreateWithoutTransactionInput> | TransactionSourceCreateWithoutTransactionInput[] | TransactionSourceUncheckedCreateWithoutTransactionInput[]
    connectOrCreate?: TransactionSourceCreateOrConnectWithoutTransactionInput | TransactionSourceCreateOrConnectWithoutTransactionInput[]
    upsert?: TransactionSourceUpsertWithWhereUniqueWithoutTransactionInput | TransactionSourceUpsertWithWhereUniqueWithoutTransactionInput[]
    createMany?: TransactionSourceCreateManyTransactionInputEnvelope
    set?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    disconnect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    delete?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    connect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    update?: TransactionSourceUpdateWithWhereUniqueWithoutTransactionInput | TransactionSourceUpdateWithWhereUniqueWithoutTransactionInput[]
    updateMany?: TransactionSourceUpdateManyWithWhereWithoutTransactionInput | TransactionSourceUpdateManyWithWhereWithoutTransactionInput[]
    deleteMany?: TransactionSourceScalarWhereInput | TransactionSourceScalarWhereInput[]
  }

  export type TransactionAuditUncheckedUpdateManyWithoutOldTxnNestedInput = {
    create?: XOR<TransactionAuditCreateWithoutOldTxnInput, TransactionAuditUncheckedCreateWithoutOldTxnInput> | TransactionAuditCreateWithoutOldTxnInput[] | TransactionAuditUncheckedCreateWithoutOldTxnInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutOldTxnInput | TransactionAuditCreateOrConnectWithoutOldTxnInput[]
    upsert?: TransactionAuditUpsertWithWhereUniqueWithoutOldTxnInput | TransactionAuditUpsertWithWhereUniqueWithoutOldTxnInput[]
    createMany?: TransactionAuditCreateManyOldTxnInputEnvelope
    set?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    disconnect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    delete?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    update?: TransactionAuditUpdateWithWhereUniqueWithoutOldTxnInput | TransactionAuditUpdateWithWhereUniqueWithoutOldTxnInput[]
    updateMany?: TransactionAuditUpdateManyWithWhereWithoutOldTxnInput | TransactionAuditUpdateManyWithWhereWithoutOldTxnInput[]
    deleteMany?: TransactionAuditScalarWhereInput | TransactionAuditScalarWhereInput[]
  }

  export type TransactionAuditUncheckedUpdateManyWithoutNewTxnNestedInput = {
    create?: XOR<TransactionAuditCreateWithoutNewTxnInput, TransactionAuditUncheckedCreateWithoutNewTxnInput> | TransactionAuditCreateWithoutNewTxnInput[] | TransactionAuditUncheckedCreateWithoutNewTxnInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutNewTxnInput | TransactionAuditCreateOrConnectWithoutNewTxnInput[]
    upsert?: TransactionAuditUpsertWithWhereUniqueWithoutNewTxnInput | TransactionAuditUpsertWithWhereUniqueWithoutNewTxnInput[]
    createMany?: TransactionAuditCreateManyNewTxnInputEnvelope
    set?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    disconnect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    delete?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    update?: TransactionAuditUpdateWithWhereUniqueWithoutNewTxnInput | TransactionAuditUpdateWithWhereUniqueWithoutNewTxnInput[]
    updateMany?: TransactionAuditUpdateManyWithWhereWithoutNewTxnInput | TransactionAuditUpdateManyWithWhereWithoutNewTxnInput[]
    deleteMany?: TransactionAuditScalarWhereInput | TransactionAuditScalarWhereInput[]
  }

  export type TransactionCreateNestedOneWithoutSourcesInput = {
    create?: XOR<TransactionCreateWithoutSourcesInput, TransactionUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutSourcesInput
    connect?: TransactionWhereUniqueInput
  }

  export type StagingFileCreateNestedOneWithoutTransactionLinksInput = {
    create?: XOR<StagingFileCreateWithoutTransactionLinksInput, StagingFileUncheckedCreateWithoutTransactionLinksInput>
    connectOrCreate?: StagingFileCreateOrConnectWithoutTransactionLinksInput
    connect?: StagingFileWhereUniqueInput
  }

  export type TransactionUpdateOneRequiredWithoutSourcesNestedInput = {
    create?: XOR<TransactionCreateWithoutSourcesInput, TransactionUncheckedCreateWithoutSourcesInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutSourcesInput
    upsert?: TransactionUpsertWithoutSourcesInput
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutSourcesInput, TransactionUpdateWithoutSourcesInput>, TransactionUncheckedUpdateWithoutSourcesInput>
  }

  export type StagingFileUpdateOneRequiredWithoutTransactionLinksNestedInput = {
    create?: XOR<StagingFileCreateWithoutTransactionLinksInput, StagingFileUncheckedCreateWithoutTransactionLinksInput>
    connectOrCreate?: StagingFileCreateOrConnectWithoutTransactionLinksInput
    upsert?: StagingFileUpsertWithoutTransactionLinksInput
    connect?: StagingFileWhereUniqueInput
    update?: XOR<XOR<StagingFileUpdateToOneWithWhereWithoutTransactionLinksInput, StagingFileUpdateWithoutTransactionLinksInput>, StagingFileUncheckedUpdateWithoutTransactionLinksInput>
  }

  export type TransactionCreateNestedOneWithoutAuditsFromInput = {
    create?: XOR<TransactionCreateWithoutAuditsFromInput, TransactionUncheckedCreateWithoutAuditsFromInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutAuditsFromInput
    connect?: TransactionWhereUniqueInput
  }

  export type TransactionCreateNestedOneWithoutAuditsToInput = {
    create?: XOR<TransactionCreateWithoutAuditsToInput, TransactionUncheckedCreateWithoutAuditsToInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutAuditsToInput
    connect?: TransactionWhereUniqueInput
  }

  export type StagingFileCreateNestedOneWithoutTransactionAuditsInput = {
    create?: XOR<StagingFileCreateWithoutTransactionAuditsInput, StagingFileUncheckedCreateWithoutTransactionAuditsInput>
    connectOrCreate?: StagingFileCreateOrConnectWithoutTransactionAuditsInput
    connect?: StagingFileWhereUniqueInput
  }

  export type TransactionUpdateOneWithoutAuditsFromNestedInput = {
    create?: XOR<TransactionCreateWithoutAuditsFromInput, TransactionUncheckedCreateWithoutAuditsFromInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutAuditsFromInput
    upsert?: TransactionUpsertWithoutAuditsFromInput
    disconnect?: TransactionWhereInput | boolean
    delete?: TransactionWhereInput | boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutAuditsFromInput, TransactionUpdateWithoutAuditsFromInput>, TransactionUncheckedUpdateWithoutAuditsFromInput>
  }

  export type TransactionUpdateOneWithoutAuditsToNestedInput = {
    create?: XOR<TransactionCreateWithoutAuditsToInput, TransactionUncheckedCreateWithoutAuditsToInput>
    connectOrCreate?: TransactionCreateOrConnectWithoutAuditsToInput
    upsert?: TransactionUpsertWithoutAuditsToInput
    disconnect?: TransactionWhereInput | boolean
    delete?: TransactionWhereInput | boolean
    connect?: TransactionWhereUniqueInput
    update?: XOR<XOR<TransactionUpdateToOneWithWhereWithoutAuditsToInput, TransactionUpdateWithoutAuditsToInput>, TransactionUncheckedUpdateWithoutAuditsToInput>
  }

  export type StagingFileUpdateOneRequiredWithoutTransactionAuditsNestedInput = {
    create?: XOR<StagingFileCreateWithoutTransactionAuditsInput, StagingFileUncheckedCreateWithoutTransactionAuditsInput>
    connectOrCreate?: StagingFileCreateOrConnectWithoutTransactionAuditsInput
    upsert?: StagingFileUpsertWithoutTransactionAuditsInput
    connect?: StagingFileWhereUniqueInput
    update?: XOR<XOR<StagingFileUpdateToOneWithWhereWithoutTransactionAuditsInput, StagingFileUpdateWithoutTransactionAuditsInput>, StagingFileUncheckedUpdateWithoutTransactionAuditsInput>
  }

  export type CustomerCreateNestedOneWithoutBalancesInput = {
    create?: XOR<CustomerCreateWithoutBalancesInput, CustomerUncheckedCreateWithoutBalancesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBalancesInput
    connect?: CustomerWhereUniqueInput
  }

  export type StagingFileCreateNestedOneWithoutCustomerBalancesInput = {
    create?: XOR<StagingFileCreateWithoutCustomerBalancesInput, StagingFileUncheckedCreateWithoutCustomerBalancesInput>
    connectOrCreate?: StagingFileCreateOrConnectWithoutCustomerBalancesInput
    connect?: StagingFileWhereUniqueInput
  }

  export type CustomerUpdateOneRequiredWithoutBalancesNestedInput = {
    create?: XOR<CustomerCreateWithoutBalancesInput, CustomerUncheckedCreateWithoutBalancesInput>
    connectOrCreate?: CustomerCreateOrConnectWithoutBalancesInput
    upsert?: CustomerUpsertWithoutBalancesInput
    connect?: CustomerWhereUniqueInput
    update?: XOR<XOR<CustomerUpdateToOneWithWhereWithoutBalancesInput, CustomerUpdateWithoutBalancesInput>, CustomerUncheckedUpdateWithoutBalancesInput>
  }

  export type StagingFileUpdateOneRequiredWithoutCustomerBalancesNestedInput = {
    create?: XOR<StagingFileCreateWithoutCustomerBalancesInput, StagingFileUncheckedCreateWithoutCustomerBalancesInput>
    connectOrCreate?: StagingFileCreateOrConnectWithoutCustomerBalancesInput
    upsert?: StagingFileUpsertWithoutCustomerBalancesInput
    connect?: StagingFileWhereUniqueInput
    update?: XOR<XOR<StagingFileUpdateToOneWithWhereWithoutCustomerBalancesInput, StagingFileUpdateWithoutCustomerBalancesInput>, StagingFileUncheckedUpdateWithoutCustomerBalancesInput>
  }

  export type StagingRowCreateNestedManyWithoutFileInput = {
    create?: XOR<StagingRowCreateWithoutFileInput, StagingRowUncheckedCreateWithoutFileInput> | StagingRowCreateWithoutFileInput[] | StagingRowUncheckedCreateWithoutFileInput[]
    connectOrCreate?: StagingRowCreateOrConnectWithoutFileInput | StagingRowCreateOrConnectWithoutFileInput[]
    createMany?: StagingRowCreateManyFileInputEnvelope
    connect?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
  }

  export type TransactionSourceCreateNestedManyWithoutFileInput = {
    create?: XOR<TransactionSourceCreateWithoutFileInput, TransactionSourceUncheckedCreateWithoutFileInput> | TransactionSourceCreateWithoutFileInput[] | TransactionSourceUncheckedCreateWithoutFileInput[]
    connectOrCreate?: TransactionSourceCreateOrConnectWithoutFileInput | TransactionSourceCreateOrConnectWithoutFileInput[]
    createMany?: TransactionSourceCreateManyFileInputEnvelope
    connect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
  }

  export type CustomerBalanceSnapshotCreateNestedManyWithoutFileInput = {
    create?: XOR<CustomerBalanceSnapshotCreateWithoutFileInput, CustomerBalanceSnapshotUncheckedCreateWithoutFileInput> | CustomerBalanceSnapshotCreateWithoutFileInput[] | CustomerBalanceSnapshotUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CustomerBalanceSnapshotCreateOrConnectWithoutFileInput | CustomerBalanceSnapshotCreateOrConnectWithoutFileInput[]
    createMany?: CustomerBalanceSnapshotCreateManyFileInputEnvelope
    connect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
  }

  export type TransactionAuditCreateNestedManyWithoutFileInput = {
    create?: XOR<TransactionAuditCreateWithoutFileInput, TransactionAuditUncheckedCreateWithoutFileInput> | TransactionAuditCreateWithoutFileInput[] | TransactionAuditUncheckedCreateWithoutFileInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutFileInput | TransactionAuditCreateOrConnectWithoutFileInput[]
    createMany?: TransactionAuditCreateManyFileInputEnvelope
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
  }

  export type StagingRowUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<StagingRowCreateWithoutFileInput, StagingRowUncheckedCreateWithoutFileInput> | StagingRowCreateWithoutFileInput[] | StagingRowUncheckedCreateWithoutFileInput[]
    connectOrCreate?: StagingRowCreateOrConnectWithoutFileInput | StagingRowCreateOrConnectWithoutFileInput[]
    createMany?: StagingRowCreateManyFileInputEnvelope
    connect?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
  }

  export type TransactionSourceUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<TransactionSourceCreateWithoutFileInput, TransactionSourceUncheckedCreateWithoutFileInput> | TransactionSourceCreateWithoutFileInput[] | TransactionSourceUncheckedCreateWithoutFileInput[]
    connectOrCreate?: TransactionSourceCreateOrConnectWithoutFileInput | TransactionSourceCreateOrConnectWithoutFileInput[]
    createMany?: TransactionSourceCreateManyFileInputEnvelope
    connect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
  }

  export type CustomerBalanceSnapshotUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<CustomerBalanceSnapshotCreateWithoutFileInput, CustomerBalanceSnapshotUncheckedCreateWithoutFileInput> | CustomerBalanceSnapshotCreateWithoutFileInput[] | CustomerBalanceSnapshotUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CustomerBalanceSnapshotCreateOrConnectWithoutFileInput | CustomerBalanceSnapshotCreateOrConnectWithoutFileInput[]
    createMany?: CustomerBalanceSnapshotCreateManyFileInputEnvelope
    connect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
  }

  export type TransactionAuditUncheckedCreateNestedManyWithoutFileInput = {
    create?: XOR<TransactionAuditCreateWithoutFileInput, TransactionAuditUncheckedCreateWithoutFileInput> | TransactionAuditCreateWithoutFileInput[] | TransactionAuditUncheckedCreateWithoutFileInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutFileInput | TransactionAuditCreateOrConnectWithoutFileInput[]
    createMany?: TransactionAuditCreateManyFileInputEnvelope
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
  }

  export type StagingRowUpdateManyWithoutFileNestedInput = {
    create?: XOR<StagingRowCreateWithoutFileInput, StagingRowUncheckedCreateWithoutFileInput> | StagingRowCreateWithoutFileInput[] | StagingRowUncheckedCreateWithoutFileInput[]
    connectOrCreate?: StagingRowCreateOrConnectWithoutFileInput | StagingRowCreateOrConnectWithoutFileInput[]
    upsert?: StagingRowUpsertWithWhereUniqueWithoutFileInput | StagingRowUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: StagingRowCreateManyFileInputEnvelope
    set?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
    disconnect?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
    delete?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
    connect?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
    update?: StagingRowUpdateWithWhereUniqueWithoutFileInput | StagingRowUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: StagingRowUpdateManyWithWhereWithoutFileInput | StagingRowUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: StagingRowScalarWhereInput | StagingRowScalarWhereInput[]
  }

  export type TransactionSourceUpdateManyWithoutFileNestedInput = {
    create?: XOR<TransactionSourceCreateWithoutFileInput, TransactionSourceUncheckedCreateWithoutFileInput> | TransactionSourceCreateWithoutFileInput[] | TransactionSourceUncheckedCreateWithoutFileInput[]
    connectOrCreate?: TransactionSourceCreateOrConnectWithoutFileInput | TransactionSourceCreateOrConnectWithoutFileInput[]
    upsert?: TransactionSourceUpsertWithWhereUniqueWithoutFileInput | TransactionSourceUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: TransactionSourceCreateManyFileInputEnvelope
    set?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    disconnect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    delete?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    connect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    update?: TransactionSourceUpdateWithWhereUniqueWithoutFileInput | TransactionSourceUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: TransactionSourceUpdateManyWithWhereWithoutFileInput | TransactionSourceUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: TransactionSourceScalarWhereInput | TransactionSourceScalarWhereInput[]
  }

  export type CustomerBalanceSnapshotUpdateManyWithoutFileNestedInput = {
    create?: XOR<CustomerBalanceSnapshotCreateWithoutFileInput, CustomerBalanceSnapshotUncheckedCreateWithoutFileInput> | CustomerBalanceSnapshotCreateWithoutFileInput[] | CustomerBalanceSnapshotUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CustomerBalanceSnapshotCreateOrConnectWithoutFileInput | CustomerBalanceSnapshotCreateOrConnectWithoutFileInput[]
    upsert?: CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutFileInput | CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: CustomerBalanceSnapshotCreateManyFileInputEnvelope
    set?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    disconnect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    delete?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    connect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    update?: CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutFileInput | CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: CustomerBalanceSnapshotUpdateManyWithWhereWithoutFileInput | CustomerBalanceSnapshotUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: CustomerBalanceSnapshotScalarWhereInput | CustomerBalanceSnapshotScalarWhereInput[]
  }

  export type TransactionAuditUpdateManyWithoutFileNestedInput = {
    create?: XOR<TransactionAuditCreateWithoutFileInput, TransactionAuditUncheckedCreateWithoutFileInput> | TransactionAuditCreateWithoutFileInput[] | TransactionAuditUncheckedCreateWithoutFileInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutFileInput | TransactionAuditCreateOrConnectWithoutFileInput[]
    upsert?: TransactionAuditUpsertWithWhereUniqueWithoutFileInput | TransactionAuditUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: TransactionAuditCreateManyFileInputEnvelope
    set?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    disconnect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    delete?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    update?: TransactionAuditUpdateWithWhereUniqueWithoutFileInput | TransactionAuditUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: TransactionAuditUpdateManyWithWhereWithoutFileInput | TransactionAuditUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: TransactionAuditScalarWhereInput | TransactionAuditScalarWhereInput[]
  }

  export type StagingRowUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<StagingRowCreateWithoutFileInput, StagingRowUncheckedCreateWithoutFileInput> | StagingRowCreateWithoutFileInput[] | StagingRowUncheckedCreateWithoutFileInput[]
    connectOrCreate?: StagingRowCreateOrConnectWithoutFileInput | StagingRowCreateOrConnectWithoutFileInput[]
    upsert?: StagingRowUpsertWithWhereUniqueWithoutFileInput | StagingRowUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: StagingRowCreateManyFileInputEnvelope
    set?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
    disconnect?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
    delete?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
    connect?: StagingRowWhereUniqueInput | StagingRowWhereUniqueInput[]
    update?: StagingRowUpdateWithWhereUniqueWithoutFileInput | StagingRowUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: StagingRowUpdateManyWithWhereWithoutFileInput | StagingRowUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: StagingRowScalarWhereInput | StagingRowScalarWhereInput[]
  }

  export type TransactionSourceUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<TransactionSourceCreateWithoutFileInput, TransactionSourceUncheckedCreateWithoutFileInput> | TransactionSourceCreateWithoutFileInput[] | TransactionSourceUncheckedCreateWithoutFileInput[]
    connectOrCreate?: TransactionSourceCreateOrConnectWithoutFileInput | TransactionSourceCreateOrConnectWithoutFileInput[]
    upsert?: TransactionSourceUpsertWithWhereUniqueWithoutFileInput | TransactionSourceUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: TransactionSourceCreateManyFileInputEnvelope
    set?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    disconnect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    delete?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    connect?: TransactionSourceWhereUniqueInput | TransactionSourceWhereUniqueInput[]
    update?: TransactionSourceUpdateWithWhereUniqueWithoutFileInput | TransactionSourceUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: TransactionSourceUpdateManyWithWhereWithoutFileInput | TransactionSourceUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: TransactionSourceScalarWhereInput | TransactionSourceScalarWhereInput[]
  }

  export type CustomerBalanceSnapshotUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<CustomerBalanceSnapshotCreateWithoutFileInput, CustomerBalanceSnapshotUncheckedCreateWithoutFileInput> | CustomerBalanceSnapshotCreateWithoutFileInput[] | CustomerBalanceSnapshotUncheckedCreateWithoutFileInput[]
    connectOrCreate?: CustomerBalanceSnapshotCreateOrConnectWithoutFileInput | CustomerBalanceSnapshotCreateOrConnectWithoutFileInput[]
    upsert?: CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutFileInput | CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: CustomerBalanceSnapshotCreateManyFileInputEnvelope
    set?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    disconnect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    delete?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    connect?: CustomerBalanceSnapshotWhereUniqueInput | CustomerBalanceSnapshotWhereUniqueInput[]
    update?: CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutFileInput | CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: CustomerBalanceSnapshotUpdateManyWithWhereWithoutFileInput | CustomerBalanceSnapshotUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: CustomerBalanceSnapshotScalarWhereInput | CustomerBalanceSnapshotScalarWhereInput[]
  }

  export type TransactionAuditUncheckedUpdateManyWithoutFileNestedInput = {
    create?: XOR<TransactionAuditCreateWithoutFileInput, TransactionAuditUncheckedCreateWithoutFileInput> | TransactionAuditCreateWithoutFileInput[] | TransactionAuditUncheckedCreateWithoutFileInput[]
    connectOrCreate?: TransactionAuditCreateOrConnectWithoutFileInput | TransactionAuditCreateOrConnectWithoutFileInput[]
    upsert?: TransactionAuditUpsertWithWhereUniqueWithoutFileInput | TransactionAuditUpsertWithWhereUniqueWithoutFileInput[]
    createMany?: TransactionAuditCreateManyFileInputEnvelope
    set?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    disconnect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    delete?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    connect?: TransactionAuditWhereUniqueInput | TransactionAuditWhereUniqueInput[]
    update?: TransactionAuditUpdateWithWhereUniqueWithoutFileInput | TransactionAuditUpdateWithWhereUniqueWithoutFileInput[]
    updateMany?: TransactionAuditUpdateManyWithWhereWithoutFileInput | TransactionAuditUpdateManyWithWhereWithoutFileInput[]
    deleteMany?: TransactionAuditScalarWhereInput | TransactionAuditScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type StagingFileCreateWithoutRowsInput = {
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    transactionLinks?: TransactionSourceCreateNestedManyWithoutFileInput
    customerBalances?: CustomerBalanceSnapshotCreateNestedManyWithoutFileInput
    transactionAudits?: TransactionAuditCreateNestedManyWithoutFileInput
  }

  export type StagingFileUncheckedCreateWithoutRowsInput = {
    id?: number
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    transactionLinks?: TransactionSourceUncheckedCreateNestedManyWithoutFileInput
    customerBalances?: CustomerBalanceSnapshotUncheckedCreateNestedManyWithoutFileInput
    transactionAudits?: TransactionAuditUncheckedCreateNestedManyWithoutFileInput
  }

  export type StagingFileCreateOrConnectWithoutRowsInput = {
    where: StagingFileWhereUniqueInput
    create: XOR<StagingFileCreateWithoutRowsInput, StagingFileUncheckedCreateWithoutRowsInput>
  }

  export type StagingFileUpsertWithoutRowsInput = {
    update: XOR<StagingFileUpdateWithoutRowsInput, StagingFileUncheckedUpdateWithoutRowsInput>
    create: XOR<StagingFileCreateWithoutRowsInput, StagingFileUncheckedCreateWithoutRowsInput>
    where?: StagingFileWhereInput
  }

  export type StagingFileUpdateToOneWithWhereWithoutRowsInput = {
    where?: StagingFileWhereInput
    data: XOR<StagingFileUpdateWithoutRowsInput, StagingFileUncheckedUpdateWithoutRowsInput>
  }

  export type StagingFileUpdateWithoutRowsInput = {
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    transactionLinks?: TransactionSourceUpdateManyWithoutFileNestedInput
    customerBalances?: CustomerBalanceSnapshotUpdateManyWithoutFileNestedInput
    transactionAudits?: TransactionAuditUpdateManyWithoutFileNestedInput
  }

  export type StagingFileUncheckedUpdateWithoutRowsInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    transactionLinks?: TransactionSourceUncheckedUpdateManyWithoutFileNestedInput
    customerBalances?: CustomerBalanceSnapshotUncheckedUpdateManyWithoutFileNestedInput
    transactionAudits?: TransactionAuditUncheckedUpdateManyWithoutFileNestedInput
  }

  export type TransactionCreateWithoutCustomerInput = {
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sources?: TransactionSourceCreateNestedManyWithoutTransactionInput
    auditsFrom?: TransactionAuditCreateNestedManyWithoutOldTxnInput
    auditsTo?: TransactionAuditCreateNestedManyWithoutNewTxnInput
  }

  export type TransactionUncheckedCreateWithoutCustomerInput = {
    id?: number
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sources?: TransactionSourceUncheckedCreateNestedManyWithoutTransactionInput
    auditsFrom?: TransactionAuditUncheckedCreateNestedManyWithoutOldTxnInput
    auditsTo?: TransactionAuditUncheckedCreateNestedManyWithoutNewTxnInput
  }

  export type TransactionCreateOrConnectWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionCreateManyCustomerInputEnvelope = {
    data: TransactionCreateManyCustomerInput | TransactionCreateManyCustomerInput[]
  }

  export type CustomerBalanceSnapshotCreateWithoutCustomerInput = {
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
    file: StagingFileCreateNestedOneWithoutCustomerBalancesInput
  }

  export type CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput = {
    id?: number
    fileId: number
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
  }

  export type CustomerBalanceSnapshotCreateOrConnectWithoutCustomerInput = {
    where: CustomerBalanceSnapshotWhereUniqueInput
    create: XOR<CustomerBalanceSnapshotCreateWithoutCustomerInput, CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerBalanceSnapshotCreateManyCustomerInputEnvelope = {
    data: CustomerBalanceSnapshotCreateManyCustomerInput | CustomerBalanceSnapshotCreateManyCustomerInput[]
  }

  export type TransactionUpsertWithWhereUniqueWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    update: XOR<TransactionUpdateWithoutCustomerInput, TransactionUncheckedUpdateWithoutCustomerInput>
    create: XOR<TransactionCreateWithoutCustomerInput, TransactionUncheckedCreateWithoutCustomerInput>
  }

  export type TransactionUpdateWithWhereUniqueWithoutCustomerInput = {
    where: TransactionWhereUniqueInput
    data: XOR<TransactionUpdateWithoutCustomerInput, TransactionUncheckedUpdateWithoutCustomerInput>
  }

  export type TransactionUpdateManyWithWhereWithoutCustomerInput = {
    where: TransactionScalarWhereInput
    data: XOR<TransactionUpdateManyMutationInput, TransactionUncheckedUpdateManyWithoutCustomerInput>
  }

  export type TransactionScalarWhereInput = {
    AND?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    OR?: TransactionScalarWhereInput[]
    NOT?: TransactionScalarWhereInput | TransactionScalarWhereInput[]
    id?: IntFilter<"Transaction"> | number
    customerId?: IntFilter<"Transaction"> | number
    docType?: StringNullableFilter<"Transaction"> | string | null
    txnDate?: DateTimeFilter<"Transaction"> | Date | string
    voucherNo?: StringNullableFilter<"Transaction"> | string | null
    description?: StringNullableFilter<"Transaction"> | string | null
    dueDate?: DateTimeNullableFilter<"Transaction"> | Date | string | null
    amountBaseCents?: IntNullableFilter<"Transaction"> | number | null
    discountCents?: IntNullableFilter<"Transaction"> | number | null
    amountNetCents?: IntNullableFilter<"Transaction"> | number | null
    vatCents?: IntNullableFilter<"Transaction"> | number | null
    debitCents?: IntFilter<"Transaction"> | number
    creditCents?: IntFilter<"Transaction"> | number
    currency?: StringFilter<"Transaction"> | string
    naturalKey?: StringFilter<"Transaction"> | string
    rowHash?: StringFilter<"Transaction"> | string
    lastFileId?: IntFilter<"Transaction"> | number
    createdAt?: DateTimeFilter<"Transaction"> | Date | string
    updatedAt?: DateTimeFilter<"Transaction"> | Date | string
  }

  export type CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutCustomerInput = {
    where: CustomerBalanceSnapshotWhereUniqueInput
    update: XOR<CustomerBalanceSnapshotUpdateWithoutCustomerInput, CustomerBalanceSnapshotUncheckedUpdateWithoutCustomerInput>
    create: XOR<CustomerBalanceSnapshotCreateWithoutCustomerInput, CustomerBalanceSnapshotUncheckedCreateWithoutCustomerInput>
  }

  export type CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutCustomerInput = {
    where: CustomerBalanceSnapshotWhereUniqueInput
    data: XOR<CustomerBalanceSnapshotUpdateWithoutCustomerInput, CustomerBalanceSnapshotUncheckedUpdateWithoutCustomerInput>
  }

  export type CustomerBalanceSnapshotUpdateManyWithWhereWithoutCustomerInput = {
    where: CustomerBalanceSnapshotScalarWhereInput
    data: XOR<CustomerBalanceSnapshotUpdateManyMutationInput, CustomerBalanceSnapshotUncheckedUpdateManyWithoutCustomerInput>
  }

  export type CustomerBalanceSnapshotScalarWhereInput = {
    AND?: CustomerBalanceSnapshotScalarWhereInput | CustomerBalanceSnapshotScalarWhereInput[]
    OR?: CustomerBalanceSnapshotScalarWhereInput[]
    NOT?: CustomerBalanceSnapshotScalarWhereInput | CustomerBalanceSnapshotScalarWhereInput[]
    id?: IntFilter<"CustomerBalanceSnapshot"> | number
    customerId?: IntFilter<"CustomerBalanceSnapshot"> | number
    fileId?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    reportedCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    calcCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffTotalDebitCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffTotalCreditCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffDebtBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    diffCreditBalanceCents?: IntFilter<"CustomerBalanceSnapshot"> | number
    createdAt?: DateTimeFilter<"CustomerBalanceSnapshot"> | Date | string
  }

  export type CustomerCreateWithoutTransactionsInput = {
    code: string
    name: string
    phone?: string | null
    address?: string | null
    accountType?: string | null
    tag1?: string | null
    tag2?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    balances?: CustomerBalanceSnapshotCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutTransactionsInput = {
    id?: number
    code: string
    name: string
    phone?: string | null
    address?: string | null
    accountType?: string | null
    tag1?: string | null
    tag2?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    balances?: CustomerBalanceSnapshotUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutTransactionsInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
  }

  export type TransactionSourceCreateWithoutTransactionInput = {
    file: StagingFileCreateNestedOneWithoutTransactionLinksInput
  }

  export type TransactionSourceUncheckedCreateWithoutTransactionInput = {
    id?: number
    fileId: number
  }

  export type TransactionSourceCreateOrConnectWithoutTransactionInput = {
    where: TransactionSourceWhereUniqueInput
    create: XOR<TransactionSourceCreateWithoutTransactionInput, TransactionSourceUncheckedCreateWithoutTransactionInput>
  }

  export type TransactionSourceCreateManyTransactionInputEnvelope = {
    data: TransactionSourceCreateManyTransactionInput | TransactionSourceCreateManyTransactionInput[]
  }

  export type TransactionAuditCreateWithoutOldTxnInput = {
    reason: string
    createdAt?: Date | string
    newTxn?: TransactionCreateNestedOneWithoutAuditsToInput
    file: StagingFileCreateNestedOneWithoutTransactionAuditsInput
  }

  export type TransactionAuditUncheckedCreateWithoutOldTxnInput = {
    id?: number
    newTxnId?: number | null
    fileId: number
    reason: string
    createdAt?: Date | string
  }

  export type TransactionAuditCreateOrConnectWithoutOldTxnInput = {
    where: TransactionAuditWhereUniqueInput
    create: XOR<TransactionAuditCreateWithoutOldTxnInput, TransactionAuditUncheckedCreateWithoutOldTxnInput>
  }

  export type TransactionAuditCreateManyOldTxnInputEnvelope = {
    data: TransactionAuditCreateManyOldTxnInput | TransactionAuditCreateManyOldTxnInput[]
  }

  export type TransactionAuditCreateWithoutNewTxnInput = {
    reason: string
    createdAt?: Date | string
    oldTxn?: TransactionCreateNestedOneWithoutAuditsFromInput
    file: StagingFileCreateNestedOneWithoutTransactionAuditsInput
  }

  export type TransactionAuditUncheckedCreateWithoutNewTxnInput = {
    id?: number
    oldTxnId?: number | null
    fileId: number
    reason: string
    createdAt?: Date | string
  }

  export type TransactionAuditCreateOrConnectWithoutNewTxnInput = {
    where: TransactionAuditWhereUniqueInput
    create: XOR<TransactionAuditCreateWithoutNewTxnInput, TransactionAuditUncheckedCreateWithoutNewTxnInput>
  }

  export type TransactionAuditCreateManyNewTxnInputEnvelope = {
    data: TransactionAuditCreateManyNewTxnInput | TransactionAuditCreateManyNewTxnInput[]
  }

  export type CustomerUpsertWithoutTransactionsInput = {
    update: XOR<CustomerUpdateWithoutTransactionsInput, CustomerUncheckedUpdateWithoutTransactionsInput>
    create: XOR<CustomerCreateWithoutTransactionsInput, CustomerUncheckedCreateWithoutTransactionsInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutTransactionsInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutTransactionsInput, CustomerUncheckedUpdateWithoutTransactionsInput>
  }

  export type CustomerUpdateWithoutTransactionsInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    balances?: CustomerBalanceSnapshotUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutTransactionsInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    balances?: CustomerBalanceSnapshotUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type TransactionSourceUpsertWithWhereUniqueWithoutTransactionInput = {
    where: TransactionSourceWhereUniqueInput
    update: XOR<TransactionSourceUpdateWithoutTransactionInput, TransactionSourceUncheckedUpdateWithoutTransactionInput>
    create: XOR<TransactionSourceCreateWithoutTransactionInput, TransactionSourceUncheckedCreateWithoutTransactionInput>
  }

  export type TransactionSourceUpdateWithWhereUniqueWithoutTransactionInput = {
    where: TransactionSourceWhereUniqueInput
    data: XOR<TransactionSourceUpdateWithoutTransactionInput, TransactionSourceUncheckedUpdateWithoutTransactionInput>
  }

  export type TransactionSourceUpdateManyWithWhereWithoutTransactionInput = {
    where: TransactionSourceScalarWhereInput
    data: XOR<TransactionSourceUpdateManyMutationInput, TransactionSourceUncheckedUpdateManyWithoutTransactionInput>
  }

  export type TransactionSourceScalarWhereInput = {
    AND?: TransactionSourceScalarWhereInput | TransactionSourceScalarWhereInput[]
    OR?: TransactionSourceScalarWhereInput[]
    NOT?: TransactionSourceScalarWhereInput | TransactionSourceScalarWhereInput[]
    id?: IntFilter<"TransactionSource"> | number
    transactionId?: IntFilter<"TransactionSource"> | number
    fileId?: IntFilter<"TransactionSource"> | number
  }

  export type TransactionAuditUpsertWithWhereUniqueWithoutOldTxnInput = {
    where: TransactionAuditWhereUniqueInput
    update: XOR<TransactionAuditUpdateWithoutOldTxnInput, TransactionAuditUncheckedUpdateWithoutOldTxnInput>
    create: XOR<TransactionAuditCreateWithoutOldTxnInput, TransactionAuditUncheckedCreateWithoutOldTxnInput>
  }

  export type TransactionAuditUpdateWithWhereUniqueWithoutOldTxnInput = {
    where: TransactionAuditWhereUniqueInput
    data: XOR<TransactionAuditUpdateWithoutOldTxnInput, TransactionAuditUncheckedUpdateWithoutOldTxnInput>
  }

  export type TransactionAuditUpdateManyWithWhereWithoutOldTxnInput = {
    where: TransactionAuditScalarWhereInput
    data: XOR<TransactionAuditUpdateManyMutationInput, TransactionAuditUncheckedUpdateManyWithoutOldTxnInput>
  }

  export type TransactionAuditScalarWhereInput = {
    AND?: TransactionAuditScalarWhereInput | TransactionAuditScalarWhereInput[]
    OR?: TransactionAuditScalarWhereInput[]
    NOT?: TransactionAuditScalarWhereInput | TransactionAuditScalarWhereInput[]
    id?: IntFilter<"TransactionAudit"> | number
    oldTxnId?: IntNullableFilter<"TransactionAudit"> | number | null
    newTxnId?: IntNullableFilter<"TransactionAudit"> | number | null
    fileId?: IntFilter<"TransactionAudit"> | number
    reason?: StringFilter<"TransactionAudit"> | string
    createdAt?: DateTimeFilter<"TransactionAudit"> | Date | string
  }

  export type TransactionAuditUpsertWithWhereUniqueWithoutNewTxnInput = {
    where: TransactionAuditWhereUniqueInput
    update: XOR<TransactionAuditUpdateWithoutNewTxnInput, TransactionAuditUncheckedUpdateWithoutNewTxnInput>
    create: XOR<TransactionAuditCreateWithoutNewTxnInput, TransactionAuditUncheckedCreateWithoutNewTxnInput>
  }

  export type TransactionAuditUpdateWithWhereUniqueWithoutNewTxnInput = {
    where: TransactionAuditWhereUniqueInput
    data: XOR<TransactionAuditUpdateWithoutNewTxnInput, TransactionAuditUncheckedUpdateWithoutNewTxnInput>
  }

  export type TransactionAuditUpdateManyWithWhereWithoutNewTxnInput = {
    where: TransactionAuditScalarWhereInput
    data: XOR<TransactionAuditUpdateManyMutationInput, TransactionAuditUncheckedUpdateManyWithoutNewTxnInput>
  }

  export type TransactionCreateWithoutSourcesInput = {
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    auditsFrom?: TransactionAuditCreateNestedManyWithoutOldTxnInput
    auditsTo?: TransactionAuditCreateNestedManyWithoutNewTxnInput
  }

  export type TransactionUncheckedCreateWithoutSourcesInput = {
    id?: number
    customerId: number
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    auditsFrom?: TransactionAuditUncheckedCreateNestedManyWithoutOldTxnInput
    auditsTo?: TransactionAuditUncheckedCreateNestedManyWithoutNewTxnInput
  }

  export type TransactionCreateOrConnectWithoutSourcesInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutSourcesInput, TransactionUncheckedCreateWithoutSourcesInput>
  }

  export type StagingFileCreateWithoutTransactionLinksInput = {
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    rows?: StagingRowCreateNestedManyWithoutFileInput
    customerBalances?: CustomerBalanceSnapshotCreateNestedManyWithoutFileInput
    transactionAudits?: TransactionAuditCreateNestedManyWithoutFileInput
  }

  export type StagingFileUncheckedCreateWithoutTransactionLinksInput = {
    id?: number
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    rows?: StagingRowUncheckedCreateNestedManyWithoutFileInput
    customerBalances?: CustomerBalanceSnapshotUncheckedCreateNestedManyWithoutFileInput
    transactionAudits?: TransactionAuditUncheckedCreateNestedManyWithoutFileInput
  }

  export type StagingFileCreateOrConnectWithoutTransactionLinksInput = {
    where: StagingFileWhereUniqueInput
    create: XOR<StagingFileCreateWithoutTransactionLinksInput, StagingFileUncheckedCreateWithoutTransactionLinksInput>
  }

  export type TransactionUpsertWithoutSourcesInput = {
    update: XOR<TransactionUpdateWithoutSourcesInput, TransactionUncheckedUpdateWithoutSourcesInput>
    create: XOR<TransactionCreateWithoutSourcesInput, TransactionUncheckedCreateWithoutSourcesInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutSourcesInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutSourcesInput, TransactionUncheckedUpdateWithoutSourcesInput>
  }

  export type TransactionUpdateWithoutSourcesInput = {
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    auditsFrom?: TransactionAuditUpdateManyWithoutOldTxnNestedInput
    auditsTo?: TransactionAuditUpdateManyWithoutNewTxnNestedInput
  }

  export type TransactionUncheckedUpdateWithoutSourcesInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    auditsFrom?: TransactionAuditUncheckedUpdateManyWithoutOldTxnNestedInput
    auditsTo?: TransactionAuditUncheckedUpdateManyWithoutNewTxnNestedInput
  }

  export type StagingFileUpsertWithoutTransactionLinksInput = {
    update: XOR<StagingFileUpdateWithoutTransactionLinksInput, StagingFileUncheckedUpdateWithoutTransactionLinksInput>
    create: XOR<StagingFileCreateWithoutTransactionLinksInput, StagingFileUncheckedCreateWithoutTransactionLinksInput>
    where?: StagingFileWhereInput
  }

  export type StagingFileUpdateToOneWithWhereWithoutTransactionLinksInput = {
    where?: StagingFileWhereInput
    data: XOR<StagingFileUpdateWithoutTransactionLinksInput, StagingFileUncheckedUpdateWithoutTransactionLinksInput>
  }

  export type StagingFileUpdateWithoutTransactionLinksInput = {
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    rows?: StagingRowUpdateManyWithoutFileNestedInput
    customerBalances?: CustomerBalanceSnapshotUpdateManyWithoutFileNestedInput
    transactionAudits?: TransactionAuditUpdateManyWithoutFileNestedInput
  }

  export type StagingFileUncheckedUpdateWithoutTransactionLinksInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    rows?: StagingRowUncheckedUpdateManyWithoutFileNestedInput
    customerBalances?: CustomerBalanceSnapshotUncheckedUpdateManyWithoutFileNestedInput
    transactionAudits?: TransactionAuditUncheckedUpdateManyWithoutFileNestedInput
  }

  export type TransactionCreateWithoutAuditsFromInput = {
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    sources?: TransactionSourceCreateNestedManyWithoutTransactionInput
    auditsTo?: TransactionAuditCreateNestedManyWithoutNewTxnInput
  }

  export type TransactionUncheckedCreateWithoutAuditsFromInput = {
    id?: number
    customerId: number
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sources?: TransactionSourceUncheckedCreateNestedManyWithoutTransactionInput
    auditsTo?: TransactionAuditUncheckedCreateNestedManyWithoutNewTxnInput
  }

  export type TransactionCreateOrConnectWithoutAuditsFromInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutAuditsFromInput, TransactionUncheckedCreateWithoutAuditsFromInput>
  }

  export type TransactionCreateWithoutAuditsToInput = {
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    customer: CustomerCreateNestedOneWithoutTransactionsInput
    sources?: TransactionSourceCreateNestedManyWithoutTransactionInput
    auditsFrom?: TransactionAuditCreateNestedManyWithoutOldTxnInput
  }

  export type TransactionUncheckedCreateWithoutAuditsToInput = {
    id?: number
    customerId: number
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
    sources?: TransactionSourceUncheckedCreateNestedManyWithoutTransactionInput
    auditsFrom?: TransactionAuditUncheckedCreateNestedManyWithoutOldTxnInput
  }

  export type TransactionCreateOrConnectWithoutAuditsToInput = {
    where: TransactionWhereUniqueInput
    create: XOR<TransactionCreateWithoutAuditsToInput, TransactionUncheckedCreateWithoutAuditsToInput>
  }

  export type StagingFileCreateWithoutTransactionAuditsInput = {
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    rows?: StagingRowCreateNestedManyWithoutFileInput
    transactionLinks?: TransactionSourceCreateNestedManyWithoutFileInput
    customerBalances?: CustomerBalanceSnapshotCreateNestedManyWithoutFileInput
  }

  export type StagingFileUncheckedCreateWithoutTransactionAuditsInput = {
    id?: number
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    rows?: StagingRowUncheckedCreateNestedManyWithoutFileInput
    transactionLinks?: TransactionSourceUncheckedCreateNestedManyWithoutFileInput
    customerBalances?: CustomerBalanceSnapshotUncheckedCreateNestedManyWithoutFileInput
  }

  export type StagingFileCreateOrConnectWithoutTransactionAuditsInput = {
    where: StagingFileWhereUniqueInput
    create: XOR<StagingFileCreateWithoutTransactionAuditsInput, StagingFileUncheckedCreateWithoutTransactionAuditsInput>
  }

  export type TransactionUpsertWithoutAuditsFromInput = {
    update: XOR<TransactionUpdateWithoutAuditsFromInput, TransactionUncheckedUpdateWithoutAuditsFromInput>
    create: XOR<TransactionCreateWithoutAuditsFromInput, TransactionUncheckedCreateWithoutAuditsFromInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutAuditsFromInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutAuditsFromInput, TransactionUncheckedUpdateWithoutAuditsFromInput>
  }

  export type TransactionUpdateWithoutAuditsFromInput = {
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    sources?: TransactionSourceUpdateManyWithoutTransactionNestedInput
    auditsTo?: TransactionAuditUpdateManyWithoutNewTxnNestedInput
  }

  export type TransactionUncheckedUpdateWithoutAuditsFromInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sources?: TransactionSourceUncheckedUpdateManyWithoutTransactionNestedInput
    auditsTo?: TransactionAuditUncheckedUpdateManyWithoutNewTxnNestedInput
  }

  export type TransactionUpsertWithoutAuditsToInput = {
    update: XOR<TransactionUpdateWithoutAuditsToInput, TransactionUncheckedUpdateWithoutAuditsToInput>
    create: XOR<TransactionCreateWithoutAuditsToInput, TransactionUncheckedCreateWithoutAuditsToInput>
    where?: TransactionWhereInput
  }

  export type TransactionUpdateToOneWithWhereWithoutAuditsToInput = {
    where?: TransactionWhereInput
    data: XOR<TransactionUpdateWithoutAuditsToInput, TransactionUncheckedUpdateWithoutAuditsToInput>
  }

  export type TransactionUpdateWithoutAuditsToInput = {
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutTransactionsNestedInput
    sources?: TransactionSourceUpdateManyWithoutTransactionNestedInput
    auditsFrom?: TransactionAuditUpdateManyWithoutOldTxnNestedInput
  }

  export type TransactionUncheckedUpdateWithoutAuditsToInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sources?: TransactionSourceUncheckedUpdateManyWithoutTransactionNestedInput
    auditsFrom?: TransactionAuditUncheckedUpdateManyWithoutOldTxnNestedInput
  }

  export type StagingFileUpsertWithoutTransactionAuditsInput = {
    update: XOR<StagingFileUpdateWithoutTransactionAuditsInput, StagingFileUncheckedUpdateWithoutTransactionAuditsInput>
    create: XOR<StagingFileCreateWithoutTransactionAuditsInput, StagingFileUncheckedCreateWithoutTransactionAuditsInput>
    where?: StagingFileWhereInput
  }

  export type StagingFileUpdateToOneWithWhereWithoutTransactionAuditsInput = {
    where?: StagingFileWhereInput
    data: XOR<StagingFileUpdateWithoutTransactionAuditsInput, StagingFileUncheckedUpdateWithoutTransactionAuditsInput>
  }

  export type StagingFileUpdateWithoutTransactionAuditsInput = {
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    rows?: StagingRowUpdateManyWithoutFileNestedInput
    transactionLinks?: TransactionSourceUpdateManyWithoutFileNestedInput
    customerBalances?: CustomerBalanceSnapshotUpdateManyWithoutFileNestedInput
  }

  export type StagingFileUncheckedUpdateWithoutTransactionAuditsInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    rows?: StagingRowUncheckedUpdateManyWithoutFileNestedInput
    transactionLinks?: TransactionSourceUncheckedUpdateManyWithoutFileNestedInput
    customerBalances?: CustomerBalanceSnapshotUncheckedUpdateManyWithoutFileNestedInput
  }

  export type CustomerCreateWithoutBalancesInput = {
    code: string
    name: string
    phone?: string | null
    address?: string | null
    accountType?: string | null
    tag1?: string | null
    tag2?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionCreateNestedManyWithoutCustomerInput
  }

  export type CustomerUncheckedCreateWithoutBalancesInput = {
    id?: number
    code: string
    name: string
    phone?: string | null
    address?: string | null
    accountType?: string | null
    tag1?: string | null
    tag2?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    transactions?: TransactionUncheckedCreateNestedManyWithoutCustomerInput
  }

  export type CustomerCreateOrConnectWithoutBalancesInput = {
    where: CustomerWhereUniqueInput
    create: XOR<CustomerCreateWithoutBalancesInput, CustomerUncheckedCreateWithoutBalancesInput>
  }

  export type StagingFileCreateWithoutCustomerBalancesInput = {
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    rows?: StagingRowCreateNestedManyWithoutFileInput
    transactionLinks?: TransactionSourceCreateNestedManyWithoutFileInput
    transactionAudits?: TransactionAuditCreateNestedManyWithoutFileInput
  }

  export type StagingFileUncheckedCreateWithoutCustomerBalancesInput = {
    id?: number
    originalFilename: string
    uploadedAt?: Date | string
    status: string
    rowCount?: number
    insertedCount?: number
    updatedCount?: number
    skippedCount?: number
    error?: string | null
    rows?: StagingRowUncheckedCreateNestedManyWithoutFileInput
    transactionLinks?: TransactionSourceUncheckedCreateNestedManyWithoutFileInput
    transactionAudits?: TransactionAuditUncheckedCreateNestedManyWithoutFileInput
  }

  export type StagingFileCreateOrConnectWithoutCustomerBalancesInput = {
    where: StagingFileWhereUniqueInput
    create: XOR<StagingFileCreateWithoutCustomerBalancesInput, StagingFileUncheckedCreateWithoutCustomerBalancesInput>
  }

  export type CustomerUpsertWithoutBalancesInput = {
    update: XOR<CustomerUpdateWithoutBalancesInput, CustomerUncheckedUpdateWithoutBalancesInput>
    create: XOR<CustomerCreateWithoutBalancesInput, CustomerUncheckedCreateWithoutBalancesInput>
    where?: CustomerWhereInput
  }

  export type CustomerUpdateToOneWithWhereWithoutBalancesInput = {
    where?: CustomerWhereInput
    data: XOR<CustomerUpdateWithoutBalancesInput, CustomerUncheckedUpdateWithoutBalancesInput>
  }

  export type CustomerUpdateWithoutBalancesInput = {
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUpdateManyWithoutCustomerNestedInput
  }

  export type CustomerUncheckedUpdateWithoutBalancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    code?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    accountType?: NullableStringFieldUpdateOperationsInput | string | null
    tag1?: NullableStringFieldUpdateOperationsInput | string | null
    tag2?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    transactions?: TransactionUncheckedUpdateManyWithoutCustomerNestedInput
  }

  export type StagingFileUpsertWithoutCustomerBalancesInput = {
    update: XOR<StagingFileUpdateWithoutCustomerBalancesInput, StagingFileUncheckedUpdateWithoutCustomerBalancesInput>
    create: XOR<StagingFileCreateWithoutCustomerBalancesInput, StagingFileUncheckedCreateWithoutCustomerBalancesInput>
    where?: StagingFileWhereInput
  }

  export type StagingFileUpdateToOneWithWhereWithoutCustomerBalancesInput = {
    where?: StagingFileWhereInput
    data: XOR<StagingFileUpdateWithoutCustomerBalancesInput, StagingFileUncheckedUpdateWithoutCustomerBalancesInput>
  }

  export type StagingFileUpdateWithoutCustomerBalancesInput = {
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    rows?: StagingRowUpdateManyWithoutFileNestedInput
    transactionLinks?: TransactionSourceUpdateManyWithoutFileNestedInput
    transactionAudits?: TransactionAuditUpdateManyWithoutFileNestedInput
  }

  export type StagingFileUncheckedUpdateWithoutCustomerBalancesInput = {
    id?: IntFieldUpdateOperationsInput | number
    originalFilename?: StringFieldUpdateOperationsInput | string
    uploadedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: StringFieldUpdateOperationsInput | string
    rowCount?: IntFieldUpdateOperationsInput | number
    insertedCount?: IntFieldUpdateOperationsInput | number
    updatedCount?: IntFieldUpdateOperationsInput | number
    skippedCount?: IntFieldUpdateOperationsInput | number
    error?: NullableStringFieldUpdateOperationsInput | string | null
    rows?: StagingRowUncheckedUpdateManyWithoutFileNestedInput
    transactionLinks?: TransactionSourceUncheckedUpdateManyWithoutFileNestedInput
    transactionAudits?: TransactionAuditUncheckedUpdateManyWithoutFileNestedInput
  }

  export type StagingRowCreateWithoutFileInput = {
    index: number
    rawJson: string
    rowHash: string
  }

  export type StagingRowUncheckedCreateWithoutFileInput = {
    id?: number
    index: number
    rawJson: string
    rowHash: string
  }

  export type StagingRowCreateOrConnectWithoutFileInput = {
    where: StagingRowWhereUniqueInput
    create: XOR<StagingRowCreateWithoutFileInput, StagingRowUncheckedCreateWithoutFileInput>
  }

  export type StagingRowCreateManyFileInputEnvelope = {
    data: StagingRowCreateManyFileInput | StagingRowCreateManyFileInput[]
  }

  export type TransactionSourceCreateWithoutFileInput = {
    transaction: TransactionCreateNestedOneWithoutSourcesInput
  }

  export type TransactionSourceUncheckedCreateWithoutFileInput = {
    id?: number
    transactionId: number
  }

  export type TransactionSourceCreateOrConnectWithoutFileInput = {
    where: TransactionSourceWhereUniqueInput
    create: XOR<TransactionSourceCreateWithoutFileInput, TransactionSourceUncheckedCreateWithoutFileInput>
  }

  export type TransactionSourceCreateManyFileInputEnvelope = {
    data: TransactionSourceCreateManyFileInput | TransactionSourceCreateManyFileInput[]
  }

  export type CustomerBalanceSnapshotCreateWithoutFileInput = {
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
    customer: CustomerCreateNestedOneWithoutBalancesInput
  }

  export type CustomerBalanceSnapshotUncheckedCreateWithoutFileInput = {
    id?: number
    customerId: number
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
  }

  export type CustomerBalanceSnapshotCreateOrConnectWithoutFileInput = {
    where: CustomerBalanceSnapshotWhereUniqueInput
    create: XOR<CustomerBalanceSnapshotCreateWithoutFileInput, CustomerBalanceSnapshotUncheckedCreateWithoutFileInput>
  }

  export type CustomerBalanceSnapshotCreateManyFileInputEnvelope = {
    data: CustomerBalanceSnapshotCreateManyFileInput | CustomerBalanceSnapshotCreateManyFileInput[]
  }

  export type TransactionAuditCreateWithoutFileInput = {
    reason: string
    createdAt?: Date | string
    oldTxn?: TransactionCreateNestedOneWithoutAuditsFromInput
    newTxn?: TransactionCreateNestedOneWithoutAuditsToInput
  }

  export type TransactionAuditUncheckedCreateWithoutFileInput = {
    id?: number
    oldTxnId?: number | null
    newTxnId?: number | null
    reason: string
    createdAt?: Date | string
  }

  export type TransactionAuditCreateOrConnectWithoutFileInput = {
    where: TransactionAuditWhereUniqueInput
    create: XOR<TransactionAuditCreateWithoutFileInput, TransactionAuditUncheckedCreateWithoutFileInput>
  }

  export type TransactionAuditCreateManyFileInputEnvelope = {
    data: TransactionAuditCreateManyFileInput | TransactionAuditCreateManyFileInput[]
  }

  export type StagingRowUpsertWithWhereUniqueWithoutFileInput = {
    where: StagingRowWhereUniqueInput
    update: XOR<StagingRowUpdateWithoutFileInput, StagingRowUncheckedUpdateWithoutFileInput>
    create: XOR<StagingRowCreateWithoutFileInput, StagingRowUncheckedCreateWithoutFileInput>
  }

  export type StagingRowUpdateWithWhereUniqueWithoutFileInput = {
    where: StagingRowWhereUniqueInput
    data: XOR<StagingRowUpdateWithoutFileInput, StagingRowUncheckedUpdateWithoutFileInput>
  }

  export type StagingRowUpdateManyWithWhereWithoutFileInput = {
    where: StagingRowScalarWhereInput
    data: XOR<StagingRowUpdateManyMutationInput, StagingRowUncheckedUpdateManyWithoutFileInput>
  }

  export type StagingRowScalarWhereInput = {
    AND?: StagingRowScalarWhereInput | StagingRowScalarWhereInput[]
    OR?: StagingRowScalarWhereInput[]
    NOT?: StagingRowScalarWhereInput | StagingRowScalarWhereInput[]
    id?: IntFilter<"StagingRow"> | number
    fileId?: IntFilter<"StagingRow"> | number
    index?: IntFilter<"StagingRow"> | number
    rawJson?: StringFilter<"StagingRow"> | string
    rowHash?: StringFilter<"StagingRow"> | string
  }

  export type TransactionSourceUpsertWithWhereUniqueWithoutFileInput = {
    where: TransactionSourceWhereUniqueInput
    update: XOR<TransactionSourceUpdateWithoutFileInput, TransactionSourceUncheckedUpdateWithoutFileInput>
    create: XOR<TransactionSourceCreateWithoutFileInput, TransactionSourceUncheckedCreateWithoutFileInput>
  }

  export type TransactionSourceUpdateWithWhereUniqueWithoutFileInput = {
    where: TransactionSourceWhereUniqueInput
    data: XOR<TransactionSourceUpdateWithoutFileInput, TransactionSourceUncheckedUpdateWithoutFileInput>
  }

  export type TransactionSourceUpdateManyWithWhereWithoutFileInput = {
    where: TransactionSourceScalarWhereInput
    data: XOR<TransactionSourceUpdateManyMutationInput, TransactionSourceUncheckedUpdateManyWithoutFileInput>
  }

  export type CustomerBalanceSnapshotUpsertWithWhereUniqueWithoutFileInput = {
    where: CustomerBalanceSnapshotWhereUniqueInput
    update: XOR<CustomerBalanceSnapshotUpdateWithoutFileInput, CustomerBalanceSnapshotUncheckedUpdateWithoutFileInput>
    create: XOR<CustomerBalanceSnapshotCreateWithoutFileInput, CustomerBalanceSnapshotUncheckedCreateWithoutFileInput>
  }

  export type CustomerBalanceSnapshotUpdateWithWhereUniqueWithoutFileInput = {
    where: CustomerBalanceSnapshotWhereUniqueInput
    data: XOR<CustomerBalanceSnapshotUpdateWithoutFileInput, CustomerBalanceSnapshotUncheckedUpdateWithoutFileInput>
  }

  export type CustomerBalanceSnapshotUpdateManyWithWhereWithoutFileInput = {
    where: CustomerBalanceSnapshotScalarWhereInput
    data: XOR<CustomerBalanceSnapshotUpdateManyMutationInput, CustomerBalanceSnapshotUncheckedUpdateManyWithoutFileInput>
  }

  export type TransactionAuditUpsertWithWhereUniqueWithoutFileInput = {
    where: TransactionAuditWhereUniqueInput
    update: XOR<TransactionAuditUpdateWithoutFileInput, TransactionAuditUncheckedUpdateWithoutFileInput>
    create: XOR<TransactionAuditCreateWithoutFileInput, TransactionAuditUncheckedCreateWithoutFileInput>
  }

  export type TransactionAuditUpdateWithWhereUniqueWithoutFileInput = {
    where: TransactionAuditWhereUniqueInput
    data: XOR<TransactionAuditUpdateWithoutFileInput, TransactionAuditUncheckedUpdateWithoutFileInput>
  }

  export type TransactionAuditUpdateManyWithWhereWithoutFileInput = {
    where: TransactionAuditScalarWhereInput
    data: XOR<TransactionAuditUpdateManyMutationInput, TransactionAuditUncheckedUpdateManyWithoutFileInput>
  }

  export type TransactionCreateManyCustomerInput = {
    id?: number
    docType?: string | null
    txnDate: Date | string
    voucherNo?: string | null
    description?: string | null
    dueDate?: Date | string | null
    amountBaseCents?: number | null
    discountCents?: number | null
    amountNetCents?: number | null
    vatCents?: number | null
    debitCents?: number
    creditCents?: number
    currency?: string
    naturalKey: string
    rowHash: string
    lastFileId: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type CustomerBalanceSnapshotCreateManyCustomerInput = {
    id?: number
    fileId: number
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
  }

  export type TransactionUpdateWithoutCustomerInput = {
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sources?: TransactionSourceUpdateManyWithoutTransactionNestedInput
    auditsFrom?: TransactionAuditUpdateManyWithoutOldTxnNestedInput
    auditsTo?: TransactionAuditUpdateManyWithoutNewTxnNestedInput
  }

  export type TransactionUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    sources?: TransactionSourceUncheckedUpdateManyWithoutTransactionNestedInput
    auditsFrom?: TransactionAuditUncheckedUpdateManyWithoutOldTxnNestedInput
    auditsTo?: TransactionAuditUncheckedUpdateManyWithoutNewTxnNestedInput
  }

  export type TransactionUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    docType?: NullableStringFieldUpdateOperationsInput | string | null
    txnDate?: DateTimeFieldUpdateOperationsInput | Date | string
    voucherNo?: NullableStringFieldUpdateOperationsInput | string | null
    description?: NullableStringFieldUpdateOperationsInput | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    amountBaseCents?: NullableIntFieldUpdateOperationsInput | number | null
    discountCents?: NullableIntFieldUpdateOperationsInput | number | null
    amountNetCents?: NullableIntFieldUpdateOperationsInput | number | null
    vatCents?: NullableIntFieldUpdateOperationsInput | number | null
    debitCents?: IntFieldUpdateOperationsInput | number
    creditCents?: IntFieldUpdateOperationsInput | number
    currency?: StringFieldUpdateOperationsInput | string
    naturalKey?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
    lastFileId?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerBalanceSnapshotUpdateWithoutCustomerInput = {
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    file?: StagingFileUpdateOneRequiredWithoutCustomerBalancesNestedInput
  }

  export type CustomerBalanceSnapshotUncheckedUpdateWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerBalanceSnapshotUncheckedUpdateManyWithoutCustomerInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionSourceCreateManyTransactionInput = {
    id?: number
    fileId: number
  }

  export type TransactionAuditCreateManyOldTxnInput = {
    id?: number
    newTxnId?: number | null
    fileId: number
    reason: string
    createdAt?: Date | string
  }

  export type TransactionAuditCreateManyNewTxnInput = {
    id?: number
    oldTxnId?: number | null
    fileId: number
    reason: string
    createdAt?: Date | string
  }

  export type TransactionSourceUpdateWithoutTransactionInput = {
    file?: StagingFileUpdateOneRequiredWithoutTransactionLinksNestedInput
  }

  export type TransactionSourceUncheckedUpdateWithoutTransactionInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionSourceUncheckedUpdateManyWithoutTransactionInput = {
    id?: IntFieldUpdateOperationsInput | number
    fileId?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionAuditUpdateWithoutOldTxnInput = {
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    newTxn?: TransactionUpdateOneWithoutAuditsToNestedInput
    file?: StagingFileUpdateOneRequiredWithoutTransactionAuditsNestedInput
  }

  export type TransactionAuditUncheckedUpdateWithoutOldTxnInput = {
    id?: IntFieldUpdateOperationsInput | number
    newTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    fileId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionAuditUncheckedUpdateManyWithoutOldTxnInput = {
    id?: IntFieldUpdateOperationsInput | number
    newTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    fileId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionAuditUpdateWithoutNewTxnInput = {
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldTxn?: TransactionUpdateOneWithoutAuditsFromNestedInput
    file?: StagingFileUpdateOneRequiredWithoutTransactionAuditsNestedInput
  }

  export type TransactionAuditUncheckedUpdateWithoutNewTxnInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    fileId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionAuditUncheckedUpdateManyWithoutNewTxnInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    fileId?: IntFieldUpdateOperationsInput | number
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StagingRowCreateManyFileInput = {
    id?: number
    index: number
    rawJson: string
    rowHash: string
  }

  export type TransactionSourceCreateManyFileInput = {
    id?: number
    transactionId: number
  }

  export type CustomerBalanceSnapshotCreateManyFileInput = {
    id?: number
    customerId: number
    reportedTotalDebitCents?: number
    reportedTotalCreditCents?: number
    reportedDebtBalanceCents?: number
    reportedCreditBalanceCents?: number
    calcTotalDebitCents?: number
    calcTotalCreditCents?: number
    calcDebtBalanceCents?: number
    calcCreditBalanceCents?: number
    diffTotalDebitCents?: number
    diffTotalCreditCents?: number
    diffDebtBalanceCents?: number
    diffCreditBalanceCents?: number
    createdAt?: Date | string
  }

  export type TransactionAuditCreateManyFileInput = {
    id?: number
    oldTxnId?: number | null
    newTxnId?: number | null
    reason: string
    createdAt?: Date | string
  }

  export type StagingRowUpdateWithoutFileInput = {
    index?: IntFieldUpdateOperationsInput | number
    rawJson?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
  }

  export type StagingRowUncheckedUpdateWithoutFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    rawJson?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
  }

  export type StagingRowUncheckedUpdateManyWithoutFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    index?: IntFieldUpdateOperationsInput | number
    rawJson?: StringFieldUpdateOperationsInput | string
    rowHash?: StringFieldUpdateOperationsInput | string
  }

  export type TransactionSourceUpdateWithoutFileInput = {
    transaction?: TransactionUpdateOneRequiredWithoutSourcesNestedInput
  }

  export type TransactionSourceUncheckedUpdateWithoutFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    transactionId?: IntFieldUpdateOperationsInput | number
  }

  export type TransactionSourceUncheckedUpdateManyWithoutFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    transactionId?: IntFieldUpdateOperationsInput | number
  }

  export type CustomerBalanceSnapshotUpdateWithoutFileInput = {
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    customer?: CustomerUpdateOneRequiredWithoutBalancesNestedInput
  }

  export type CustomerBalanceSnapshotUncheckedUpdateWithoutFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type CustomerBalanceSnapshotUncheckedUpdateManyWithoutFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    customerId?: IntFieldUpdateOperationsInput | number
    reportedTotalDebitCents?: IntFieldUpdateOperationsInput | number
    reportedTotalCreditCents?: IntFieldUpdateOperationsInput | number
    reportedDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    reportedCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    calcTotalDebitCents?: IntFieldUpdateOperationsInput | number
    calcTotalCreditCents?: IntFieldUpdateOperationsInput | number
    calcDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    calcCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    diffTotalDebitCents?: IntFieldUpdateOperationsInput | number
    diffTotalCreditCents?: IntFieldUpdateOperationsInput | number
    diffDebtBalanceCents?: IntFieldUpdateOperationsInput | number
    diffCreditBalanceCents?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionAuditUpdateWithoutFileInput = {
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    oldTxn?: TransactionUpdateOneWithoutAuditsFromNestedInput
    newTxn?: TransactionUpdateOneWithoutAuditsToNestedInput
  }

  export type TransactionAuditUncheckedUpdateWithoutFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    newTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TransactionAuditUncheckedUpdateManyWithoutFileInput = {
    id?: IntFieldUpdateOperationsInput | number
    oldTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    newTxnId?: NullableIntFieldUpdateOperationsInput | number | null
    reason?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}