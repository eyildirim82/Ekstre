datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model StagingRow {
  id      Int         @id @default(autoincrement())
  fileId  Int
  index   Int
  rawJson String // Json yerine String
  rowHash String
  file    StagingFile @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, index])
}

model Customer {
  id           Int                       @id @default(autoincrement())
  code         String                    @unique
  name         String
  phone        String?
  address      String?
  accountType  String?
  tag1         String?
  tag2         String?
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  transactions Transaction[]
  balances     CustomerBalanceSnapshot[]
}

model Transaction {
  id              Int       @id @default(autoincrement())
  customerId      Int
  docType         String?
  txnDate         DateTime
  voucherNo       String?
  description     String?
  dueDate         DateTime?
  // Cents alanları (eski Float alanları kaldırıldı)
  amountBaseCents Int?      @default(0)
  discountCents   Int?      @default(0)
  amountNetCents  Int?      @default(0)
  vatCents        Int?      @default(0)
  debitCents      Int       @default(0) // NOT NULL
  creditCents     Int       @default(0) // NOT NULL
  currency        String    @default("TRY")
  naturalKey      String    @unique
  rowHash         String
  lastFileId      Int
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  customer   Customer            @relation(fields: [customerId], references: [id])
  sources    TransactionSource[]
  auditsFrom TransactionAudit[]  @relation("OldTxn")
  auditsTo   TransactionAudit[]  @relation("NewTxn")
}

model TransactionSource {
  id            Int         @id @default(autoincrement())
  transactionId Int
  fileId        Int
  transaction   Transaction @relation(fields: [transactionId], references: [id], onDelete: Cascade)
  file          StagingFile @relation(fields: [fileId], references: [id], onDelete: Cascade)
}

model TransactionAudit {
  id        Int      @id @default(autoincrement())
  oldTxnId  Int?
  newTxnId  Int?
  fileId    Int
  reason    String
  createdAt DateTime @default(now())

  oldTxn Transaction? @relation("OldTxn", fields: [oldTxnId], references: [id])
  newTxn Transaction? @relation("NewTxn", fields: [newTxnId], references: [id])
  file   StagingFile  @relation(fields: [fileId], references: [id])
}

model CustomerBalanceSnapshot {
  id                         Int      @id @default(autoincrement())
  customerId                 Int
  fileId                     Int
  // Cents alanları (eski Float alanları kaldırıldı)
  reportedTotalDebitCents    Int      @default(0)
  reportedTotalCreditCents   Int      @default(0)
  reportedDebtBalanceCents   Int      @default(0)
  reportedCreditBalanceCents Int      @default(0)
  calcTotalDebitCents        Int      @default(0)
  calcTotalCreditCents       Int      @default(0)
  calcDebtBalanceCents       Int      @default(0)
  calcCreditBalanceCents     Int      @default(0)
  diffTotalDebitCents        Int      @default(0)
  diffTotalCreditCents       Int      @default(0)
  diffDebtBalanceCents       Int      @default(0)
  diffCreditBalanceCents     Int      @default(0)
  createdAt                  DateTime @default(now())

  customer Customer    @relation(fields: [customerId], references: [id])
  file     StagingFile @relation(fields: [fileId], references: [id])

  @@unique([customerId, fileId])
}

model StagingFile {
  id                Int                       @id @default(autoincrement())
  originalFilename  String
  uploadedAt        DateTime                  @default(now())
  status            String
  rowCount          Int                       @default(0)
  insertedCount     Int                       @default(0)
  updatedCount      Int                       @default(0)
  skippedCount      Int                       @default(0)
  error             String?
  rows              StagingRow[]
  transactionLinks  TransactionSource[]
  customerBalances  CustomerBalanceSnapshot[]
  transactionAudits TransactionAudit[] // TransactionAudit ilişkisi eklendi
}
